<Type Name="InstrumentationManager" FullName="System.Management.Instrumentation.InstrumentationManager">
  <TypeSignature Language="C#" Value="public static class InstrumentationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed InstrumentationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.InstrumentationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class InstrumentationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstrumentationManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Management.Instrumentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="56264-101">提供可管理存留期與針對低耦合提供者所使用之模型的方法。</span><span class="sxs-lookup"><span data-stu-id="56264-101">Provides methods that manage the lifetime and the model used for decoupled providers.</span></span>  
  
 <span data-ttu-id="56264-102">注意：WMI .NET 程式庫目前被視為最終狀態，針對影響這些程式庫的非安全性相關問題，不會提供進一步的開發、增強功能或更新。</span><span class="sxs-lookup"><span data-stu-id="56264-102">Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries.</span></span> <span data-ttu-id="56264-103">[MI API](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) 應使用於所有新的開發。</span><span class="sxs-lookup"><span data-stu-id="56264-103">The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="56264-104">低耦合提供者會裝載應用程式。</span><span class="sxs-lookup"><span data-stu-id="56264-104">Decoupled providers are hosted by an application.</span></span> <span data-ttu-id="56264-105">將 WMI 類別的執行個體提供應用程式可以用兩種方法： 發佈/撤銷或回呼方法。</span><span class="sxs-lookup"><span data-stu-id="56264-105">Two methods can be used by the application to make instances of WMI classes available: publish/revoke or the callback method.</span></span> <span data-ttu-id="56264-106">回呼方法會使用<xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>和<xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="56264-106">The callback method uses the <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A> methods.</span></span>  
  
 <span data-ttu-id="56264-107">在發佈/revoke 模型中，WMI 基礎結構提供預設行為的許多方法，您不必自行撰寫在回呼方法。</span><span class="sxs-lookup"><span data-stu-id="56264-107">In the publish/revoke model, the WMI infrastructure provides default behavior for many of the methods you have to write yourself in the callback method.</span></span> <span data-ttu-id="56264-108">這些包括列舉型別，以及繫結方法。</span><span class="sxs-lookup"><span data-stu-id="56264-108">These include the enumeration and bind methods.</span></span> <span data-ttu-id="56264-109">在此模型中，應用程式會建立執行個體，並將其發行。</span><span class="sxs-lookup"><span data-stu-id="56264-109">In this model, the application creates instances and publishes them.</span></span> <span data-ttu-id="56264-110">應用程式會負責確保會遵守類別的索引鍵的屬性。</span><span class="sxs-lookup"><span data-stu-id="56264-110">The application is responsible for ensuring that the key properties of the classes are respected.</span></span> <span data-ttu-id="56264-111">應用程式也會負責刪除執行個體。</span><span class="sxs-lookup"><span data-stu-id="56264-111">The application is also responsible for deleting instances.</span></span>  
  
 <span data-ttu-id="56264-112">在回呼模型中，是 WMI 基礎結構必須要有應用程式有處理列舉型別、 繫結和實作的提供者的功能所需的任何其他方法的方法。</span><span class="sxs-lookup"><span data-stu-id="56264-112">In the callback model, the WMI infrastructure expects the application to have methods that handle enumeration, binding and any other methods required to implement the functionality of the provider.</span></span> <span data-ttu-id="56264-113">它呼叫這項功能的應用程式，而如果它不存在或未正確實作會失敗。</span><span class="sxs-lookup"><span data-stu-id="56264-113">It calls into the application for this functionality and fails if it does not exist or is not implemented properly.</span></span> <span data-ttu-id="56264-114">應用程式與基礎結構註冊其 WMI 類別的類型，藉由呼叫<xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>，並指出它不再想要藉由呼叫公開的 WMI 類別<xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>。</span><span class="sxs-lookup"><span data-stu-id="56264-114">The application registers the type of its WMI classes with the infrastructure by calling <xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A> and indicates that it no longer wants the WMI classes exposed by calling <xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="56264-115">下列範例示範如何使用發行/revoke 模型。</span><span class="sxs-lookup"><span data-stu-id="56264-115">The following example demonstrates how to use the publish/revoke model.</span></span> <span data-ttu-id="56264-116">建立和發行路由器類別的兩個執行個體。</span><span class="sxs-lookup"><span data-stu-id="56264-116">Two instances of the router class are created and published.</span></span> <span data-ttu-id="56264-117">稍後撤銷。</span><span class="sxs-lookup"><span data-stu-id="56264-117">They are later revoked.</span></span>  
  
```  
public class Sample_InstanceProvider  
{  
public int Main (string[] args)   
{  
Router r_one = new Router ();  
r_one.Name = "one";  
InstrumentationManager.Publish(r_one);  
Router r_two = new Router ();  
r_two.Name = "two";  
InstrumentationManager.Publish(r_two);  
// ....  
InstrumentationManager.Revoke(r_one);  
InstrumentationManager.Revoke(r_two);  
return 0;  
}  
}  
```  
  
 <span data-ttu-id="56264-118">在下一個範例中，公開 RouterNew 類別用於註冊的回呼方法。</span><span class="sxs-lookup"><span data-stu-id="56264-118">In the next example, the callback method of registration is used to expose the RouterNew class.</span></span>  
  
```  
public int MainNew(string[] args)   
{  
    InstrumentationManager.RegisterType(typeof(RouterNew));  
    // ....  
    InstrumentationManager.UnRegisterType(typeof(RouterNew));  
    return 0;  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public static void Publish (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Publish(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Publish (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Publish(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="56264-119">實作要發行的提供者的類別執行個體。</span><span class="sxs-lookup"><span data-stu-id="56264-119">An instance of the class that implements the provider to publish.</span></span></param>
        <summary><span data-ttu-id="56264-120">讓 WMI 基礎結構內的提供者執行個體可用。</span><span class="sxs-lookup"><span data-stu-id="56264-120">Makes an instance of a provider available within the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAssembly">
      <MemberSignature Language="C#" Value="public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly"><span data-ttu-id="56264-121">要註冊的組件。</span><span class="sxs-lookup"><span data-stu-id="56264-121">The assembly to register.</span></span></param>
        <summary><span data-ttu-id="56264-122">向 WMI 基礎結構註冊組件。</span><span class="sxs-lookup"><span data-stu-id="56264-122">Registers an assembly with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterType">
      <MemberSignature Language="C#" Value="public static void RegisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterType(Type ^ managementType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType"><span data-ttu-id="56264-123">類別的型別。</span><span class="sxs-lookup"><span data-stu-id="56264-123">The type of the class.</span></span></param>
        <summary><span data-ttu-id="56264-124">向 WMI 基礎結構註冊類別。</span><span class="sxs-lookup"><span data-stu-id="56264-124">Registers a class with the WMI infrastructure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```  
static int Main(string[] args)  
{  
   InstrumentationManager.RegisterType(typeof(MySampleProvider));  
   return 0;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Revoke">
      <MemberSignature Language="C#" Value="public static void Revoke (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Revoke(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Revoke (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Revoke(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="56264-125">實作要撤銷之提供者的類別執行個體。</span><span class="sxs-lookup"><span data-stu-id="56264-125">An instance of the class that implements the provider to revoke.</span></span></param>
        <summary><span data-ttu-id="56264-126">採取目前可用之提供者的執行個體，並使其無法在 WMI 基礎結構內提供使用。</span><span class="sxs-lookup"><span data-stu-id="56264-126">Takes an instance of a currently available provider and makes it unavailable within the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterAssembly">
      <MemberSignature Language="C#" Value="public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterAssembly(class System.Reflection.Assembly managementAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterAssembly (managementAssembly As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterAssembly(System::Reflection::Assembly ^ managementAssembly);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementAssembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="managementAssembly"><span data-ttu-id="56264-127">要移除註冊的已註冊組件。</span><span class="sxs-lookup"><span data-stu-id="56264-127">The registered assembly to unregister.</span></span></param>
        <summary><span data-ttu-id="56264-128">從 WMI 基礎結構移除註冊組件。</span><span class="sxs-lookup"><span data-stu-id="56264-128">Unregisters an assembly currently registered with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterType">
      <MemberSignature Language="C#" Value="public static void UnregisterType (Type managementType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterType(class System.Type managementType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterType (managementType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterType(Type ^ managementType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management.Instrumentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managementType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managementType"><span data-ttu-id="56264-129">要取消註冊的已註冊型別。</span><span class="sxs-lookup"><span data-stu-id="56264-129">The registered type to unregister.</span></span></param>
        <summary><span data-ttu-id="56264-130">從 WMI 基礎結構移除註冊類別。</span><span class="sxs-lookup"><span data-stu-id="56264-130">Unregisters a class registered with the WMI infrastructure.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>