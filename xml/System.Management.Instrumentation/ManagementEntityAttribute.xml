<Type Name="ManagementEntityAttribute" FullName="System.Management.Instrumentation.ManagementEntityAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="22a5ed8c1178d97128685812aa87058200197c2d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37756655" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManagementEntityAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManagementEntityAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.ManagementEntityAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManagementEntityAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManagementEntityAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type ManagementEntityAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The ManagementEntity attribute indicates that a class provides management information exposed through a WMI provider.  Note: the WMI .NET libraries are now considered in final state, and no further development, enhancements, or updates will be available for non-security related issues affecting these libraries. The [MI APIs](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx) should be used for all new development.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性所標記的類別必須是公用的。  
  
   
  
## Examples  
 下列範例示範如何使用 ManagementEntity 屬性來標記類別。  
  
```  
// Use the ManagementEntity attribute on the class to specify that this // class contains management information that is available from  
// provider.  
  
    [ManagementEntity(Name = "MortgageCalc")]  
    public class MortgageCalcWMIProvider  
    {  
    }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementEntityAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.ManagementEntityAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManagementEntityAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Management.Instrumentation.ManagementEntityAttribute" /> class. This is the default constructor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式不接受名稱參數。 如果您使用未指定名稱<xref:System.Management.Instrumentation.ManagementEntityAttribute.Name>參數，相關聯的 WMI 類別的名稱會預設為屬性化類別的名稱。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="External">
      <MemberSignature Language="C#" Value="public bool External { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool External" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.External" />
      <MemberSignature Language="VB.NET" Value="Public Property External As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool External { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.External : bool with get, set" Usage="System.Management.Instrumentation.ManagementEntityAttribute.External" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that specifies whether the class represents a WMI class in a provider implemented external to the current assembly.</summary>
        <value>類別可代表外部 WMI 類別和 false 否則如果為 true 的布林值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 實作提供者可實作延伸現有的抽象 WMI 類別的類別時，會使用這項目。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Management.Instrumentation.ManagementEntityAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the WMI class.</summary>
        <value>包含 WMI 類別名稱的字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您未設定這個屬性指定 WMI 類別的名稱，WMI 類別會預設為屬性化類別的名稱。  
  
   
  
## Examples  
 在下列範例中，Name 參數用來設定 MortgageCalcWMIProvider 類別所代表的 WMI 類別的名稱。 將名稱設 MortgageCalculator。 如果使用的參數不是名稱，對應 C# 類別名稱，MortgageCalcWMIProvider 在此情況下，會使用與 WMI 類別名稱。  
  
```  
[ManagementEntity(Name = "MortgageCalculator")]  
public class MortgageCalcWMIProvider  
{  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Singleton">
      <MemberSignature Language="C#" Value="public bool Singleton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Singleton" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEntityAttribute.Singleton" />
      <MemberSignature Language="VB.NET" Value="Public Property Singleton As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Singleton { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Singleton : bool with get, set" Usage="System.Management.Instrumentation.ManagementEntityAttribute.Singleton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies whether the associated class represents a singleton WMI class.</summary>
        <value>類別可代表單一 WMI 類別和 false 否則如果為 true 的布林值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 單一 WMI 類別是其中一個，可以只會有單一執行個體。 雖然您可以撰寫程式碼邏輯，以確保曾經建立單一執行個體的 WMI 類別，提供這個參數屬性是為了讓工作，輕鬆且一致。  
  
 當使用單一 WMI 類別，用戶端應用程式必須使用特殊的語法。 如需詳細資訊，請參閱描述執行個體的物件路徑中的主題位於 MSDN online library [ http://www.msdn.com ](http://www.msdn.com/)。  
  
   
  
## Examples  
 下列程式碼片段示範如何使用單一參數來指出 C# 類別對應至單一 WMI 類別。  
  
```  
[ManagementEntity(Singleton=true)]  
public class SingletonSample  
```  
  
 如需完整的工作的範例實作的單一類別的提供者，請參閱[如何： 建立基本低耦合提供者](http://msdn.microsoft.com/library/1dabd442-c1ff-40a1-bb0e-d7b3566c2300)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>