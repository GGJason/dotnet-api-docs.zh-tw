<Type Name="Storyboard" FullName="System.Windows.Media.Animation.Storyboard">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="277dccf156343c8e0c972aed5cd1f2cf6e323c87" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48646414" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Storyboard : System.Windows.Media.Animation.ParallelTimeline" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Storyboard extends System.Windows.Media.Animation.ParallelTimeline" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.Storyboard" />
  <TypeSignature Language="VB.NET" Value="Public Class Storyboard&#xA;Inherits ParallelTimeline" />
  <TypeSignature Language="C++ CLI" Value="public ref class Storyboard : System::Windows::Media::Animation::ParallelTimeline" />
  <TypeSignature Language="F#" Value="type Storyboard = class&#xA;    inherit ParallelTimeline" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.ParallelTimeline</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>容器時間表，提供目標設為其子動畫資訊的物件和屬性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="interactively-controlling-storyboards"></a>以互動方式控制分鏡腳本  
 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在標記中，您指定<xref:System.Windows.Media.Animation.BeginStoryboard.Name%2A>的屬性<xref:System.Windows.Media.Animation.BeginStoryboard>物件來建立它; 如需範例，請參閱[如何： 使用事件觸發程序來控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-use-event-triggers-to-control-a-storyboard-after-it-starts.md)。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
## <a name="data-binding-and-animating-timelines"></a>資料繫結和動畫時間軸  
 大部分的時間軸屬性可以是資料繫結或以動畫顯示;不過，由於計時系統的運作的方式，資料繫結或動畫時間軸行為不像其他資料繫結或動畫物件。 若要了解其行為，它有助於了解啟用時間軸的意義。  
  
 啟動時間軸時，複本是由時間軸和及其子時刻表。 這些複本會被凍結 （變成唯讀狀態） 和<xref:System.Windows.Media.Animation.Clock>從中建立物件。 這些時鐘會執行以動畫顯示目標屬性的實際工作。 如果時間表是資料繫結或動畫，快照集及其目前值的項目時建立其時鐘。 即使原始時間軸可能會持續變更，其時鐘則否。  
  
 以反映資料繫結或動畫變更時刻表，其時鐘必須重新建立。 時鐘會不重新為您自動建立。 以下是幾種可套用時間軸變更的方式︰  
  
-   如果時間軸是或屬於<xref:System.Windows.Media.Animation.Storyboard>，您可以將它重新套用其分鏡腳本的使用，以反映變更<xref:System.Windows.Media.Animation.BeginStoryboard>或<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法。 這也會一併重新啟動動畫。 在程式碼中，您可以使用<xref:System.Windows.Media.Animation.Storyboard.Seek%2A>方法將分鏡腳本回它先前的位置。  
  
-   如果您直接將屬性套用動畫<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A>方法中，呼叫<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A>方法一次，並將它傳遞已修改的動畫。  
  
-   如果您正在直接在時鐘層級，建立和套用一組新的時鐘，並使用它們來取代前一組建立的時鐘。  
  
 如需資料的範例繫結動畫，請參閱 <<c0> [ 主要曲線動畫範例](http://go.microsoft.com/fwlink/?LinkID=160011)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Storyboard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Storyboard();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Begin">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>啟始與這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 相關聯的一組動畫。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="storyboard.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將與這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 相關聯的動畫套用至其目標並加以初始化。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin (containingObject As FrameworkContentElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkContentElement -&gt; unit" Usage="storyboard.Begin containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">物件，包含在與這個分鏡腳本動畫目標相同的名稱範圍內。 不具有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的動畫才會套用至 <c>containingObject</c>。</param>
        <summary>將與這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 相關聯的動畫套用至其目標並加以初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目標的屬性都已顯示動畫時，它們會取代使用<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace>遞移式行為。  
  
 無法暫停、 繼續，或其他互動方式控制其啟動之後開始使用這個方法的分鏡腳本。 若要控制分鏡腳本，請使用<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>或<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法。  
  
 從 分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
   
  
## Examples  
 下列範例會使用分鏡腳本以動畫顯示<xref:System.Windows.Media.TextEffect>。 <xref:System.Windows.Media.TextEffect>內含<xref:System.Windows.FrameworkContentElement>的名稱範圍。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementStoryboardExample.cs#frameworkcontentelementstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementstoryboardexample.vb#frameworkcontentelementstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin (containingObject As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement -&gt; unit" Usage="storyboard.Begin containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">物件，包含在與這個分鏡腳本動畫目標相同的名稱範圍內。 不具有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的動畫才會套用至 <c>containingObject</c>。</param>
        <summary>將與這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 相關聯的動畫套用至其目標並加以初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目標的屬性都已顯示動畫時，它們會取代使用<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace>遞移式行為。  
  
 無法暫停、 繼續，或其他互動方式控制其啟動之後開始使用這個方法的分鏡腳本。 若要控制分鏡腳本，請使用<xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Boolean%29>或<xref:System.Windows.Media.Animation.Storyboard.Begin%28System.Windows.FrameworkElement%2CSystem.Windows.Media.Animation.HandoffBehavior%2CSystem.Boolean%29>方法。  
  
 從 分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkContentElement containingObject, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkContentElement containingObject, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin (containingObject As FrameworkContentElement, isControllable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkContentElement ^ containingObject, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkContentElement * bool -&gt; unit" Usage="storyboard.Begin (containingObject, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">物件，包含在與這個分鏡腳本動畫目標相同的名稱範圍內。 不具有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的動畫才會套用至 <c>containingObject</c>。</param>
        <param name="isControllable">如果腳本應該要以互動方式控制，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
        <summary>將與這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 相關聯的動畫套用至其目標並加以初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目標的屬性都已顯示動畫時，它們會取代使用<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace>遞移式行為。  
  
 若要以互動方式控制這個分鏡腳本，您必須指定相同`containingObject`互動的方法呼叫時，您用來開始分鏡腳本  
  
 呼叫這個方法時，<xref:System.Windows.Media.Animation.Clock>分鏡腳本和它所包含的任何時間軸建立物件。 這些時鐘會與儲存`containingObject`。  
  
 從 分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
   
  
## Examples  
 下列範例會使用可控制的分鏡腳本以動畫顯示<xref:System.Windows.Media.TextEffect>。 <xref:System.Windows.Media.TextEffect>內含<xref:System.Windows.FrameworkContentElement>的名稱範圍。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkContentElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkContentElement containingObject, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkContentElement ^ containingObject, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkContentElement * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="storyboard.Begin (containingObject, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="containingObject">物件，包含在與這個分鏡腳本動畫目標相同的名稱範圍內。 不具有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的動畫才會套用至 <c>containingObject</c>。</param>
        <param name="handoffBehavior">新動畫的行為應用來與任何目前的動畫進行互動。</param>
        <summary>使用指定的 <see cref="T:System.Windows.Media.Animation.Storyboard" />，將與這個 <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> 相關聯的動畫套用至目標並加以初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您套用<xref:System.Windows.Media.Animation.Storyboard>， <xref:System.Windows.Media.Animation.AnimationTimeline>，或<xref:System.Windows.Media.Animation.AnimationClock>屬性，使用<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、 任何<xref:System.Windows.Media.Animation.Clock>先前該屬性相關聯的物件會繼續耗用系統資源，計時系統並不會自動移除這些時鐘。  
  
 若要避免發生效能問題，當您套用大量時鐘使用<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>，完成之後，您應該從動畫屬性移除組成的時鐘。 有幾個方式可移除時鐘。  
  
-   若要從屬性移除所有時鐘，請使用<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>或<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>動畫物件的方法。 指定的第一個參數，要繪製之屬性和`null`作為第二個。 這會從屬性移除所有動畫時鐘。  
  
-   若要移除特定<xref:System.Windows.Media.Animation.AnimationClock>從時鐘清單，使用<xref:System.Windows.Media.Animation.Clock.Controller%2A>屬性<xref:System.Windows.Media.Animation.AnimationClock>擷取<xref:System.Windows.Media.Animation.ClockController>，然後呼叫<xref:System.Windows.Media.Animation.ClockController.Remove%2A>方法<xref:System.Windows.Media.Animation.ClockController>。 這通常是<xref:System.Windows.Media.Animation.Clock.Completed>時鐘的事件處理常式。 請注意，只有根時鐘可以控制<xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>的子系時鐘的屬性會傳回`null`。 也請注意，<xref:System.Windows.Media.Animation.Clock.Completed>是否有效的持續時間的時鐘永遠不會呼叫事件。  在此情況下，使用者必須決定何時要呼叫<xref:System.Windows.Media.Animation.ClockController.Remove%2A>。  
  
 這主要是在存留期較長的物件才會發生的動畫問題。  回收物件時，其時鐘也會中斷連接，並進行記憶體回收。  
  
 如需時鐘物件的詳細資訊，請參閱[動畫和計時系統概觀](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace><xref:System.Windows.Media.Animation.HandoffBehavior>來以動畫顯示，當使用者 left-clicks，而<xref:System.Windows.Media.Animation.HandoffBehavior.Compose><xref:System.Windows.Media.Animation.HandoffBehavior>當使用者按一下滑鼠右鍵。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementStoryboardWithHandoffBehaviorExample.cs#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementstoryboardwithhandoffbehaviorexample.vb#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin (containingObject As FrameworkElement, isControllable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement * bool -&gt; unit" Usage="storyboard.Begin (containingObject, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">物件，包含在與這個分鏡腳本動畫目標相同的名稱範圍內。 不具有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的動畫才會套用至 <c>containingObject</c>。</param>
        <param name="isControllable">如果腳本應該要以互動方式控制，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
        <summary>將與這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 相關聯的動畫套用至其目標並加以初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目標的屬性都已顯示動畫時，它們會取代使用<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace>遞移式行為。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`參數時呼叫您用來開始分鏡腳本的互動方法  
  
 呼叫這個方法時，<xref:System.Windows.Media.Animation.Clock>分鏡腳本和它所包含的任何時間軸建立物件。 這些時鐘會與儲存`containingObject`。  
  
 從 分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, class System.Windows.FrameworkTemplate frameworkTemplate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject, System::Windows::FrameworkTemplate ^ frameworkTemplate);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement * System.Windows.FrameworkTemplate -&gt; unit" Usage="storyboard.Begin (containingObject, frameworkTemplate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="frameworkTemplate" Type="System.Windows.FrameworkTemplate" />
      </Parameters>
      <Docs>
        <param name="containingObject">已套用所指定 <c>frameworkTemplate</c> 的物件。 不具有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的動畫才會套用至 <c>containingObject</c>。</param>
        <param name="frameworkTemplate">要顯示動畫的範本。</param>
        <summary>將與這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 相關聯的動畫套用至指定範本內的目標並加以初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目標的屬性都已顯示動畫時，它們會取代使用<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace>遞移式行為。  
  
 呼叫這個方法時，<xref:System.Windows.Media.Animation.Clock>分鏡腳本和它所包含的任何時間軸建立物件。 這些時鐘會與儲存`containingObject`。  
  
 從 分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="storyboard.Begin (containingObject, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="containingObject">物件，包含在與這個分鏡腳本動畫目標相同的名稱範圍內。 不具有所指定 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的動畫才會套用至 <c>containingObject</c>。</param>
        <param name="handoffBehavior">新動畫的行為應用來與任何目前的動畫進行互動。</param>
        <summary>使用指定的 <see cref="T:System.Windows.Media.Animation.Storyboard" />，將與這個 <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> 相關聯的動畫套用至目標並加以初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會使用<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace><xref:System.Windows.Media.Animation.HandoffBehavior>來以動畫顯示，當使用者 left-clicks，而<xref:System.Windows.Media.Animation.HandoffBehavior.Compose><xref:System.Windows.Media.Animation.HandoffBehavior>當使用者按一下滑鼠右鍵。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkElementStoryboardHandoffBehaviorExample.cs#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkelementstoryboardhandoffbehaviorexample.vb#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkContentElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkContentElement containingObject, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkContentElement ^ containingObject, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkContentElement * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="storyboard.Begin (containingObject, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">物件，包含在與這個分鏡腳本動畫目標相同的名稱範圍內。 不具有所指定 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的動畫才會套用至 <c>containingObject</c>。</param>
        <param name="handoffBehavior">新動畫的行為應用來與任何目前的動畫進行互動。</param>
        <param name="isControllable">宣告在動畫啟動後，是否可以控制 (暫停) 該動畫。</param>
        <summary>使用指定的 <see cref="T:System.Windows.Media.Animation.Storyboard" />，將與這個 <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> 相關聯的動畫套用至目標並加以初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目標的屬性都已顯示動畫時，它們會取代使用指定的遞移式行為。  
  
 若要以互動方式控制這個分鏡腳本，您必須指定相同`containingObject`互動的方法呼叫時，您用來開始分鏡腳本  
  
 呼叫這個方法時，<xref:System.Windows.Media.Animation.Clock>分鏡腳本和它所包含的任何時間軸建立物件。 這些時鐘會與儲存`containingObject`。  
  
 從 分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
## <a name="using-the-compose-handoffbehavior"></a>使用 Compose HandoffBehavior  
 當您套用<xref:System.Windows.Media.Animation.Storyboard>， <xref:System.Windows.Media.Animation.AnimationTimeline>，或<xref:System.Windows.Media.Animation.AnimationClock>屬性，使用<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、 任何<xref:System.Windows.Media.Animation.Clock>先前該屬性相關聯的物件會繼續耗用系統資源，計時系統並不會自動移除這些時鐘。  
  
 若要避免發生效能問題，當您套用大量時鐘使用<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>，完成之後，您應該從動畫屬性移除組成的時鐘。 有幾個方式可移除時鐘。  
  
-   若要從屬性移除所有時鐘，請使用<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>或<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>動畫物件的方法。 指定的第一個參數，要繪製之屬性和`null`作為第二個。 這會從屬性移除所有動畫時鐘。  
  
-   若要移除特定<xref:System.Windows.Media.Animation.AnimationClock>從時鐘清單，使用<xref:System.Windows.Media.Animation.Clock.Controller%2A>屬性<xref:System.Windows.Media.Animation.AnimationClock>擷取<xref:System.Windows.Media.Animation.ClockController>，然後呼叫<xref:System.Windows.Media.Animation.ClockController.Remove%2A>方法<xref:System.Windows.Media.Animation.ClockController>。 這通常是<xref:System.Windows.Media.Animation.Clock.Completed>時鐘的事件處理常式。 請注意，只有根時鐘可以控制<xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>的子系時鐘的屬性會傳回`null`。 也請注意，<xref:System.Windows.Media.Animation.Clock.Completed>是否有效的持續時間的時鐘永遠不會呼叫事件。  在此情況下，使用者必須決定何時要呼叫<xref:System.Windows.Media.Animation.ClockController.Remove%2A>。  
  
 這主要是在存留期較長的物件才會發生的動畫問題。  回收物件時，其時鐘也會中斷連接，並進行記憶體回收。  
  
 如需時鐘物件的詳細資訊，請參閱[動畫和計時系統概觀](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)。  
  
   
  
## Examples  
 下列範例會使用可控制的分鏡腳本以動畫顯示<xref:System.Windows.Media.TextEffect>。 <xref:System.Windows.Media.TextEffect>內含<xref:System.Windows.FrameworkContentElement>的名稱範圍。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 下一個範例會使用<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace><xref:System.Windows.Media.Animation.HandoffBehavior>來以動畫顯示，當使用者 left-clicks，而<xref:System.Windows.Media.Animation.HandoffBehavior.Compose><xref:System.Windows.Media.Animation.HandoffBehavior>當使用者按一下滑鼠右鍵。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementStoryboardWithHandoffBehaviorExample.cs#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementStoryboardWithHandoffBehaviorExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementstoryboardwithhandoffbehaviorexample.vb#frameworkcontentelementstoryboardwithhandoffbehaviorexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, class System.Windows.FrameworkTemplate frameworkTemplate, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject, System::Windows::FrameworkTemplate ^ frameworkTemplate, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement * System.Windows.FrameworkTemplate * bool -&gt; unit" Usage="storyboard.Begin (containingObject, frameworkTemplate, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="frameworkTemplate" Type="System.Windows.FrameworkTemplate" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">已套用所指定 <c>frameworkTemplate</c> 的物件。  不具有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的動畫才會套用至 <c>containingObject</c>。</param>
        <param name="frameworkTemplate">要顯示動畫的範本。</param>
        <param name="isControllable">如果腳本應該要以互動方式控制，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
        <summary>將與這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 相關聯的動畫套用至指定範本內的目標並加以初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目標的屬性都已顯示動畫時，它們會取代使用<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace>遞移式行為。  
  
 若要以互動方式控制這個分鏡腳本，您必須指定相同`containingObject`互動的方法呼叫時，您用來開始分鏡腳本  
  
 呼叫這個方法時，<xref:System.Windows.Media.Animation.Clock>分鏡腳本和它所包含的任何時間軸建立物件。 這些時鐘會與儲存`containingObject`。  
  
 從 分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, class System.Windows.FrameworkTemplate frameworkTemplate, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject, System::Windows::FrameworkTemplate ^ frameworkTemplate, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement * System.Windows.FrameworkTemplate * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="storyboard.Begin (containingObject, frameworkTemplate, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="frameworkTemplate" Type="System.Windows.FrameworkTemplate" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="containingObject">已套用所指定 <c>frameworkTemplate</c> 的物件。 不具有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的動畫才會套用至 <c>containingObject</c>。</param>
        <param name="frameworkTemplate">要顯示動畫的範本。</param>
        <param name="handoffBehavior">新動畫的行為應用來與任何目前的動畫進行互動。</param>
        <summary>將與這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 相關聯的動畫套用至指定範本內的目標並加以初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法時，<xref:System.Windows.Media.Animation.Clock>分鏡腳本和它所包含的任何時間軸建立物件。 這些時鐘會與儲存`containingObject`。  
  
 從 分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
## <a name="using-the-compose-handoffbehavior"></a>使用 Compose HandoffBehavior  
 當您套用<xref:System.Windows.Media.Animation.Storyboard>， <xref:System.Windows.Media.Animation.AnimationTimeline>，或<xref:System.Windows.Media.Animation.AnimationClock>屬性，使用<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、 任何<xref:System.Windows.Media.Animation.Clock>先前該屬性相關聯的物件會繼續耗用系統資源，計時系統並不會自動移除這些時鐘。  
  
 若要避免發生效能問題，當您套用大量時鐘使用<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>，完成之後，您應該從動畫屬性移除組成的時鐘。 有幾個方式可移除時鐘。  
  
-   若要從屬性移除所有時鐘，請使用<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>或<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>動畫物件的方法。 指定的第一個參數，要繪製之屬性和`null`作為第二個。 這會從屬性移除所有動畫時鐘。  
  
-   若要移除特定<xref:System.Windows.Media.Animation.AnimationClock>從時鐘清單，使用<xref:System.Windows.Media.Animation.Clock.Controller%2A>屬性<xref:System.Windows.Media.Animation.AnimationClock>擷取<xref:System.Windows.Media.Animation.ClockController>，然後呼叫<xref:System.Windows.Media.Animation.ClockController.Remove%2A>方法<xref:System.Windows.Media.Animation.ClockController>。 這通常是<xref:System.Windows.Media.Animation.Clock.Completed>時鐘的事件處理常式。 請注意，只有根時鐘可以控制<xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>的子系時鐘的屬性會傳回`null`。 也請注意，<xref:System.Windows.Media.Animation.Clock.Completed>是否有效的持續時間的時鐘永遠不會呼叫事件。  在此情況下，使用者必須決定何時要呼叫<xref:System.Windows.Media.Animation.ClockController.Remove%2A>。  
  
 這主要是在存留期較長的物件才會發生的動畫問題。  回收物件時，其時鐘也會中斷連接，並進行記憶體回收。  
  
 如需時鐘物件的詳細資訊，請參閱[動畫和計時系統概觀](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="storyboard.Begin (containingObject, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">物件，包含在與這個分鏡腳本動畫目標相同的名稱範圍內。 不具有所指定 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的動畫才會套用至 <c>containingObject</c>。</param>
        <param name="handoffBehavior">新動畫的行為應用來與任何目前的動畫進行互動。</param>
        <param name="isControllable">宣告在動畫啟動後，是否可以控制 (暫停) 該動畫。</param>
        <summary>將與這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 相關聯的動畫套用至其目標並加以初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`參數時呼叫您用來開始分鏡腳本的互動方法  
  
 呼叫這個方法時，<xref:System.Windows.Media.Animation.Clock>分鏡腳本和它所包含的任何時間軸建立物件。 這些時鐘會與儲存`containingObject`。  
  
 從 分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
## <a name="using-the-compose-handoffbehavior"></a>使用 Compose HandoffBehavior  
 當您套用<xref:System.Windows.Media.Animation.Storyboard>， <xref:System.Windows.Media.Animation.AnimationTimeline>，或<xref:System.Windows.Media.Animation.AnimationClock>屬性，使用<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、 任何<xref:System.Windows.Media.Animation.Clock>先前該屬性相關聯的物件會繼續耗用系統資源，計時系統並不會自動移除這些時鐘。  
  
 若要避免發生效能問題，當您套用大量時鐘使用<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>，完成之後，您應該從動畫屬性移除組成的時鐘。 有幾個方式可移除時鐘。  
  
-   若要從屬性移除所有時鐘，請使用<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>或<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>動畫物件的方法。 指定的第一個參數，要繪製之屬性和`null`作為第二個。 這會從屬性移除所有動畫時鐘。  
  
-   若要移除特定<xref:System.Windows.Media.Animation.AnimationClock>從時鐘清單，使用<xref:System.Windows.Media.Animation.Clock.Controller%2A>屬性<xref:System.Windows.Media.Animation.AnimationClock>擷取<xref:System.Windows.Media.Animation.ClockController>，然後呼叫<xref:System.Windows.Media.Animation.ClockController.Remove%2A>方法<xref:System.Windows.Media.Animation.ClockController>。 這通常是<xref:System.Windows.Media.Animation.Clock.Completed>時鐘的事件處理常式。 請注意，只有根時鐘可以控制<xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>的子系時鐘的屬性會傳回`null`。 也請注意，<xref:System.Windows.Media.Animation.Clock.Completed>是否有效的持續時間的時鐘永遠不會呼叫事件。  在此情況下，使用者必須決定何時要呼叫<xref:System.Windows.Media.Animation.ClockController.Remove%2A>。  
  
 這主要是在存留期較長的物件才會發生的動畫問題。  回收物件時，其時鐘也會中斷連接，並進行記憶體回收。  
  
 如需時鐘物件的詳細資訊，請參閱[動畫和計時系統概觀](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)。  
  
   
  
## Examples  
 下列範例示範如何建立可控制的分鏡腳本。  
  
 [!code-csharp[animation_ovws_procedural_snip#ControllableStoryboardExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/animation_ovws_procedural_snip/CSharp/ControllableStoryboardExample.cs#controllablestoryboardexamplewholepage)]
 [!code-vb[animation_ovws_procedural_snip#ControllableStoryboardExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animation_ovws_procedural_snip/visualbasic/controllablestoryboardexample.vb#controllablestoryboardexamplewholepage)]  
  
 下一個範例會使用<xref:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace><xref:System.Windows.Media.Animation.HandoffBehavior>來以動畫顯示，當使用者 left-clicks，而<xref:System.Windows.Media.Animation.HandoffBehavior.Compose><xref:System.Windows.Media.Animation.HandoffBehavior>當使用者按一下滑鼠右鍵。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkElementStoryboardHandoffBehaviorExample.cs#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#GraphicsMMFrameworkElementStoryboardHandoffBehaviorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkelementstoryboardhandoffbehaviorexample.vb#graphicsmmframeworkelementstoryboardhandoffbehaviorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin (System.Windows.FrameworkElement containingObject, System.Windows.FrameworkTemplate frameworkTemplate, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin(class System.Windows.FrameworkElement containingObject, class System.Windows.FrameworkTemplate frameworkTemplate, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Windows.FrameworkTemplate,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin(System::Windows::FrameworkElement ^ containingObject, System::Windows::FrameworkTemplate ^ frameworkTemplate, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.Begin : System.Windows.FrameworkElement * System.Windows.FrameworkTemplate * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="storyboard.Begin (containingObject, frameworkTemplate, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="frameworkTemplate" Type="System.Windows.FrameworkTemplate" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="containingObject">已套用所指定 <c>frameworkTemplate</c> 的物件。 不具有 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的動畫才會套用至 <c>containingObject</c>。</param>
        <param name="frameworkTemplate">要顯示動畫的範本。</param>
        <param name="handoffBehavior">新動畫的行為應用來與任何目前的動畫進行互動。</param>
        <param name="isControllable">如果腳本應該要以互動方式控制，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
        <summary>將與這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 相關聯的動畫套用至指定範本內的目標並加以初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要以互動方式控制這個分鏡腳本，您必須指定相同`containingObject`互動的方法呼叫時，您用來開始分鏡腳本  
  
 呼叫這個方法時，<xref:System.Windows.Media.Animation.Clock>分鏡腳本和它所包含的任何時間軸建立物件。 這些時鐘會與儲存`containingObject`。  
  
 從 分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
## <a name="using-the-compose-handoffbehavior"></a>使用 Compose HandoffBehavior  
 當您套用<xref:System.Windows.Media.Animation.Storyboard>， <xref:System.Windows.Media.Animation.AnimationTimeline>，或<xref:System.Windows.Media.Animation.AnimationClock>屬性，使用<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、 任何<xref:System.Windows.Media.Animation.Clock>先前該屬性相關聯的物件會繼續耗用系統資源，計時系統並不會自動移除這些時鐘。  
  
 若要避免發生效能問題，當您套用大量時鐘使用<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>，完成之後，您應該從動畫屬性移除組成的時鐘。 有幾個方式可移除時鐘。  
  
-   若要從屬性移除所有時鐘，請使用<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>或<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>動畫物件的方法。 指定的第一個參數，要繪製之屬性和`null`作為第二個。 這會從屬性移除所有動畫時鐘。  
  
-   若要移除特定<xref:System.Windows.Media.Animation.AnimationClock>從時鐘清單，使用<xref:System.Windows.Media.Animation.Clock.Controller%2A>屬性<xref:System.Windows.Media.Animation.AnimationClock>擷取<xref:System.Windows.Media.Animation.ClockController>，然後呼叫<xref:System.Windows.Media.Animation.ClockController.Remove%2A>方法<xref:System.Windows.Media.Animation.ClockController>。 這通常是<xref:System.Windows.Media.Animation.Clock.Completed>時鐘的事件處理常式。 請注意，只有根時鐘可以控制<xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>的子系時鐘的屬性會傳回`null`。 也請注意，<xref:System.Windows.Media.Animation.Clock.Completed>是否有效的持續時間的時鐘永遠不會呼叫事件。  在此情況下，使用者必須決定何時要呼叫<xref:System.Windows.Media.Animation.ClockController.Remove%2A>。  
  
 這主要是在存留期較長的物件才會發生的動畫問題。  回收物件時，其時鐘也會中斷連接，並進行記憶體回收。  
  
 如需時鐘物件的詳細資訊，請參閱[動畫和計時系統概觀](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Storyboard Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Animation.Storyboard Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Storyboard" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::Animation::Storyboard ^ Clone();" />
      <MemberSignature Language="F#" Value="override this.Clone : unit -&gt; System.Windows.Media.Animation.Storyboard" Usage="storyboard.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Storyboard</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的可修改複製品，深層複製這個物件的值。 當複製相依性屬性時，這個方法會複製資源參考和資料繫結 (但可能無法再解析)，但不會複製動畫或它們目前的值。</summary>
        <returns>目前物件的可修改複本。 即使來源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 屬性為 <see langword="true." />，複製物件的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 屬性仍為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法用來產生的可修改複本凍結<xref:System.Windows.Freezable>物件 (或任何<xref:System.Windows.Freezable>物件)。 為了方便起見，這個方法會遮蔽的強型別實作繼承的版本。  
  
 如需詳細資訊，請參閱<xref:System.Windows.Freezable.Clone%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="storyboard.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 類別的新執行個體。</summary>
        <returns>新的 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在內部呼叫這個方法<xref:System.Windows.Freezable.CreateInstance%2A>建立的新執行個體時<xref:System.Windows.Media.Animation.Storyboard>類別的各種不同的複製方法 (例如<xref:System.Windows.Freezable.Clone%2A>和<xref:System.Windows.Freezable.CloneCurrentValue%2A>)。  
  
   
  
## Examples  
 下列範例示範的典型實作<xref:System.Windows.Freezable.CreateInstanceCore%2A>。  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>每個<see cref="T:System.Windows.Media.Animation.Storyboard" />子類別必須實作這個方法。 一般實作會直接呼叫類別預設建構函式，並傳回結果。</para>
        </block>
        <altmember cref="M:System.Windows.Freezable.CreateInstanceCore" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCurrentGlobalSpeed">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時鐘的<xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A>速度是在目前行進時間，與實際時間相比較的速率。  
  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCurrentGlobalSpeed">
      <MemberSignature Language="C#" Value="public double GetCurrentGlobalSpeed ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetCurrentGlobalSpeed() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentGlobalSpeed () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetCurrentGlobalSpeed();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentGlobalSpeed : unit -&gt; double" Usage="storyboard.GetCurrentGlobalSpeed " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>目前的整體速度，如果時鐘停止，則為 0。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentGlobalSpeed">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; GetCurrentGlobalSpeed (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;float64&gt; GetCurrentGlobalSpeed(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentGlobalSpeed (containingObject As FrameworkContentElement) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;double&gt; GetCurrentGlobalSpeed(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentGlobalSpeed : System.Windows.FrameworkContentElement -&gt; Nullable&lt;double&gt;" Usage="storyboard.GetCurrentGlobalSpeed containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>目前的整體速度，如果時鐘停止，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時鐘的<xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A>速度是在目前行進時間，與實際時間相比較的速率。  
  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentGlobalSpeed">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; GetCurrentGlobalSpeed (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;float64&gt; GetCurrentGlobalSpeed(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentGlobalSpeed(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentGlobalSpeed (containingObject As FrameworkElement) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;double&gt; GetCurrentGlobalSpeed(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentGlobalSpeed : System.Windows.FrameworkElement -&gt; Nullable&lt;double&gt;" Usage="storyboard.GetCurrentGlobalSpeed containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>目前的整體速度，如果時鐘停止，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時鐘的<xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A>速度是在目前行進時間，與實際時間相比較的速率。  
  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCurrentIteration">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCurrentIteration">
      <MemberSignature Language="C#" Value="public int GetCurrentIteration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetCurrentIteration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentIteration () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetCurrentIteration();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentIteration : unit -&gt; int" Usage="storyboard.GetCurrentIteration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>這個時鐘在其目前使用中週期內的目前反覆運算，如果時鐘已停止，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時鐘的第一個反覆項目有值為 1。  
  
 如果這個分鏡腳本<xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A>設定`true`，完整的反覆項目都包含一個轉寄反向組，不只是其中一個區段。  
  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; GetCurrentIteration (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;int32&gt; GetCurrentIteration(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentIteration(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentIteration (containingObject As FrameworkContentElement) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;int&gt; GetCurrentIteration(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentIteration : System.Windows.FrameworkContentElement -&gt; Nullable&lt;int&gt;" Usage="storyboard.GetCurrentIteration containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>這個時鐘在其目前使用中週期內的目前反覆運算，如果時鐘已停止，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時鐘的第一個反覆項目有值為 1。  
  
 如果這個分鏡腳本<xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A>設定`true`，完整的反覆項目都包含一個轉寄反向組，不只是其中一個區段。  
  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; GetCurrentIteration (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;int32&gt; GetCurrentIteration(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentIteration(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentIteration (containingObject As FrameworkElement) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;int&gt; GetCurrentIteration(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentIteration : System.Windows.FrameworkElement -&gt; Nullable&lt;int&gt;" Usage="storyboard.GetCurrentIteration containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>這個時鐘在其目前使用中週期內的目前反覆運算，如果時鐘已停止，則為 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時鐘的第一個反覆項目有值為 1。  
  
 如果這個時鐘的時間軸<xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A>設定`true`，完整的反覆項目都包含一個轉寄反向組，不只是其中一個區段。  
  
 其目前反覆項目，不論搜尋時鐘會傳回其目前的反覆項目為 1。 重新啟動時鐘也會傳回其目前的反覆項目為 1。  
  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCurrentProgress">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCurrentProgress">
      <MemberSignature Language="C#" Value="public double GetCurrentProgress ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetCurrentProgress() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentProgress" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentProgress () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetCurrentProgress();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentProgress : unit -&gt; double" Usage="storyboard.GetCurrentProgress " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>如果這個時鐘是 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />，則為 <see langword="null" />。如果這個時鐘在使用中且其 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> 的 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> 是 <see cref="P:System.Windows.Duration.Forever" />，則為 0.0，否則為介於 0.0 與 1.0 之間的值，這個值表示這個時鐘在其目前反覆運算內的目前進度。 值 0.0 表示沒有進度，而值 1.0 表示時鐘已到目前反覆運算的結尾。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProgress">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; GetCurrentProgress (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;float64&gt; GetCurrentProgress(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentProgress(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentProgress (containingObject As FrameworkContentElement) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;double&gt; GetCurrentProgress(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentProgress : System.Windows.FrameworkContentElement -&gt; Nullable&lt;double&gt;" Usage="storyboard.GetCurrentProgress containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>如果這個時鐘是 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />，則為 <see langword="null" />。如果這個時鐘在使用中且其 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> 的 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> 是 <see cref="P:System.Windows.Duration.Forever" />，則為 0.0，否則為介於 0.0 與 1.0 之間的值，這個值表示這個時鐘在其目前反覆運算內的目前進度。 值 0.0 表示沒有進度，而值 1.0 表示時鐘已到目前反覆運算的結尾。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProgress">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; GetCurrentProgress (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;float64&gt; GetCurrentProgress(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentProgress(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentProgress (containingObject As FrameworkElement) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;double&gt; GetCurrentProgress(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentProgress : System.Windows.FrameworkElement -&gt; Nullable&lt;double&gt;" Usage="storyboard.GetCurrentProgress containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>如果這個時鐘是 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />，則為 <see langword="null" />。如果這個時鐘在使用中且其 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> 的 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> 是 <see cref="P:System.Windows.Duration.Forever" />，則為 0.0，否則為介於 0.0 與 1.0 之間的值，這個值表示這個時鐘在其目前反覆運算內的目前進度。 值 0.0 表示沒有進度，而值 1.0 表示時鐘已到目前反覆運算的結尾。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCurrentState">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockState GetCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.Animation.ClockState GetCurrentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState () As ClockState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::Animation::ClockState GetCurrentState();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : unit -&gt; System.Windows.Media.Animation.ClockState" Usage="storyboard.GetCurrentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>為這個腳本建立之時鐘的目前狀態：<see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" /> 或 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會告訴您是否暫停分鏡腳本。 若要判斷是否要暫停分鏡腳本，請使用<xref:System.Windows.Media.Animation.Storyboard.GetIsPaused%2A>方法。  
  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockState GetCurrentState (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.Animation.ClockState GetCurrentState(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentState(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState (containingObject As FrameworkContentElement) As ClockState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::Animation::ClockState GetCurrentState(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : System.Windows.FrameworkContentElement -&gt; System.Windows.Media.Animation.ClockState" Usage="storyboard.GetCurrentState containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>為這個腳本建立之時鐘的目前狀態：<see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" /> 或 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會告訴您是否暫停分鏡腳本。 若要判斷是否要暫停分鏡腳本，請使用<xref:System.Windows.Media.Animation.Storyboard.GetIsPaused%2A>方法。  
  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockState GetCurrentState (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.Animation.ClockState GetCurrentState(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentState(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState (containingObject As FrameworkElement) As ClockState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::Animation::ClockState GetCurrentState(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : System.Windows.FrameworkElement -&gt; System.Windows.Media.Animation.ClockState" Usage="storyboard.GetCurrentState containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>為這個腳本建立之時鐘的目前狀態：<see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" /> 或 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法不會告訴您是否暫停分鏡腳本。 若要判斷是否要暫停分鏡腳本，請使用<xref:System.Windows.Media.Animation.Storyboard.GetIsPaused%2A>方法。  
  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCurrentTime">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCurrentTime">
      <MemberSignature Language="C#" Value="public TimeSpan GetCurrentTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetCurrentTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentTime () As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetCurrentTime();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentTime : unit -&gt; TimeSpan" Usage="storyboard.GetCurrentTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>如果腳本時鐘是 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" /> 則為 <see langword="null" />，否則為腳本時鐘的目前時間。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentTime">
      <MemberSignature Language="C#" Value="public Nullable&lt;TimeSpan&gt; GetCurrentTime (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; GetCurrentTime(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentTime (containingObject As FrameworkContentElement) As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;TimeSpan&gt; GetCurrentTime(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentTime : System.Windows.FrameworkContentElement -&gt; Nullable&lt;TimeSpan&gt;" Usage="storyboard.GetCurrentTime containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>如果腳本時鐘是 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" /> 則為 <see langword="null" />，否則為腳本時鐘的目前時間。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentTime">
      <MemberSignature Language="C#" Value="public Nullable&lt;TimeSpan&gt; GetCurrentTime (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; GetCurrentTime(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetCurrentTime(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentTime (containingObject As FrameworkElement) As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;TimeSpan&gt; GetCurrentTime(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetCurrentTime : System.Windows.FrameworkElement -&gt; Nullable&lt;TimeSpan&gt;" Usage="storyboard.GetCurrentTime containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>擷取之前為這個 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> 建立之 <see cref="T:System.Windows.Media.Animation.Clock" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <returns>如果腳本時鐘是 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" /> 則為 <see langword="null" />，否則為腳本時鐘的目前時間。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetIsPaused">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>擷取值，這個值指出為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 是否已暫停。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetIsPaused">
      <MemberSignature Language="C#" Value="public bool GetIsPaused ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetIsPaused() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetIsPaused" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIsPaused () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetIsPaused();" />
      <MemberSignature Language="F#" Value="member this.GetIsPaused : unit -&gt; bool" Usage="storyboard.GetIsPaused " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>擷取值，這個值指出為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 是否已暫停。</summary>
        <returns>如果暫停之前為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="GetIsPaused">
      <MemberSignature Language="C#" Value="public bool GetIsPaused (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetIsPaused(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetIsPaused(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIsPaused (containingObject As FrameworkContentElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetIsPaused(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetIsPaused : System.Windows.FrameworkContentElement -&gt; bool" Usage="storyboard.GetIsPaused containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>擷取值，這個值指出為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 是否已暫停。</summary>
        <returns>如果暫停之前為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="GetIsPaused">
      <MemberSignature Language="C#" Value="public bool GetIsPaused (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetIsPaused(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetIsPaused(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIsPaused (containingObject As FrameworkElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetIsPaused(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.GetIsPaused : System.Windows.FrameworkElement -&gt; bool" Usage="storyboard.GetIsPaused containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>擷取值，這個值指出為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 是否已暫停。</summary>
        <returns>如果暫停之前為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要使用此方法來擷取分鏡腳本時鐘的相關資訊，必須可控制分鏡腳本。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="GetTarget">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetTarget (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetTarget(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetTarget(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTarget (element As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetTarget(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetTarget : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.Media.Animation.Storyboard.GetTarget element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">要從其中擷取 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的時刻表。</param>
        <summary>擷取所指定 <see cref="P:System.Windows.Media.Animation.Storyboard.Target" /> 的 <see cref="T:System.Windows.Media.Animation.Timeline" /> 值。</summary>
        <returns>由 <paramref name="element" /> 設為目標的相依性物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Media.Animation.Storyboard.Target%2A>附加使用動畫時間軸，以指出其目標物件的屬性。 如需有關分鏡腳本目標的運作方式的詳細資訊，請參閱<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>。 如需有關如何附加的屬性工作的詳細資訊，請參閱 <<c0> [ 附加屬性概觀](~/docs/framework/wpf/advanced/attached-properties-overview.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="GetTargetName">
      <MemberSignature Language="C#" Value="public static string GetTargetName (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTargetName(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetTargetName(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTargetName (element As DependencyObject) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetTargetName(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetTargetName : System.Windows.DependencyObject -&gt; string" Usage="System.Windows.Media.Animation.Storyboard.GetTargetName element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">要從其中擷取 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的時刻表。</param>
        <summary>擷取所指定 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 的 <see cref="T:System.Windows.Media.Animation.Timeline" /> 值。</summary>
        <returns>
          <paramref name="element" /> 設為目標的相依性物件的名稱。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會取得<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>附加指定的物件上的屬性。 如需有關分鏡腳本目標的運作方式的詳細資訊，請參閱<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>。 如需有關如何附加的屬性工作的詳細資訊，請參閱 <<c0> [ 附加屬性概觀](~/docs/framework/wpf/advanced/attached-properties-overview.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="GetTargetProperty">
      <MemberSignature Language="C#" Value="public static System.Windows.PropertyPath GetTargetProperty (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.PropertyPath GetTargetProperty(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.GetTargetProperty(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTargetProperty (element As DependencyObject) As PropertyPath" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::PropertyPath ^ GetTargetProperty(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetTargetProperty : System.Windows.DependencyObject -&gt; System.Windows.PropertyPath" Usage="System.Windows.Media.Animation.Storyboard.GetTargetProperty element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">要從中取得 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> 的相依性物件。</param>
        <summary>擷取所指定 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> 的 <see cref="T:System.Windows.Media.Animation.Timeline" /> 值。</summary>
        <returns>
          <paramref name="element" /> 設為目標的屬性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會取得<xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A>附加指定的物件上的屬性。 如需有關分鏡腳本目標的運作方式的詳細資訊，請參閱<xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A>附加屬性。 如需有關如何附加的屬性工作的詳細資訊，請參閱 <<c0> [ 附加屬性概觀](~/docs/framework/wpf/advanced/attached-properties-overview.md)。  
  
 請注意，如果<xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A>已設定在標記中，此方法會傳回空<xref:System.Windows.PropertyPath>因為屬性參考已解決，而儲存在內部進行剖析時。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Pause">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>暫停為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="storyboard.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>暫停為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會暫停分鏡腳本，但有任何顯著的影響，如果它不是作用中或目前已暫停。 副作用，也會暫停所有相關聯的子系。  
  
 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
## <a name="beginning-a-paused-storyboard"></a>從 已暫停的分鏡腳本  
 當您<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>已暫停分鏡腳本，它看起來像是繼續並重新啟動。 不過，這是不實際發生什麼事。 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法實際上會取代已暫停<xref:System.Windows.Media.Animation.Storyboard>以新的未暫停版本。 每次<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>呼叫方法，當建立分鏡腳本的時鐘物件。 這些時鐘會分散到它們要建立動畫的屬性。 因此，當<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法會呼叫同樣地，它不會重新啟動其時鐘; 會取代新時鐘。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause (containingObject As FrameworkContentElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Pause : System.Windows.FrameworkContentElement -&gt; unit" Usage="storyboard.Pause containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>暫停與這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 關聯之指定的 <see cref="T:System.Windows.FrameworkContentElement" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會暫停分鏡腳本，但有任何顯著的影響，如果它不是作用中或目前已暫停。 副作用，也會暫停所有相關聯的子系。  
  
 搜尋已暫停的分鏡腳本才會繼續它。 若要繼續暫停的分鏡腳本的唯一方法是使用<xref:System.Windows.Media.Animation.Storyboard.Resume%2A>方法。 呼叫<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法一次會暫停的分鏡腳本取代為新的連線，已繼續它的外觀。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 從範例中，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 暫停分鏡腳本時鐘觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
## <a name="beginning-a-paused-storyboard"></a>從 已暫停的分鏡腳本  
 當您<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>已暫停分鏡腳本，它看起來像是繼續並重新啟動。 不過，這是不實際發生什麼事。 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法實際上會取代本身未暫停的版本。 每次<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>呼叫方法，當建立分鏡腳本的時鐘物件。 這些時鐘會分散到它們要建立動畫的屬性。 因此，當<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法會呼叫同樣地，它不會重新啟動其時鐘; 會取代新時鐘。  
  
   
  
## Examples  
 下列範例會使用可控制的分鏡腳本以動畫顯示<xref:System.Windows.Media.TextEffect>。 <xref:System.Windows.Media.TextEffect>內含<xref:System.Windows.FrameworkContentElement>的名稱範圍。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkContentElement)" />
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause (containingObject As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Pause : System.Windows.FrameworkElement -&gt; unit" Usage="storyboard.Pause containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>暫停與這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 關聯之指定的 <see cref="T:System.Windows.FrameworkElement" /> 的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會暫停分鏡腳本，但有任何顯著的影響，如果它不是作用中或目前已暫停。 副作用，也會暫停所有相關聯的子系。  
  
 搜尋已暫停的分鏡腳本才會繼續它。 若要繼續暫停的分鏡腳本的唯一方法是使用<xref:System.Windows.Media.Animation.Storyboard.Resume%2A>方法。 呼叫<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法一次會暫停的分鏡腳本取代為新的連線，已繼續它的外觀。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 暫停分鏡腳本時鐘觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
## <a name="beginning-a-paused-storyboard"></a>從 已暫停的分鏡腳本  
 當您<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>已暫停分鏡腳本，它看起來像是繼續並重新啟動。 不過，這是不實際發生什麼事。 <xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法實際上會取代本身未暫停的版本。 每次<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>呼叫方法，當建立分鏡腳本的時鐘物件。 這些時鐘會分散到它們要建立動畫的屬性。 因此，當<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法會呼叫同樣地，它不會重新啟動其時鐘; 會取代新時鐘。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>移除為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。 屬於這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的動畫一旦播放，就無法再對屬性產生作用，無論其 <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> 的設定為何。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Remove" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove();" />
      <MemberSignature Language="F#" Value="member this.Remove : unit -&gt; unit" Usage="storyboard.Remove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>移除為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。 屬於這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的動畫一旦播放，就無法再對屬性產生作用，無論其 <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> 的設定為何。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 所執行的所有互動式動作<xref:System.Windows.Media.Animation.Clock>，因此也在<xref:System.Windows.Media.Animation.Storyboard>，計時引擎下, 一次轉譯前短暫發生這種情況下一個刻度上發生。 這表示<xref:System.Windows.Media.Animation.Storyboard.Remove%2A>方法仍會影響的動畫的屬性到這個階段。 換句話說下, 一次顯示的畫面格時，將分鏡腳本會移除。 如果您要取消關聯從屬性的動畫，此時間之前，請使用<xref:System.Windows.UIElement.BeginAnimation%2A>方法`animation`參數值的`null`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Remove(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (containingObject As FrameworkContentElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.FrameworkContentElement -&gt; unit" Usage="storyboard.Remove containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>移除為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。 屬於這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的動畫一旦播放，就無法再對屬性產生作用，無論其 <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> 的設定為何。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 移除分鏡腳本時鐘觸發<xref:System.Windows.Media.Animation.Timeline.RemoveRequested>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Remove(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (containingObject As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.FrameworkElement -&gt; unit" Usage="storyboard.Remove containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>移除為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。 屬於這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的動畫一旦播放，就無法再對屬性產生作用，無論其 <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> 的設定為何。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 移除分鏡腳本時鐘觸發<xref:System.Windows.Media.Animation.Timeline.RemoveRequested>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Resume">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>繼續為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="storyboard.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>繼續為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume (containingObject As FrameworkContentElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Resume : System.Windows.FrameworkContentElement -&gt; unit" Usage="storyboard.Resume containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>繼續為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼續未暫停分鏡腳本，沒有任何作用。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 搜尋已暫停的分鏡腳本才會繼續它。 若要繼續暫停的分鏡腳本的唯一方法是使用<xref:System.Windows.Media.Animation.Storyboard.Resume%2A>方法。 呼叫<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>分鏡腳本開始後的方法會取代舊的分鏡腳本可繼續它的外觀。  
  
 繼續已暫停的分鏡腳本時鐘就會觸發<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
   
  
## Examples  
 下列範例會使用可控制的分鏡腳本以動畫顯示<xref:System.Windows.Media.TextEffect>。 <xref:System.Windows.Media.TextEffect>內含<xref:System.Windows.FrameworkContentElement>的名稱範圍。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkContentElement)" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Resume(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume (containingObject As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Resume : System.Windows.FrameworkElement -&gt; unit" Usage="storyboard.Resume containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>繼續為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼續未暫停分鏡腳本，沒有任何作用。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 搜尋已暫停的分鏡腳本才會繼續它。 若要繼續暫停的分鏡腳本的唯一方法是使用<xref:System.Windows.Media.Animation.Storyboard.Resume%2A>方法。 呼叫<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>分鏡腳本開始後的方法會取代舊的分鏡腳本可繼續它的外觀。  
  
 繼續已暫停的分鏡腳本時鐘就會觸發<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.Pause(System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在到達下個時鐘刻度時，搜尋這個 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 直到新位置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.Seek : TimeSpan -&gt; unit" Usage="storyboard.Seek offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">正值或負值，這個值描述時刻表應該向前移動或向後移動的量。</param>
        <summary>搜尋這個 <see cref="T:System.Windows.Media.Animation.Storyboard" />，直到指定的位置。 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 會在到達下個時鐘刻度時執行要求的搜尋。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 請注意，搜尋作業不會將分鏡腳本<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>或<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>設定納入考量。 分鏡腳本會被當成其<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>為 1 且沒有<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.Seek : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="storyboard.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">描述時間表應該從指定的 <c>origin</c> 前進或後退的數量正數或負數值。</param>
        <param name="origin">套用了 <c>offset</c> 的位置。</param>
        <summary>搜尋這個 <see cref="T:System.Windows.Media.Animation.Storyboard" />，直到指定的位置。 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 會在到達下個時鐘刻度時執行要求的搜尋。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 請注意，搜尋作業不會將分鏡腳本<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>或<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>設定納入考量。 分鏡腳本會被當成其<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>為 1 且沒有<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (System.Windows.FrameworkContentElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(class System.Windows.FrameworkContentElement containingObject, valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Seek(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (containingObject As FrameworkContentElement, offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(System::Windows::FrameworkContentElement ^ containingObject, TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.Seek : System.Windows.FrameworkContentElement * TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="storyboard.Seek (containingObject, offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <param name="offset">描述時間表應該從指定的 <c>origin</c> 前進或後退的數量正數或負數值。</param>
        <param name="origin">套用了 <c>offset</c> 的位置。</param>
        <summary>搜尋這個 <see cref="T:System.Windows.Media.Animation.Storyboard" />，直到指定的位置。 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 會在到達下個時鐘刻度時執行要求的搜尋。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 請注意，搜尋作業不會將分鏡腳本<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>或<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>設定納入考量。 分鏡腳本會被當成其<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>為 1 且沒有<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>。  
  
 這個方法會變更分鏡腳本時鐘<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>至<xref:System.Windows.Media.Animation.ClockState.Active>。 這個方法會有不會影響計時樹狀結構處理刻度的下一次。 副作用，引發適當的事件會也不在那之前。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 搜尋分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>事件。  
  
   
  
## Examples  
 下列範例會顯示<xref:System.Windows.Media.Animation.Storyboard.Seek%2A>和<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>方法。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementSeekExample.cs#frameworkcontentelementseekexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementseekexample.vb#frameworkcontentelementseekexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (System.Windows.FrameworkElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(class System.Windows.FrameworkElement containingObject, valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Seek(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (containingObject As FrameworkElement, offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(System::Windows::FrameworkElement ^ containingObject, TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.Seek : System.Windows.FrameworkElement * TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="storyboard.Seek (containingObject, offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <param name="offset">描述時間表應該從指定的 <c>origin</c> 前進或後退的數量正數或負數值。</param>
        <param name="origin">套用了 <c>offset</c> 的位置。</param>
        <summary>搜尋這個 <see cref="T:System.Windows.Media.Animation.Storyboard" />，直到指定的位置。 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 會在到達下個時鐘刻度時執行要求的搜尋。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 請注意，搜尋作業不會將分鏡腳本<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>或<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>設定納入考量。 分鏡腳本會被當成其<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>為 1 且沒有<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>。  
  
 這個方法會變更分鏡腳本時鐘<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>至<xref:System.Windows.Media.Animation.ClockState.Active>。 這個方法會有不會影響計時樹狀結構處理刻度的下一次。 副作用，引發適當的事件會也不在那之前。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止，而且如果它由控制移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 搜尋分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>事件。  
  
   
  
## Examples  
 下列範例示範如何搜尋分鏡腳本開始後的一秒 （略過）。  
  
 [!code-csharp[timingbehaviors_procedural_snip#SeekStoryboardExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/SeekStoryboardExample.cs#seekstoryboardexamplewholepage)]
 [!code-vb[timingbehaviors_procedural_snip#SeekStoryboardExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/seekstoryboardexample.vb#seekstoryboardexamplewholepage)]  
  
 下一個範例會顯示<xref:System.Windows.Media.Animation.Storyboard.Seek%2A>和<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>方法。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/SeekExample.cs#seekexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/seekexample.vb#seekexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SeekAlignedToLastTick">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>立即 (同步) 搜尋新位置的這個 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(valuetype System.TimeSpan offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SeekAlignedToLastTick (offset As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SeekAlignedToLastTick(TimeSpan offset);" />
      <MemberSignature Language="F#" Value="member this.SeekAlignedToLastTick : TimeSpan -&gt; unit" Usage="storyboard.SeekAlignedToLastTick offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">正值或負值，這個值描述時刻表應該向前移動或向後移動的量。</param>
        <summary>立即 (同步) 搜尋新位置的這個 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> 對齊的 seeked 時間<xref:System.Windows.Media.Animation.Storyboard>與最後一個的時鐘刻度。 值會立即更新以反映所做的變更原因<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>，即使螢幕不會反映這些變更，直到畫面更新。  
  
 請注意，搜尋作業不會將分鏡腳本<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>或<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>設定納入考量。 分鏡腳本會被當成其<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>為 1 且沒有<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>。  
  
 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SeekAlignedToLastTick (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SeekAlignedToLastTick(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.SeekAlignedToLastTick : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="storyboard.SeekAlignedToLastTick (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">描述時間表應該從指定的 <c>origin</c> 前進或後退的數量正數或負數值。</param>
        <param name="origin">套用了 <c>offset</c> 的位置。</param>
        <summary>立即 (同步) 搜尋新位置的這個 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> 對齊的 seeked 時間<xref:System.Windows.Media.Animation.Storyboard>與最後一個的時鐘刻度。 值會立即更新以反映所做的變更原因<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>，即使螢幕不會反映這些變更，直到畫面更新。  
  
 請注意，搜尋作業不會將分鏡腳本<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>或<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>設定納入考量。 分鏡腳本會被當成其<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>為 1 且沒有<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>。  
  
 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (System.Windows.FrameworkContentElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(class System.Windows.FrameworkContentElement containingObject, valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkContentElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SeekAlignedToLastTick (containingObject As FrameworkContentElement, offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SeekAlignedToLastTick(System::Windows::FrameworkContentElement ^ containingObject, TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.SeekAlignedToLastTick : System.Windows.FrameworkContentElement * TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="storyboard.SeekAlignedToLastTick (containingObject, offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <param name="offset">描述時間表應該從指定的 <c>origin</c> 前進或後退的數量正數或負數值。</param>
        <param name="origin">套用了 <c>offset</c> 的位置。</param>
        <summary>立即 (同步) 搜尋新位置的這個 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> 對齊的 seeked 時間<xref:System.Windows.Media.Animation.Storyboard>與最後一個的時鐘刻度。 值會立即更新以反映所做的變更原因<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>，即使螢幕不會反映這些變更，直到畫面更新。  
  
 請注意，搜尋作業不會將分鏡腳本<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>或<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>設定納入考量。 分鏡腳本會被當成其<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>為 1 且沒有<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>。  
  
 這個方法會變更分鏡腳本時鐘的<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>至  
  
 <xref:System.Windows.Media.Animation.ClockState.Active>。  
  
 搜尋分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>事件。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
   
  
## Examples  
 下列範例會顯示<xref:System.Windows.Media.Animation.Storyboard.Seek%2A>和<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>方法。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementSeekExample.cs#frameworkcontentelementseekexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementSeekExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementseekexample.vb#frameworkcontentelementseekexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (System.Windows.FrameworkElement containingObject, TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(class System.Windows.FrameworkElement containingObject, valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick(System.Windows.FrameworkElement,System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SeekAlignedToLastTick (containingObject As FrameworkElement, offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SeekAlignedToLastTick(System::Windows::FrameworkElement ^ containingObject, TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.SeekAlignedToLastTick : System.Windows.FrameworkElement * TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="storyboard.SeekAlignedToLastTick (containingObject, offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <param name="offset">描述時間表應該從指定的 <c>origin</c> 前進或後退的數量正數或負數值。</param>
        <param name="origin">套用了 <c>offset</c> 的位置。</param>
        <summary>立即 (同步) 搜尋新位置的這個 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A> 對齊的 seeked 時間<xref:System.Windows.Media.Animation.Storyboard>與最後一個的時鐘刻度。 值會立即更新以反映所做的變更原因<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>，即使螢幕不會反映這些變更，直到畫面更新。  
  
 請注意，搜尋作業不會將分鏡腳本<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>或<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>設定納入考量。 分鏡腳本會被當成其<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>為 1 且沒有<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>。  
  
 這個方法會變更分鏡腳本時鐘的<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>至  
  
 <xref:System.Windows.Media.Animation.ClockState.Active>。  
  
 搜尋分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>事件。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
   
  
## Examples  
 下列範例會顯示<xref:System.Windows.Media.Animation.Storyboard.Seek%2A>和<xref:System.Windows.Media.Animation.Storyboard.SeekAlignedToLastTick%2A>方法。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/SeekExample.cs#seekexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#SeekExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/seekexample.vb#seekexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetSpeedRatio">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>設定之前為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 建立之 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的互動速率。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetSpeedRatio">
      <MemberSignature Language="C#" Value="public void SetSpeedRatio (double speedRatio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSpeedRatio(float64 speedRatio) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSpeedRatio (speedRatio As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSpeedRatio(double speedRatio);" />
      <MemberSignature Language="F#" Value="member this.SetSpeedRatio : double -&gt; unit" Usage="storyboard.SetSpeedRatio speedRatio" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speedRatio" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="speedRatio">大於零的有限值，其為腳本的新互動速度比例。 這個值會乘上腳本的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 值，用以判斷腳本的有效速度。 這個值並不會覆寫腳本的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 屬性。 例如，呼叫這個方法並在 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 為 0.5 的腳本上指定互動速率 3，可提供腳本有效速度 1.5。</param>
        <summary>設定之前為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 建立之 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的互動速率。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpeedRatio">
      <MemberSignature Language="C#" Value="public void SetSpeedRatio (System.Windows.FrameworkContentElement containingObject, double speedRatio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSpeedRatio(class System.Windows.FrameworkContentElement containingObject, float64 speedRatio) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Windows.FrameworkContentElement,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSpeedRatio (containingObject As FrameworkContentElement, speedRatio As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSpeedRatio(System::Windows::FrameworkContentElement ^ containingObject, double speedRatio);" />
      <MemberSignature Language="F#" Value="member this.SetSpeedRatio : System.Windows.FrameworkContentElement * double -&gt; unit" Usage="storyboard.SetSpeedRatio (containingObject, speedRatio)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
        <Parameter Name="speedRatio" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <param name="speedRatio">大於零的有限值，其為腳本的新互動速度比例。 這個值會乘上腳本的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 值，用以判斷腳本的有效速度。 這個值並不會覆寫腳本的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 屬性。 例如，呼叫這個方法並在 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 為 0.5 的腳本上指定互動速率 3，可提供腳本有效速度 1.5。</param>
        <summary>設定之前為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 建立之 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的互動速率。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 呼叫這個方法會觸發<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
   
  
## Examples  
 下列範例會使用可控制的分鏡腳本以動畫顯示<xref:System.Windows.Media.TextEffect>。 <xref:System.Windows.Media.TextEffect>內含<xref:System.Windows.FrameworkContentElement>的名稱範圍。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpeedRatio">
      <MemberSignature Language="C#" Value="public void SetSpeedRatio (System.Windows.FrameworkElement containingObject, double speedRatio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSpeedRatio(class System.Windows.FrameworkElement containingObject, float64 speedRatio) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetSpeedRatio(System.Windows.FrameworkElement,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSpeedRatio (containingObject As FrameworkElement, speedRatio As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSpeedRatio(System::Windows::FrameworkElement ^ containingObject, double speedRatio);" />
      <MemberSignature Language="F#" Value="member this.SetSpeedRatio : System.Windows.FrameworkElement * double -&gt; unit" Usage="storyboard.SetSpeedRatio (containingObject, speedRatio)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
        <Parameter Name="speedRatio" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <param name="speedRatio">大於零的有限值，其為腳本的新互動速度比例。 這個值會乘上腳本的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 值，用以判斷腳本的有效速度。 這個值並不會覆寫腳本的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 屬性。 例如，呼叫這個方法並在 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 為 0.5 的腳本上指定互動速率 3，可提供腳本有效速度 1.5。</param>
        <summary>設定之前為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 建立之 <see cref="T:System.Windows.Media.Animation.Storyboard" /> 的互動速率。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 呼叫這個方法會觸發<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTarget">
      <MemberSignature Language="C#" Value="public static void SetTarget (System.Windows.DependencyObject element, System.Windows.DependencyObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTarget(class System.Windows.DependencyObject element, class System.Windows.DependencyObject value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetTarget(System.Windows.DependencyObject,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetTarget (element As DependencyObject, value As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetTarget(System::Windows::DependencyObject ^ element, System::Windows::DependencyObject ^ value);" />
      <MemberSignature Language="F#" Value="static member SetTarget : System.Windows.DependencyObject * System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.Media.Animation.Storyboard.SetTarget (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element">
          <see cref="T:System.Windows.Media.Animation.Timeline" />，應該將所指定的相依性物件設為目標。</param>
        <param name="value">要設為目標的相依性物件。</param>
        <summary>將指定的 <see cref="T:System.Windows.Media.Animation.Timeline" /> 目標設為相依性物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會設定<xref:System.Windows.Media.Animation.Storyboard.Target%2A>附加指定的物件上的屬性。 如需有關分鏡腳本目標的運作方式的詳細資訊，請參閱<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>。 如需有關如何附加的屬性工作的詳細資訊，請參閱 <<c0> [ 附加屬性概觀](~/docs/framework/wpf/advanced/attached-properties-overview.md)。  
  
> [!NOTE]
>  <xref:System.Windows.Media.Animation.Storyboard.Target%2A>屬性不是可序列化，因為它可以設定任何<xref:System.Windows.DependencyObject>。 不保證此物件可以正確地參考從 XAML。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="SetTargetName">
      <MemberSignature Language="C#" Value="public static void SetTargetName (System.Windows.DependencyObject element, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTargetName(class System.Windows.DependencyObject element, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetTargetName(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetTargetName (element As DependencyObject, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetTargetName(System::Windows::DependencyObject ^ element, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member SetTargetName : System.Windows.DependencyObject * string -&gt; unit" Usage="System.Windows.Media.Animation.Storyboard.SetTargetName (element, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="element">
          <see cref="T:System.Windows.Media.Animation.Timeline" />，應該將所指定的相依性物件設為目標。</param>
        <param name="name">要設為目標之相依性物件的名稱。</param>
        <summary>將指定的 <see cref="T:System.Windows.Media.Animation.Timeline" /> 目標設為具有所指定名稱的相依性物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會設定<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>附加指定的物件上的屬性。 如需有關分鏡腳本目標的運作方式的詳細資訊，請參閱<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>。 如需有關如何附加的屬性工作的詳細資訊，請參閱 <<c0> [ 附加屬性概觀](~/docs/framework/wpf/advanced/attached-properties-overview.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="SetTargetProperty">
      <MemberSignature Language="C#" Value="public static void SetTargetProperty (System.Windows.DependencyObject element, System.Windows.PropertyPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetTargetProperty(class System.Windows.DependencyObject element, class System.Windows.PropertyPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SetTargetProperty(System.Windows.DependencyObject,System.Windows.PropertyPath)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetTargetProperty (element As DependencyObject, path As PropertyPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetTargetProperty(System::Windows::DependencyObject ^ element, System::Windows::PropertyPath ^ path);" />
      <MemberSignature Language="F#" Value="static member SetTargetProperty : System.Windows.DependencyObject * System.Windows.PropertyPath -&gt; unit" Usage="System.Windows.Media.Animation.Storyboard.SetTargetProperty (element, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="path" Type="System.Windows.PropertyPath" />
      </Parameters>
      <Docs>
        <param name="element">用來與指定的相依性屬性產生關聯的 <see cref="T:System.Windows.Media.Animation.Timeline" />。</param>
        <param name="path">路徑，描述要繪製的相依性屬性。</param>
        <summary>將指定的 <see cref="T:System.Windows.Media.Animation.Timeline" /> 目標設為所指定的相依性屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會設定<xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A>附加指定的物件上的屬性。 如需有關分鏡腳本目標的運作方式的詳細資訊，請參閱<xref:System.Windows.Media.Animation.Storyboard.TargetProperty%2A>。 如需有關如何附加的屬性工作的詳細資訊，請參閱 <<c0> [ 附加屬性概觀](~/docs/framework/wpf/advanced/attached-properties-overview.md)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SkipToFill">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將這個腳本 <see cref="T:System.Windows.Media.Animation.Clock" /> 的目前時間前移到其使用中週期結尾。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SkipToFill" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToFill ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToFill();" />
      <MemberSignature Language="F#" Value="member this.SkipToFill : unit -&gt; unit" Usage="storyboard.SkipToFill " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將這個腳本 <see cref="T:System.Windows.Media.Animation.Clock" /> 的目前時間前移到其使用中週期結尾。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SkipToFill(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToFill (containingObject As FrameworkContentElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToFill(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.SkipToFill : System.Windows.FrameworkContentElement -&gt; unit" Usage="storyboard.SkipToFill containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>將這個腳本 <see cref="T:System.Windows.Media.Animation.Clock" /> 的目前時間前移到其使用中週期結尾。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將前移分鏡腳本的結尾作用期; 目前的時間分鏡腳本的行為現在由其<xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A>設定。 如果<xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A>設定為<xref:System.Windows.Media.Animation.FillBehavior.HoldEnd>，將分鏡腳本填滿; 屬性設定為如果<xref:System.Windows.Media.Animation.FillBehavior.Stop>，分鏡腳本停止。  
  
 無限期使用分鏡腳本上呼叫這個方法，不限數目的重複項目沒有任何作用。 非使用中的分鏡腳本上呼叫這個方法沒有任何作用。  
  
 前進到其填滿週期觸發程序的時鐘<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>事件。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
   
  
## Examples  
 下列範例會使用可控制的分鏡腳本以動畫顯示<xref:System.Windows.Media.TextEffect>。 <xref:System.Windows.Media.TextEffect>內含<xref:System.Windows.FrameworkContentElement>的名稱範圍。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.SkipToFill(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToFill (containingObject As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToFill(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.SkipToFill : System.Windows.FrameworkElement -&gt; unit" Usage="storyboard.SkipToFill containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>將這個腳本 <see cref="T:System.Windows.Media.Animation.Clock" /> 的目前時間前移到其使用中週期結尾。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將前移分鏡腳本的結尾作用期; 目前的時間分鏡腳本的行為現在由其<xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A>設定。 如果<xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A>設定為<xref:System.Windows.Media.Animation.FillBehavior.HoldEnd>，將分鏡腳本填滿; 屬性設定為如果<xref:System.Windows.Media.Animation.FillBehavior.Stop>，分鏡腳本停止。  
  
 無限期使用分鏡腳本上呼叫這個方法，不限數目的重複項目沒有任何作用。 非使用中的分鏡腳本上呼叫這個方法沒有任何作用。  
  
 前進到其填滿週期觸發程序的時鐘<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>事件。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Stop">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>停止為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="storyboard.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>停止為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 請注意，停止分鏡腳本不會引發<xref:System.Windows.Media.Animation.Timeline.Completed>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop (System.Windows.FrameworkContentElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop(class System.Windows.FrameworkContentElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Stop(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop (containingObject As FrameworkContentElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop(System::Windows::FrameworkContentElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Stop : System.Windows.FrameworkContentElement -&gt; unit" Usage="storyboard.Stop containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkContentElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>停止為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Media.Animation.ClockState.Stopped>分鏡腳本不會再影響其目標屬性： 已顯示動畫的屬性會還原成其先前的值。  
  
 停止時鐘的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>並<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>事件，而非<xref:System.Windows.Media.Animation.Timeline.Completed>事件。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
   
  
## Examples  
 下列範例會使用可控制的分鏡腳本以動畫顯示<xref:System.Windows.Media.TextEffect>。 <xref:System.Windows.Media.TextEffect>內含<xref:System.Windows.FrameworkContentElement>的名稱範圍。  
  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/FrameworkContentElementControlStoryboardExample.cs#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#FrameworkContentElementControlStoryboardExampleUsingWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/frameworkcontentelementcontrolstoryboardexample.vb#frameworkcontentelementcontrolstoryboardexampleusingwholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop (System.Windows.FrameworkElement containingObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop(class System.Windows.FrameworkElement containingObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Storyboard.Stop(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop (containingObject As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop(System::Windows::FrameworkElement ^ containingObject);" />
      <MemberSignature Language="F#" Value="member this.Stop : System.Windows.FrameworkElement -&gt; unit" Usage="storyboard.Stop containingObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containingObject" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="containingObject">呼叫 <see cref="M:System.Windows.Media.Animation.Storyboard.Begin(System.Windows.FrameworkElement,System.Boolean)" /> 方法時指定的物件。 這個物件包含針對這個腳本及其子系所建立的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件。</param>
        <summary>停止為這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 所建立的 <see cref="T:System.Windows.Media.Animation.Storyboard" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Media.Animation.ClockState.Stopped>分鏡腳本不會再影響其目標屬性： 已顯示動畫的屬性會還原成其先前的值。  
  
 停止時鐘的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>並<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>事件，而非<xref:System.Windows.Media.Animation.Timeline.Completed>事件。  
  
 若要以互動方式控制這個分鏡腳本，您必須使用相同`containingObject`時呼叫您用來開始分鏡腳本的互動方法的參數。 可控制的分鏡腳本可以暫停、 繼續、 搜尋、 停止和移除。 若要讓分鏡腳本控制在程式碼中，您必須使用分鏡腳本的適當多載<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法並指定`true`進行控制。 如需範例，請參閱[如何： 控制分鏡腳本開始後](~/docs/framework/wpf/graphics-multimedia/how-to-control-a-storyboard-after-it-starts.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="see GetTarget, and SetTarget" />
      <MemberSignature Language="ILAsm" Value="see GetTarget, and SetTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Storyboard.Target" />
      <MemberSignature Language="VB.NET" Value="see GetTarget, and SetTarget" />
      <MemberSignature Language="F#" Value="see GetTarget, and SetTarget" Usage="see GetTarget, and SetTarget" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得或設定應該顯示動畫的物件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目標物件必須是相依性物件。  
  
> [!NOTE]
>  <xref:System.Windows.Media.Animation.Storyboard.Target%2A>屬性不是可序列化，因為它可以設定任何<xref:System.Windows.DependencyObject>。 沒有任何保證，可以在 XAML 中正確地參考此物件。  
  
<a name="dependencyPropertyInfo_Target"></a>   
## <a name="dependency-property-information"></a>相依性屬性資訊  
  
|||  
|-|-|  
|識別項欄位|<xref:System.Windows.Media.Animation.Storyboard.TargetProperty>|  
|若要設定的中繼資料屬性 `true`|無|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetName">
      <MemberSignature Language="C#" Value="see GetTargetName, and SetTargetName" />
      <MemberSignature Language="ILAsm" Value="see GetTargetName, and SetTargetName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      <MemberSignature Language="VB.NET" Value="see GetTargetName, and SetTargetName" />
      <MemberSignature Language="F#" Value="see GetTargetName, and SetTargetName" Usage="see GetTargetName, and SetTargetName" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得或設定要繪製動畫之物件的名稱。 物件必須是 <see cref="T:System.Windows.FrameworkElement" />、<see cref="T:System.Windows.FrameworkContentElement" /> 或 <see cref="T:System.Windows.Freezable" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定這個屬性是選擇性的。 如果<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>未指定，分鏡腳本動畫套用至下列其中之一：  
  
-   如果您使用啟動分鏡腳本動畫所屬<xref:System.Windows.Media.Animation.BeginStoryboard>，擁有的項目<xref:System.Windows.Media.Animation.BeginStoryboard>觸發分鏡腳本的動作為目標。  
  
-   如果您使用啟動分鏡腳本<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法中，<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>指定與啟動分鏡腳本時<xref:System.Windows.Media.Animation.Storyboard.Begin%2A>方法為目標。  
  
 當這個屬性設定在時間軸，包含子系時，這些子時刻表 「 繼承 」 在父系的<xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>除非他們另外指定自己。  
  
## <a name="making-an-object-targetable"></a>讓物件將目標設為  
 當使用[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]，您可以執行的分鏡腳本使物件將目標設為下列兩個動作之一：  
  
-   如果物件是<xref:System.Windows.FrameworkElement>或是<xref:System.Windows.FrameworkContentElement>，將其<xref:System.Windows.FrameworkElement.Name%2A>屬性。  
  
-   如果物件是<xref:System.Windows.Freezable>或自訂<xref:System.Windows.FrameworkContentElement>或是<xref:System.Windows.FrameworkContentElement>，將它指派名稱，使用[X:name 指示詞](~/docs/framework/xaml-services/x-name-directive.md)標記延伸。  
  
 使用程式碼，當您讓物件將目標設為使用<xref:System.Windows.NameScope.RegisterName%2A>方法來將物件指派名稱。  
  
<a name="dependencyPropertyInfo_TargetName"></a>   
## <a name="dependency-property-information"></a>相依性屬性資訊  
  
|||  
|-|-|  
|識別項欄位|<xref:System.Windows.Media.Animation.Storyboard.TargetNameProperty>|  
|若要設定的中繼資料屬性 `true`|無|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetNameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetNameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetNameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.Storyboard.TargetNameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetNameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetNameProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetNameProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.Animation.Storyboard.TargetNameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetName" /> 附加屬性。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.Storyboard.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.Animation.Storyboard.TargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Media.Animation.Storyboard.Target" /> 附加屬性。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetName" />
      </Docs>
    </Member>
    <Member MemberName="TargetPropertyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetPropertyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetPropertyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.Storyboard.TargetPropertyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetPropertyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetPropertyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetPropertyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.Animation.Storyboard.TargetPropertyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" /> 附加屬性。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Media.Animation.Storyboard.TargetProperty" />
      </Docs>
    </Member>
  </Members>
</Type>