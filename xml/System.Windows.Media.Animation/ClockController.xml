<Type Name="ClockController" FullName="System.Windows.Media.Animation.ClockController">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a7f5db2fabcb7d8bd16865ae93253c3f12de7ee2" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52209599" /></Metadata><TypeSignature Language="C#" Value="public sealed class ClockController : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClockController extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.ClockController" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClockController&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClockController sealed : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type ClockController = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>以互動方式控制 <see cref="T:System.Windows.Media.Animation.Clock" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Media.Animation.ClockController>若要以互動方式開始、 暫停、 繼續、 搜尋、 略過、 停止和移除<xref:System.Windows.Media.Animation.Clock>。 您可以只以互動方式控制時鐘根層級。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.Clock" />
    <altmember cref="P:System.Windows.Media.Animation.Clock.Controller" />
  </Docs>
  <Members>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="clockController.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>設定目標 <see cref="P:System.Windows.Media.Animation.ClockController.Clock" /> 在下一個刻度開始。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會導致目標<xref:System.Windows.Media.Animation.Clock>行為，不過其<xref:System.Windows.Media.Animation.Timeline>物件的<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>已設為下一個刻度的時間。 時間軸的實際<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>設定已被忽略 （但不是會變更）。  
  
 這個方法會變更目標時鐘<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>至<xref:System.Windows.Media.Animation.ClockState.Active>。 <xref:System.Windows.Media.Animation.ClockController.Begin%2A>方法不會繼續已暫停的時鐘。  
  
 這個方法會有不會影響計時樹狀結構處理刻度的下一次。 副作用，適當的事件會也不會引發在那之前。 呼叫這個方法會觸發<xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated>和<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Clock">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Clock Clock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Clock Clock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ClockController.Clock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Clock As Clock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Clock ^ Clock { System::Windows::Media::Animation::Clock ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Clock : System.Windows.Media.Animation.Clock" Usage="System.Windows.Media.Animation.ClockController.Clock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Clock</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 控制的 <see cref="T:System.Windows.Media.Animation.ClockController" />。</summary>
        <value>這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 控制 <see cref="T:System.Windows.Media.Animation.ClockController" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pause();" />
      <MemberSignature Language="F#" Value="member this.Pause : unit -&gt; unit" Usage="clockController.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>停止目標 <see cref="T:System.Windows.Media.Animation.Clock" /> 的進行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以暫停<xref:System.Windows.Media.Animation.Clock>不論其目前的狀態，然後暫停時鐘不會變更目前的狀態。 可以暫停時鐘雖然<xref:System.Windows.Media.Animation.ClockState.Active>， <xref:System.Windows.Media.Animation.ClockState.Stopped>，或<xref:System.Windows.Media.Animation.ClockState.Filling>。 選取取消暫停 「 時鐘的唯一方式是使用<xref:System.Windows.Media.Animation.ClockController.Resume%2A>方法。 暫停時鐘會隱含地暫停及其子系。  
  
 目標時鐘已暫停時呼叫這個方法沒有任何作用。  
  
 暫停時鐘的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Resume" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Remove" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove();" />
      <MemberSignature Language="F#" Value="member this.Remove : unit -&gt; unit" Usage="clockController.Remove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>從建立動畫的屬性中移除與這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 相關聯的 <see cref="T:System.Windows.Media.Animation.ClockController" />。 時鐘與其子時鐘將不再影響這些屬性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會觸發<xref:System.Windows.Media.Animation.Clock.RemoveRequested>事件。  
  
   
  
## Examples  
 下列範例示範如何移除，並以互動方式控制時鐘。  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resume();" />
      <MemberSignature Language="F#" Value="member this.Resume : unit -&gt; unit" Usage="clockController.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>啟用先前暫停的 <see cref="T:System.Windows.Media.Animation.Clock" /> 以繼續進行。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以暫停或繼續<xref:System.Windows.Media.Animation.Clock>不論其目前的狀態，以及暫停或繼續時鐘不會變更目前的狀態。 可以暫停時鐘雖然<xref:System.Windows.Media.Animation.ClockState.Active>， <xref:System.Windows.Media.Animation.ClockState.Stopped>，或<xref:System.Windows.Media.Animation.ClockState.Filling>。 若要繼續暫停的時鐘的唯一方法是使用<xref:System.Windows.Media.Animation.ClockController.Resume%2A>方法。 繼續時鐘會隱含地繼續及其子系。 未暫停的時鐘上呼叫這個方法沒有任何作用。  
  
 繼續已暫停的時鐘的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Pause" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seek(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.Seek : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="clockController.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">搜尋位移，以目標時鐘的時間為測量單位。 這個位移會與時鐘的 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> 或 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> 相關，視 <paramref name="origin" /> 的值而定。</param>
        <param name="origin">值，指出指定的位移是否與目標時鐘的 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> 或 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> 相關。</param>
        <summary>在到達下一個刻度時，依據指定的數量搜尋目標 <see cref="P:System.Windows.Media.Animation.ClockController.Clock" />。 如果目標時鐘已停止，搜尋作業會使其重新作用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 搜尋作業不會<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>或是<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>這個時鐘的時間軸的設定納入考量： 時鐘會被當成其時間表具有<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>為 1 且沒有<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>。  
  
 這個方法會變更的時鐘<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>至<xref:System.Windows.Media.Animation.ClockState.Active>。 這個方法會有不會影響計時樹狀結構處理刻度的下一次。 副作用，適當的事件也將不會引發在那之前。  
  
 搜尋分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated>和<xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated>事件。  
  
 如果目標時鐘的子項目，其目前的時間會隨之更新。  
  
   
  
## Examples  
 下列範例示範如何搜尋使用<xref:System.Windows.Media.Animation.ClockController>。  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Animation.TimeSeekOrigin" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      </Docs>
    </Member>
    <Member MemberName="SeekAlignedToLastTick">
      <MemberSignature Language="C#" Value="public void SeekAlignedToLastTick (TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SeekAlignedToLastTick(valuetype System.TimeSpan offset, valuetype System.Windows.Media.Animation.TimeSeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SeekAlignedToLastTick (offset As TimeSpan, origin As TimeSeekOrigin)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SeekAlignedToLastTick(TimeSpan offset, System::Windows::Media::Animation::TimeSeekOrigin origin);" />
      <MemberSignature Language="F#" Value="member this.SeekAlignedToLastTick : TimeSpan * System.Windows.Media.Animation.TimeSeekOrigin -&gt; unit" Usage="clockController.SeekAlignedToLastTick (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
        <Parameter Name="origin" Type="System.Windows.Media.Animation.TimeSeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">搜尋位移，以目標時鐘的時間為測量單位。 這個位移會與時鐘的 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> 或 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> 相關，視 <paramref name="origin" /> 的值而定。</param>
        <param name="origin">值，指出指定的位移是否與目標時鐘的 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime" /> 或 <see cref="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration" /> 相關。</param>
        <summary>立即依據指定的數量搜尋目標 <see cref="T:System.Windows.Media.Animation.Clock" />。 如果目標時鐘已停止，搜尋作業會使其重新作用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 搜尋作業不會<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>或是<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>這個時鐘的時間軸的設定納入考量： 時鐘會被當成其時間表具有<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>為 1 且沒有<xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>。  
  
 <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A> 對齊的最後一個的時鐘刻度的時鐘 seeked 時。 值會立即更新以反映所做的變更原因<xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A>，即使螢幕等到畫面更新才會反映這些變更。  
  
 如果目標時鐘的子項目，其目前的時間會隨之更新。  
  
 這個方法會變更的時鐘<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>至<xref:System.Windows.Media.Animation.ClockState.Active>。  
  
 搜尋分鏡腳本的觸發程序<xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated>和<xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated>事件。  
  
   
  
## Examples  
 下列範例示範兩者<xref:System.Windows.Media.Animation.ClockController.Seek%2A>並<xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A>方法<xref:System.Windows.Media.Animation.ClockController>。  
  
 [!code-csharp[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/csharp/VS_Snippets_Wpf/ClockController_procedural_snip/CSharp/SeekAlignedToLastTickExample.cs#clockcontrollerseekexample)]
 [!code-vb[ClockController_procedural_snip#ClockControllerSeekExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClockController_procedural_snip/visualbasic/seekalignedtolasttickexample.vb#clockcontrollerseekexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipToFill">
      <MemberSignature Language="C#" Value="public void SkipToFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SkipToFill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
      <MemberSignature Language="VB.NET" Value="Public Sub SkipToFill ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SkipToFill();" />
      <MemberSignature Language="F#" Value="member this.SkipToFill : unit -&gt; unit" Usage="clockController.SkipToFill " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>將目標 <see cref="T:System.Windows.Media.Animation.Clock" /> 到其使用中週期結束的目前時間往前推進。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將前移目標時鐘的目前作用期; 結束時間時鐘之行為現在由<xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A>設定其<xref:System.Windows.Media.Animation.Timeline>。 如果時間軸<xref:System.Windows.Media.Animation.Timeline.FillBehavior%2A>屬性設定為<xref:System.Windows.Media.Animation.FillBehavior.HoldEnd>，時鐘會填滿; 如果屬性設定為<xref:System.Windows.Media.Animation.FillBehavior.Stop>，時鐘停止。  
  
 這個方法沒有效果只有當目標時鐘<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>是<xref:System.Windows.Media.Animation.ClockState.Active>。  
  
 這個方法會有不會影響計時樹狀結構處理刻度的下一次。 副作用，適當的事件也將不會引發在那之前。  
  
 分鏡腳本前進至其填滿週期觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>和<xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeedRatio">
      <MemberSignature Language="C#" Value="public double SpeedRatio { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 SpeedRatio" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ClockController.SpeedRatio" />
      <MemberSignature Language="VB.NET" Value="Public Property SpeedRatio As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double SpeedRatio { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.SpeedRatio : double with get, set" Usage="System.Windows.Media.Animation.ClockController.SpeedRatio" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定目標 <see cref="T:System.Windows.Media.Animation.Clock" /> 的互動速度。</summary>
        <value>大於零的有限值，其描述目標時鐘的互動速度。 這個值已乘以此時鐘的 <see cref="T:System.Windows.Media.Animation.Timeline" /> 的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 值。 例如，如果時間軸的 <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> 為 0.5，而 <see cref="T:System.Windows.Media.Animation.ClockController" /> 物件的 <see cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio" /> 為 3.0，則此時間軸以正常速度的 1.5 倍 (0.5 * 3.0) 移動。 預設值為 1.0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定這個屬性沒有任何作用，直到下一個刻度。 如果您設定此屬性，然後取得其值之前就會發生下一個刻度，您會取得舊的值。 這個屬性會傳回新值之後的下一個刻度。  
  
 設定這個屬性不會變更基礎時間軸的值<xref:System.Windows.Media.Animation.Timeline.SpeedRatio%2A>。  
  
 設定這個屬性就會觸發目標時鐘的<xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated>事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ClockController.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="clockController.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>停止目標 <see cref="T:System.Windows.Media.Animation.Clock" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會變更目標時鐘<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>至<xref:System.Windows.Media.Animation.Clock.Stopped%2A>。  
  
 A<xref:System.Windows.Media.Animation.Clock.Stopped%2A>時鐘可以藉由重新啟動<xref:System.Windows.Media.Animation.ClockController.Begin%2A>， <xref:System.Windows.Media.Animation.ClockController.Seek%2A>，或<xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A>方法。  
  
 這個方法會有不會影響計時樹狀結構處理刻度的下一次。 副作用，適當的事件也將不會引發在那之前。  
  
 停止時鐘的觸發程序<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>並<xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated>事件，而非<xref:System.Windows.Media.Animation.Clock.Completed>事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>