<Type Name="PowerEase" FullName="System.Windows.Media.Animation.PowerEase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7de8061d6103fe02808bf30a099ff49d4e432252" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39883525" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PowerEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PowerEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.PowerEase" />
  <TypeSignature Language="VB.NET" Value="Public Class PowerEase&#xA;Inherits EasingFunctionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class PowerEase : System::Windows::Media::Animation::EasingFunctionBase" />
  <TypeSignature Language="F#" Value="type PowerEase = class&#xA;    inherit EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示 easing 函式，這個函式會使用 *f*(*t*) = *t*<sup>p</sup> 公式來建立加速和 (或) 減速的動畫，其中 p 等於 <see cref="P:System.Windows.Media.Animation.PowerEase.Power" /> 屬性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以控制是否動畫加速、 減速，或兩者皆指定<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>。 下圖示範不同的值<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>，其中*f*(*t*) 代表動畫進度並*t*代表時間。  
  
 ![CubicEase EasingMode 圖形。] (~/add/media/cubicease-graph.png "CubicEase EasingMode 圖形。")  
  
 藉由使用<xref:System.Windows.Media.Animation.PowerEase>函式，您可以指定如何快速地加速或減速會藉由指定<xref:System.Windows.Media.Animation.PowerEase.Power%2A>屬性：  
  
 *f*(*t*) = *t*<sup>p</sup>其中`p`等於<xref:System.Windows.Media.Animation.PowerEase.Power%2A>屬性。  
  
 基於這個原因，<xref:System.Windows.Media.Animation.PowerEase>函式可以替代<xref:System.Windows.Media.Animation.QuadraticEase>(*f*(*t*) = *t*<sup>2</sup>)， <xref:System.Windows.Media.Animation.CubicEase>(*f*(*t*) = *t*<sup>3</sup>)， <xref:System.Windows.Media.Animation.QuarticEase> (*f*(*t*) = *t*<sup>4</sup>)，以及<xref:System.Windows.Media.Animation.QuinticEase>(*f*(*t*) = *t* <sup>5</sup>)。 例如，如果您想要使用<xref:System.Windows.Media.Animation.PowerEase>函式來建立相同的行為<xref:System.Windows.Media.Animation.QuadraticEase>函式 (*f*(*t*) = *t*<sup>2</sup>)，您會指定<xref:System.Windows.Media.Animation.PowerEase.Power%2A>屬性值為 2。  
  
 有數個其他 easing 函式除了<xref:System.Windows.Media.Animation.PowerEase>。
除了使用包含在執行階段的 easing 函式，您可以建立您自己自訂的 easing 函式，藉由繼承自<xref:System.Windows.Media.Animation.EasingFunctionBase>。  
  
## <a name="xaml-object-element-usage"></a>XAML 物件項目用法  
  
```xaml
<PowerEase .../>  
```  
  
   
  
## Examples  
 下列範例會套用<xref:System.Windows.Media.Animation.PowerEase>加/減速函數與<xref:System.Windows.Media.Animation.PowerEase.Power%2A>屬性值`20`到<xref:System.Windows.Media.Animation.DoubleAnimation>建立 decelerating 動畫。 因為<xref:System.Windows.Media.Animation.PowerEase.Power%2A>值之所以會這麼高、 減速突然相較於是如果您使用較低的值。  
  
 [!code-xaml[PowerEase#PowerEase](~/samples/snippets/csharp/VS_Snippets_Wpf/powerease/CS/window1.xaml#powerease)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.BackEase" />
    <altmember cref="T:System.Windows.Media.Animation.BounceEase" />
    <altmember cref="T:System.Windows.Media.Animation.CircleEase" />
    <altmember cref="T:System.Windows.Media.Animation.CubicEase" />
    <altmember cref="T:System.Windows.Media.Animation.ElasticEase" />
    <altmember cref="T:System.Windows.Media.Animation.ExponentialEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuadraticEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuarticEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuinticEase" />
    <altmember cref="T:System.Windows.Media.Animation.SineEase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PowerEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.PowerEase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PowerEase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Media.Animation.PowerEase" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.PowerEase.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="powerEase.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Windows.Freezable" /> 衍生類別的新執行個體。 建立衍生類別時，您必須覆寫這個方法。</summary>
        <returns>新的執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 動畫類別間接繼承自<xref:System.Windows.Freezable>。 基於這個原因，您需要覆寫<xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A>方法來建構自訂動畫物件。  
  
   
  
## Examples  
 下列範例示範的典型實作<xref:System.Windows.Freezable.CreateInstanceCore%2A>。  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.PowerEase.EaseInCore(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EaseInCore (normalizedTime As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override double EaseInCore(double normalizedTime);" />
      <MemberSignature Language="F#" Value="override this.EaseInCore : double -&gt; double" Usage="powerEase.EaseInCore normalizedTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">動畫的標準化時間 (進度)。</param>
        <summary>提供 easing 函式的邏輯部分，您可將其覆寫以產生自訂 easing 函式的 <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> 模式。</summary>
        <returns>表示已轉換進度的雙精度浮點數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法轉換標準化的時間，以控制動畫的步調<xref:System.Windows.Media.Animation.EasingMode.EaseIn>案例<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>。  
  
 您只需要指定 easing 函式<xref:System.Windows.Media.Animation.EasingMode.EaseIn>情況下，因為實作<xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A>方法轉換`normalizedTime`如<xref:System.Windows.Media.Animation.EasingMode.EaseOut>和<xref:System.Windows.Media.Animation.EasingMode.EaseInOut>案例。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public double Power { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Power" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.PowerEase.Power" />
      <MemberSignature Language="VB.NET" Value="Public Property Power As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Power { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Power : double with get, set" Usage="System.Windows.Media.Animation.PowerEase.Power" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定動畫插補的指數乘冪。 例如，值 7 會建立遵循 *f*(*t*) = *t*<sup>7</sup> 公式的動畫插補曲線。</summary>
        <value>動畫插補的指數乘冪。 這個值必須大於或等於 0。 預設值為 2。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[DP_ID_field_label](~/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.PowerEase.PowerProperty>  
  
<a name="xamlAttributeUsage_Power"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<object Power="double" .../>  
```  
  
   
  
## Examples  
 下列範例會套用<xref:System.Windows.Media.Animation.PowerEase>加/減速函數與<xref:System.Windows.Media.Animation.PowerEase.Power%2A>屬性值`20`到<xref:System.Windows.Media.Animation.DoubleAnimation>建立 decelerating 動畫。 因為<xref:System.Windows.Media.Animation.PowerEase.Power%2A>值之所以會這麼高、 減速突然相較於是如果您使用較低的值。  
  
 [!code-xaml[PowerEase#PowerEase](~/samples/snippets/csharp/VS_Snippets_Wpf/powerease/CS/window1.xaml#powerease)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PowerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PowerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.PowerEase.PowerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PowerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PowerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable PowerProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.Animation.PowerEase.PowerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Media.Animation.PowerEase.Power" /> 相依性屬性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>