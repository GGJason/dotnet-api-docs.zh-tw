<Type Name="QuarticEase" FullName="System.Windows.Media.Animation.QuarticEase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="87a908446477489c73aee0d4c0368dbcc085388d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36497417" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class QuarticEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QuarticEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.QuarticEase" />
  <TypeSignature Language="VB.NET" Value="Public Class QuarticEase&#xA;Inherits EasingFunctionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class QuarticEase : System::Windows::Media::Animation::EasingFunctionBase" />
  <TypeSignature Language="F#" Value="type QuarticEase = class&#xA;    inherit EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>代表 easing 函式，這個函式會使用 *f*(*t*) = *t*<sup>4</sup> 公式來建立加速及/或 減速的動畫。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以控制是否在動畫加速、 減速，或兩者都指定<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>。 下圖示範不同的值<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>，其中*f*(*t*) 表示的動畫進度和*t*代表時間。  
  
 ![不同加/減速模式圖形的 QuarticEase。](~/add/media/quarticease-graph.png "的不同加/減速模式圖形的 QuarticEase。")  
  
 此函式所使用的公式如下所示。  
  
 *f*(*t*) = *t*<sup>4</sup>  
  
> [!NOTE]
>  您可以使用<xref:System.Windows.Media.Animation.PowerEase>建立相同的行為<xref:System.Windows.Media.Animation.CubicEase>， <xref:System.Windows.Media.Animation.QuadraticEase>， <xref:System.Windows.Media.Animation.QuarticEase>，和<xref:System.Windows.Media.Animation.QuinticEase>使用<xref:System.Windows.Media.Animation.PowerEase.Power%2A>屬性。 例如，如果您想要使用<xref:System.Windows.Media.Animation.PowerEase>替換<xref:System.Windows.Media.Animation.CubicEase>，指定<xref:System.Windows.Media.Animation.PowerEase.Power%2A>值為 3。  
  
 有數個其他加/減速函數除了<xref:System.Windows.Media.Animation.QuarticEase>其中您可以瀏覽 使用下列的 Silverlight 範例。  
  
 [執行這個範例](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery)  
  
 除了使用加/減速函數包含在執行階段中，您可以建立您自己自訂的加/減速函數透過繼承自<xref:System.Windows.Media.Animation.EasingFunctionBase>。  
  
<a name="xamlObjectElementUsage_QuarticEase"></a>   
## <a name="xaml-object-element-usage"></a>XAML 物件項目用法  
  
```  
<QuarticEase .../>  
```  
  
   
  
## Examples  
 下列範例會套用<xref:System.Windows.Media.Animation.QuarticEase>easing 函式可<xref:System.Windows.Media.Animation.DoubleAnimation>建立 decelerating 動畫。  
  
 [!code-xaml[QuarticEase#QuarticEase](~/samples/snippets/csharp/VS_Snippets_Wpf/quarticease/CS/window1.xaml#quarticease)]   
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.Animation.PowerEase" />
    <altmember cref="T:System.Windows.Media.Animation.BackEase" />
    <altmember cref="T:System.Windows.Media.Animation.BounceEase" />
    <altmember cref="T:System.Windows.Media.Animation.CircleEase" />
    <altmember cref="T:System.Windows.Media.Animation.CubicEase" />
    <altmember cref="T:System.Windows.Media.Animation.ElasticEase" />
    <altmember cref="T:System.Windows.Media.Animation.ExponentialEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuadraticEase" />
    <altmember cref="T:System.Windows.Media.Animation.QuinticEase" />
    <altmember cref="T:System.Windows.Media.Animation.SineEase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QuarticEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuarticEase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; QuarticEase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Media.Animation.QuarticEase" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuarticEase.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="quarticEase.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Windows.Freezable" /> 衍生類別的新執行個體。 建立衍生類別時，您必須覆寫這個方法。</summary>
        <returns>新的執行個體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 動畫類別間接繼承自<xref:System.Windows.Freezable>。 因此，您必須覆寫<xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A>建構自訂動畫物件的方法。  
  
   
  
## Examples  
 下列範例示範典型實作<xref:System.Windows.Freezable.CreateInstanceCore%2A>。  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.QuarticEase.EaseInCore(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EaseInCore (normalizedTime As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override double EaseInCore(double normalizedTime);" />
      <MemberSignature Language="F#" Value="override this.EaseInCore : double -&gt; double" Usage="quarticEase.EaseInCore normalizedTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">動畫的標準化時間 (進度)。</param>
        <summary>提供 easing 函式的邏輯部分，您可將其覆寫以產生自訂 easing 函式的 <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> 模式。</summary>
        <returns>表示已轉換進度的雙精度浮點數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法來轉換控制的動畫的速度的標準化的時間<xref:System.Windows.Media.Animation.EasingMode.EaseIn>案例<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>。  
  
 您只需要指定您加/減速函數<xref:System.Windows.Media.Animation.EasingMode.EaseIn>因為大小寫的實作<xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A>方法轉換`normalizedTime`如<xref:System.Windows.Media.Animation.EasingMode.EaseOut>和<xref:System.Windows.Media.Animation.EasingMode.EaseInOut>案例。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>