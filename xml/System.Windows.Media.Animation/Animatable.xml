<Type Name="Animatable" FullName="System.Windows.Media.Animation.Animatable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f509d6f7a63005aede80085224ae24e543c80e33" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52734501" /></Metadata><TypeSignature Language="C#" Value="public abstract class Animatable : System.Windows.Freezable, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Animatable extends System.Windows.Freezable implements class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.Animatable" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Animatable&#xA;Inherits Freezable&#xA;Implements IAnimatable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Animatable abstract : System::Windows::Freezable, System::Windows::Media::Animation::IAnimatable" />
  <TypeSignature Language="F#" Value="type Animatable = class&#xA;    inherit Freezable&#xA;    interface IAnimatable&#xA;    interface DUCE.IResource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="99e00-101">提供動畫支援的抽象類別 (Abstract Class)。</span><span class="sxs-lookup"><span data-stu-id="99e00-101">Abstract class that provides animation support.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Animatable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Animatable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="99e00-102">初始化 <see cref="T:System.Windows.Media.Animation.Animatable" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="99e00-102">Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Animatable" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="99e00-103">使用指定的 <see cref="T:System.Windows.DependencyProperty" />，建立指定的 <see cref="T:System.Windows.Media.Animation.AnimationClock" /> 動畫。</span><span class="sxs-lookup"><span data-stu-id="99e00-103">Animates the specified <see cref="T:System.Windows.DependencyProperty" /> using the specified <see cref="T:System.Windows.Media.Animation.AnimationClock" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock -&gt; unit" Usage="animatable.ApplyAnimationClock (dp, clock)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="99e00-104">要製作動畫的屬性。</span><span class="sxs-lookup"><span data-stu-id="99e00-104">The property to animate.</span></span></param>
        <param name="clock"><span data-ttu-id="99e00-105">建立指定屬性動畫效果的時鐘。</span><span class="sxs-lookup"><span data-stu-id="99e00-105">The clock with which to animate the specified property.</span></span> <span data-ttu-id="99e00-106">如果 <paramref name="clock" /> 是 <see langword="null" />，即移除指定屬性的所有動畫效果 (不是停止)。</span><span class="sxs-lookup"><span data-stu-id="99e00-106">If <paramref name="clock" /> is <see langword="null" />, all animations will be removed from the specified property (but not stopped).</span></span></param>
        <summary><span data-ttu-id="99e00-107">將 <see cref="T:System.Windows.Media.Animation.AnimationClock" /> 套用至指定的 <see cref="T:System.Windows.DependencyProperty" />。</span><span class="sxs-lookup"><span data-stu-id="99e00-107">Applies an <see cref="T:System.Windows.Media.Animation.AnimationClock" /> to the specified <see cref="T:System.Windows.DependencyProperty" />.</span></span> <span data-ttu-id="99e00-108">如果屬性已有動畫效果，即使用 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> 遞移式行為。</span><span class="sxs-lookup"><span data-stu-id="99e00-108">If the property is already animated, the <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> handoff behavior is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99e00-109">請注意，使用此方法來移除屬性的時鐘時，不會停止這些時鐘。</span><span class="sxs-lookup"><span data-stu-id="99e00-109">Note that using this method to removing clocks from a property does not stop those clocks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.ApplyAnimationClock : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationClock * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="animatable.ApplyAnimationClock (dp, clock, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="99e00-110">要製作動畫的屬性。</span><span class="sxs-lookup"><span data-stu-id="99e00-110">The property to animate.</span></span></param>
        <param name="clock"><span data-ttu-id="99e00-111">建立指定屬性動畫效果的時鐘。</span><span class="sxs-lookup"><span data-stu-id="99e00-111">The clock with which to animate the specified property.</span></span> <span data-ttu-id="99e00-112">如果 <paramref name="handoffBehavior" /> 是 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> 且 <paramref name="clock" /> 是 <see langword="null" />，則會從指定的屬性移除所有動畫 (但不會停止)。</span><span class="sxs-lookup"><span data-stu-id="99e00-112">If <paramref name="handoffBehavior" /> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> and <paramref name="clock" /> is <see langword="null" />, all animations will be removed from the specified property (but not stopped).</span></span> <span data-ttu-id="99e00-113">如果 <paramref name="handoffBehavior" /> 是 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" /> 且時鐘是 <see langword="null" />，這個方法將不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="99e00-113">If <paramref name="handoffBehavior" /> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" /> and clock is <see langword="null" />, this method has no effect.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="99e00-114">一個值，這個值指定新的動畫應該如何與已經影響屬性值的任何目前動畫互動。</span><span class="sxs-lookup"><span data-stu-id="99e00-114">A value that specifies how the new animation should interact with any current animations already affecting the property value.</span></span></param>
        <summary><span data-ttu-id="99e00-115">將 <see cref="T:System.Windows.Media.Animation.AnimationClock" /> 套用至指定的 <see cref="T:System.Windows.DependencyProperty" />。</span><span class="sxs-lookup"><span data-stu-id="99e00-115">Applies an <see cref="T:System.Windows.Media.Animation.AnimationClock" /> to the specified <see cref="T:System.Windows.DependencyProperty" />.</span></span> <span data-ttu-id="99e00-116">如果已建立屬性的動畫，則會使用指定的 <see cref="T:System.Windows.Media.Animation.HandoffBehavior" />。</span><span class="sxs-lookup"><span data-stu-id="99e00-116">If the property is already animated, the specified <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99e00-117">請注意，使用此方法來移除屬性的時鐘時，不會停止這些時鐘。</span><span class="sxs-lookup"><span data-stu-id="99e00-117">Note that using this method to remove clocks from a property does not stop those clocks.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="99e00-118">使用 Compose HandoffBehavior</span><span class="sxs-lookup"><span data-stu-id="99e00-118">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="99e00-119">當您套用<xref:System.Windows.Media.Animation.Storyboard>， <xref:System.Windows.Media.Animation.AnimationTimeline>，或<xref:System.Windows.Media.Animation.AnimationClock>屬性，使用<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、 任何<xref:System.Windows.Media.Animation.Clock>先前該屬性相關聯的物件會繼續耗用系統資源，計時系統不會自動移除這些時鐘。</span><span class="sxs-lookup"><span data-stu-id="99e00-119">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system will not remove these clocks automatically.</span></span>  
  
 <span data-ttu-id="99e00-120">若要避免發生效能問題，當您套用大量時鐘使用<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>，完成之後，您應該從動畫屬性移除組成的時鐘。</span><span class="sxs-lookup"><span data-stu-id="99e00-120">To avoid performance issues when you apply a large number of clocks using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="99e00-121">有幾個方式可移除時鐘。</span><span class="sxs-lookup"><span data-stu-id="99e00-121">There are several ways to remove a clock.</span></span>  
  
-   <span data-ttu-id="99e00-122">若要從屬性移除所有時鐘，請使用<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>或<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>動畫物件的方法。</span><span class="sxs-lookup"><span data-stu-id="99e00-122">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="99e00-123">指定的第一個參數，要繪製之屬性和`null`作為第二個。</span><span class="sxs-lookup"><span data-stu-id="99e00-123">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="99e00-124">這將會從屬性移除所有動畫時鐘。</span><span class="sxs-lookup"><span data-stu-id="99e00-124">This will remove all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="99e00-125">若要移除特定<xref:System.Windows.Media.Animation.AnimationClock>從時鐘清單，使用<xref:System.Windows.Media.Animation.Clock.Controller%2A>屬性<xref:System.Windows.Media.Animation.AnimationClock>擷取<xref:System.Windows.Media.Animation.ClockController>，然後呼叫<xref:System.Windows.Media.Animation.ClockController.Remove%2A>方法<xref:System.Windows.Media.Animation.ClockController>。</span><span class="sxs-lookup"><span data-stu-id="99e00-125">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="99e00-126">這通常是<xref:System.Windows.Media.Animation.Clock.Completed>時鐘的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="99e00-126">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="99e00-127">請注意，只有根時鐘可以控制<xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>的子系時鐘的屬性會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="99e00-127">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock will return `null`.</span></span> <span data-ttu-id="99e00-128">也請注意，<xref:System.Windows.Media.Animation.Clock.Completed>是否有效的持續時間的時鐘永遠不會呼叫事件。</span><span class="sxs-lookup"><span data-stu-id="99e00-128">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event will not be called if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="99e00-129">在此情況下，使用者必須決定何時要呼叫<xref:System.Windows.Media.Animation.ClockController.Remove%2A>。</span><span class="sxs-lookup"><span data-stu-id="99e00-129">In that case, the user will need to determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="99e00-130">這主要是在存留期較長的物件才會發生的動畫問題。</span><span class="sxs-lookup"><span data-stu-id="99e00-130">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="99e00-131">記憶體回收物件時，也會中斷連接並記憶體回收其時鐘。</span><span class="sxs-lookup"><span data-stu-id="99e00-131">When an object is garbage collected, its clocks will also be disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="99e00-132">如需時鐘物件的詳細資訊，請參閱[動畫和計時系統概觀](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="99e00-132">For more information about clock objects, see the [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99e00-133">下列範例示範如何套用使用不同的動畫時鐘<xref:System.Windows.Media.Animation.HandoffBehavior>設定。</span><span class="sxs-lookup"><span data-stu-id="99e00-133">The following example shows how to apply animation clocks using different <xref:System.Windows.Media.Animation.HandoffBehavior> settings.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="99e00-134">將動畫套用至指定的 <see cref="T:System.Windows.DependencyProperty" />。</span><span class="sxs-lookup"><span data-stu-id="99e00-134">Applies an animation to the specified <see cref="T:System.Windows.DependencyProperty" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline -&gt; unit" Usage="animatable.BeginAnimation (dp, animation)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="99e00-135">要製作動畫的屬性。</span><span class="sxs-lookup"><span data-stu-id="99e00-135">The property to animate.</span></span></param>
        <param name="animation"><span data-ttu-id="99e00-136">用來建立指定屬性動畫效果的動畫。</span><span class="sxs-lookup"><span data-stu-id="99e00-136">The animation used to animate the specified property.</span></span>  
  
<span data-ttu-id="99e00-137">如果動畫的 <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> 為 <see langword="null" />，則會移除任何目前的動畫，並保留屬性的目前值。</span><span class="sxs-lookup"><span data-stu-id="99e00-137">If the animation's <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> is <see langword="null" />, any current animations will be removed and the current value of the property will be held.</span></span>  
  
<span data-ttu-id="99e00-138">如果 <paramref name="animation" /> 為 <see langword="null" />，則會從屬性中移除所有動畫，並將屬性值回復為其基底值。</span><span class="sxs-lookup"><span data-stu-id="99e00-138">If <paramref name="animation" /> is <see langword="null" />, all animations will be removed from the property and the property value will revert back to its base value.</span></span></param>
        <summary><span data-ttu-id="99e00-139">將動畫套用至指定的 <see cref="T:System.Windows.DependencyProperty" />。</span><span class="sxs-lookup"><span data-stu-id="99e00-139">Applies an animation to the specified <see cref="T:System.Windows.DependencyProperty" />.</span></span> <span data-ttu-id="99e00-140">呈現下一個畫面格後，就會啟動動畫。</span><span class="sxs-lookup"><span data-stu-id="99e00-140">The animation is started when the next frame is rendered.</span></span> <span data-ttu-id="99e00-141">如果指定的屬性已有動畫效果，即使用 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> 遞移式行為。</span><span class="sxs-lookup"><span data-stu-id="99e00-141">If the specified property is already animated, the <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> handoff behavior is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99e00-142">如果動畫的<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>這就是小於或等於零，從下一個畫面格轉譯時間經過的時間量之後，開始動畫。</span><span class="sxs-lookup"><span data-stu-id="99e00-142">If the animation has a <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> that is greater than zero, the animation begins after that amount of time has elapsed from the time the next frame is rendered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="abstract member BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit&#xA;override this.BeginAnimation : System.Windows.DependencyProperty * System.Windows.Media.Animation.AnimationTimeline * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="animatable.BeginAnimation (dp, animation, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="99e00-143">要製作動畫的屬性。</span><span class="sxs-lookup"><span data-stu-id="99e00-143">The property to animate.</span></span></param>
        <param name="animation"><span data-ttu-id="99e00-144">用來建立指定屬性動畫效果的動畫。</span><span class="sxs-lookup"><span data-stu-id="99e00-144">The animation used to animate the specified property.</span></span>  
  
<span data-ttu-id="99e00-145">如果 <paramref name="handoffBehavior" /> 是 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> 且動畫的 <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> 是 <see langword="null" />，則會移除任何目前動畫，並保留屬性的目前值。</span><span class="sxs-lookup"><span data-stu-id="99e00-145">If <paramref name="handoffBehavior" /> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> and the animation's <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> is <see langword="null" />, any current animations will be removed and the current value of the property will be held.</span></span>  
  
<span data-ttu-id="99e00-146">如果 <paramref name="handoffBehavior" /> 是 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> 且 <paramref name="animation" /> 是 <see langword="null" /> 參考，則會從屬性移除所有動畫，並將屬性值還原成其基底值。</span><span class="sxs-lookup"><span data-stu-id="99e00-146">If <paramref name="handoffBehavior" /> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" /> and <paramref name="animation" /> is a <see langword="null" /> reference, all animations will be removed from the property and the property value will revert back to its base value.</span></span>  
  
<span data-ttu-id="99e00-147">如果 <paramref name="handoffBehavior" /> 是 <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" />，則當動畫或其 <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> 是 <see langword="null" /> 時，這個方法將不起任何作用。</span><span class="sxs-lookup"><span data-stu-id="99e00-147">If <paramref name="handoffBehavior" /> is <see cref="F:System.Windows.Media.Animation.HandoffBehavior.Compose" />, this method will have no effect if the animation or its <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> is <see langword="null" />.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="99e00-148">一個值，這個值指定新的動畫應該如何與已經影響屬性值的任何目前動畫互動。</span><span class="sxs-lookup"><span data-stu-id="99e00-148">A value that specifies how the new animation should interact with any current animations already affecting the property value.</span></span></param>
        <summary><span data-ttu-id="99e00-149">將動畫套用至指定的 <see cref="T:System.Windows.DependencyProperty" />。</span><span class="sxs-lookup"><span data-stu-id="99e00-149">Applies an animation to the specified <see cref="T:System.Windows.DependencyProperty" />.</span></span> <span data-ttu-id="99e00-150">呈現下一個畫面格後，就會啟動動畫。</span><span class="sxs-lookup"><span data-stu-id="99e00-150">The animation is started when the next frame is rendered.</span></span> <span data-ttu-id="99e00-151">如果已建立指定之屬性的動畫，則會使用指定的 <see cref="T:System.Windows.Media.Animation.HandoffBehavior" />。</span><span class="sxs-lookup"><span data-stu-id="99e00-151">If the specified property is already animated, the specified <see cref="T:System.Windows.Media.Animation.HandoffBehavior" /> is used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99e00-152">如果動畫的<xref:System.Windows.Media.Animation.Timeline.BeginTime%2A>這就是小於或等於零，從下一個畫面格轉譯時間經過的時間量之後，開始動畫。</span><span class="sxs-lookup"><span data-stu-id="99e00-152">If the animation has a <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> that is greater than zero, the animation begins after that amount of time has elapsed from the time the next frame is rendered.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="99e00-153">使用 Compose HandoffBehavior</span><span class="sxs-lookup"><span data-stu-id="99e00-153">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="99e00-154">當您套用<xref:System.Windows.Media.Animation.Storyboard>， <xref:System.Windows.Media.Animation.AnimationTimeline>，或<xref:System.Windows.Media.Animation.AnimationClock>屬性，使用<xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>、 任何<xref:System.Windows.Media.Animation.Clock>先前該屬性相關聯的物件會繼續耗用系統資源，計時系統不會自動移除這些時鐘。</span><span class="sxs-lookup"><span data-stu-id="99e00-154">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system will not remove these clocks automatically.</span></span>  
  
 <span data-ttu-id="99e00-155">若要避免發生效能問題，當您套用大量時鐘使用<xref:System.Windows.Media.Animation.HandoffBehavior.Compose>，完成之後，您應該從動畫屬性移除組成的時鐘。</span><span class="sxs-lookup"><span data-stu-id="99e00-155">To avoid performance issues when you apply a large number of clocks using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="99e00-156">有幾個方式可移除時鐘。</span><span class="sxs-lookup"><span data-stu-id="99e00-156">There are several ways to remove a clock.</span></span>  
  
-   <span data-ttu-id="99e00-157">若要從屬性移除所有時鐘，請使用<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>或<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>動畫物件的方法。</span><span class="sxs-lookup"><span data-stu-id="99e00-157">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="99e00-158">指定的第一個參數，要繪製之屬性和`null`作為第二個。</span><span class="sxs-lookup"><span data-stu-id="99e00-158">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="99e00-159">這將會從屬性移除所有動畫時鐘。</span><span class="sxs-lookup"><span data-stu-id="99e00-159">This will remove all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="99e00-160">若要移除特定<xref:System.Windows.Media.Animation.AnimationClock>從時鐘清單，使用<xref:System.Windows.Media.Animation.Clock.Controller%2A>屬性<xref:System.Windows.Media.Animation.AnimationClock>擷取<xref:System.Windows.Media.Animation.ClockController>，然後呼叫<xref:System.Windows.Media.Animation.ClockController.Remove%2A>方法<xref:System.Windows.Media.Animation.ClockController>。</span><span class="sxs-lookup"><span data-stu-id="99e00-160">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="99e00-161">這通常是<xref:System.Windows.Media.Animation.Clock.Completed>時鐘的事件處理常式。</span><span class="sxs-lookup"><span data-stu-id="99e00-161">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="99e00-162">請注意，只有根時鐘可以控制<xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>的子系時鐘的屬性會傳回`null`。</span><span class="sxs-lookup"><span data-stu-id="99e00-162">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock will return `null`.</span></span> <span data-ttu-id="99e00-163">也請注意，<xref:System.Windows.Media.Animation.Clock.Completed>是否有效的持續時間的時鐘永遠不會呼叫事件。</span><span class="sxs-lookup"><span data-stu-id="99e00-163">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event will not be called if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="99e00-164">在此情況下，使用者必須決定何時要呼叫<xref:System.Windows.Media.Animation.ClockController.Remove%2A>。</span><span class="sxs-lookup"><span data-stu-id="99e00-164">In that case, the user will need to determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="99e00-165">這主要是在存留期較長的物件才會發生的動畫問題。</span><span class="sxs-lookup"><span data-stu-id="99e00-165">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="99e00-166">記憶體回收物件時，也會中斷連接並記憶體回收其時鐘。</span><span class="sxs-lookup"><span data-stu-id="99e00-166">When an object is garbage collected, its clocks will also be disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="99e00-167">如需時鐘物件的詳細資訊，請參閱[動畫和計時系統概觀](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="99e00-167">For more information about clock objects, see the [Animation and Timing System Overview](~/docs/framework/wpf/graphics-multimedia/animation-and-timing-system-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99e00-168">下列範例示範如何將使用不同的動畫套用<xref:System.Windows.Media.Animation.HandoffBehavior>設定。</span><span class="sxs-lookup"><span data-stu-id="99e00-168">The following example shows how to apply animations using different <xref:System.Windows.Media.Animation.HandoffBehavior> settings.</span></span>  
  
 [!code-cpp[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/cpp/VS_Snippets_Wpf/animateproperty/CPP/InteractiveExample.cpp#interactiveanimationexamplewholepage)]
 [!code-csharp[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/animateproperty/CSharp/InteractiveExample.cs#interactiveanimationexamplewholepage)]
 [!code-vb[animateproperty#InteractiveAnimationExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateproperty/VisualBasic/InteractiveExample.vb#interactiveanimationexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Animatable Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Animation.Animatable Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Animatable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::Animation::Animatable ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Windows.Media.Animation.Animatable" Usage="animatable.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Animatable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="99e00-169">建立這個 <see cref="T:System.Windows.Media.Animation.Animatable" /> 的可修改複製品，深層複製這個物件的值。</span><span class="sxs-lookup"><span data-stu-id="99e00-169">Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Animatable" />, making deep copies of this object's values.</span></span> <span data-ttu-id="99e00-170">當複製這個物件的相依性屬性時，這個方法會複製資源參考和資料繫結 (Data Binding) (但可能已不再解析)，但不會複製動畫或其目前值。</span><span class="sxs-lookup"><span data-stu-id="99e00-170">When copying this object's dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</span></span></summary>
        <returns><span data-ttu-id="99e00-171">這個執行個體的可修改複製品。</span><span class="sxs-lookup"><span data-stu-id="99e00-171">A modifiable clone of this instance.</span></span> <span data-ttu-id="99e00-172">傳回的複製品實際上是目前物件的深層複本。</span><span class="sxs-lookup"><span data-stu-id="99e00-172">The returned clone is effectively a deep copy of the current object.</span></span> <span data-ttu-id="99e00-173">複製品的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 屬性為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="99e00-173">The clone's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99e00-174"><xref:System.Windows.Media.Animation.Animatable.Clone%2A>方法可以用來產生的可修改複本凍結<xref:System.Windows.Freezable>物件。</span><span class="sxs-lookup"><span data-stu-id="99e00-174">The <xref:System.Windows.Media.Animation.Animatable.Clone%2A> method can be used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects.</span></span> <span data-ttu-id="99e00-175">為了方便起見，這個方法會遮蔽繼承<xref:System.Windows.Freezable.Clone%2A>方法，以提供強類型的實作。</span><span class="sxs-lookup"><span data-stu-id="99e00-175">For convenience, this method shadows the inherited <xref:System.Windows.Freezable.Clone%2A> method to provide a strongly typed implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Freezable.Clone" />
      </Docs>
    </Member>
    <Member MemberName="FreezeCore">
      <MemberSignature Language="C#" Value="protected override bool FreezeCore (bool isChecking);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool FreezeCore(bool isChecking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FreezeCore (isChecking As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool FreezeCore(bool isChecking);" />
      <MemberSignature Language="F#" Value="abstract member FreezeCore : bool -&gt; bool&#xA;override this.FreezeCore : bool -&gt; bool" Usage="animatable.FreezeCore isChecking" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isChecking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isChecking"><span data-ttu-id="99e00-176">如果這個方法應該直接判斷這個執行個體是否可以凍結，則為 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="99e00-176"><see langword="true" /> if this method should simply determine whether this instance can be frozen.</span></span> <span data-ttu-id="99e00-177">呼叫這個方法時，如果這個執行個體本身實際上應該凍結，則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="99e00-177"><see langword="false" /> if this instance should actually freeze itself when this method is called.</span></span></param>
        <summary><span data-ttu-id="99e00-178">將這個 <see cref="T:System.Windows.Media.Animation.Animatable" /> 物件設定為不可修改，或決定是否可以將它設定為不可修改。</span><span class="sxs-lookup"><span data-stu-id="99e00-178">Makes this <see cref="T:System.Windows.Media.Animation.Animatable" /> object unmodifiable or determines whether it can be made unmodifiable.</span></span></summary>
        <returns><span data-ttu-id="99e00-179">當 <paramref name="isChecking" /> 為 <see langword="true" /> 時，如果可以將這個 <see cref="T:System.Windows.Media.Animation.Animatable" /> 設定為不可修改，則這個方法會傳回 <see langword="true" />，如果無法設定為不可修改，則會傳回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="99e00-179">If <paramref name="isChecking" /> is <see langword="true" />, this method returns <see langword="true" /> if this <see cref="T:System.Windows.Media.Animation.Animatable" /> can be made unmodifiable, or <see langword="false" /> if it cannot be made unmodifiable.</span></span>  
  
<span data-ttu-id="99e00-180">如果 <paramref name="isChecking" /> 是 <see langword="false" />，則當這個 <see cref="T:System.Windows.Media.Animation.Animatable" /> 現在已經是不可修改時，這個方法會傳回 <see langword="true" />，如果它不可以成為不可修改，則會傳回 <see langword="false" />，而副作用是會開始變更這個物件的凍結狀態。</span><span class="sxs-lookup"><span data-stu-id="99e00-180">If <paramref name="isChecking" /> is <see langword="false" />, this method returns <see langword="true" /> if the if this <see cref="T:System.Windows.Media.Animation.Animatable" /> is now unmodifiable, or <see langword="false" /> if it cannot be made unmodifiable, with the side effect of having begun to change the frozen status of this object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99e00-181">這個方法會傳回`false`時<xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A>是`true`。</span><span class="sxs-lookup"><span data-stu-id="99e00-181">This method will return `false` when <xref:System.Windows.Media.Animation.Animatable.HasAnimatedProperties%2A> is `true`.</span></span>  
  
 <span data-ttu-id="99e00-182">請勿呼叫這個方法，直接 （只是呼叫基底實作中）。</span><span class="sxs-lookup"><span data-stu-id="99e00-182">Do not call this method directly (except when calling base in an implementation).</span></span> <span data-ttu-id="99e00-183">這個方法會在內部呼叫<xref:System.Windows.Freezable.CanFreeze%2A>(與`isChecking`等於`true`) 和<xref:System.Windows.Freezable.Freeze%2A>(使用`isChecking`等於`false`)。</span><span class="sxs-lookup"><span data-stu-id="99e00-183">This method is called internally by <xref:System.Windows.Freezable.CanFreeze%2A> (with `isChecking` equal to `true`) and  <xref:System.Windows.Freezable.Freeze%2A> (with `isChecking` equal to `false`).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="99e00-184">衍生自類別<see cref="T:System.Windows.Media.Animation.Animatable" />類別包含不會儲存使用相依性屬性的資料時，必須覆寫這個方法。</span><span class="sxs-lookup"><span data-stu-id="99e00-184">Classes that derive from <see cref="T:System.Windows.Media.Animation.Animatable" /> must override this method when the class contains data that is not stored using dependency properties.</span></span>  
  
<span data-ttu-id="99e00-185">一般實作會呼叫基底實作中，然後呼叫靜態<see cref="M:System.Windows.Freezable.Freeze" />方法上所有<see cref="T:System.Windows.Freezable" />類型的屬性，其中包含類別，傳回<see langword="true" />凍結所有屬性時，才 (或可能已都凍結，請在案例通過<see langword="false" />值<paramref name="isChecking" />)。</span><span class="sxs-lookup"><span data-stu-id="99e00-185">A typical implementation would call the base implementation, then call the static <see cref="M:System.Windows.Freezable.Freeze" /> method on all <see cref="T:System.Windows.Freezable" /> typed properties that the class contains, returning <see langword="true" /> only if all properties were frozen (or could have been frozen, in the case of passing through a <see langword="false" /> value for <paramref name="isChecking" />).</span></span></para></block>
        <altmember cref="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)" />
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj&#xA;override this.GetAnimationBaseValue : System.Windows.DependencyProperty -&gt; obj" Usage="animatable.GetAnimationBaseValue dp" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="99e00-186">識別應該擷取其基底 (非動畫) 實值的屬性。</span><span class="sxs-lookup"><span data-stu-id="99e00-186">Identifies the property whose base (non-animated) value should be retrieved.</span></span></param>
        <summary><span data-ttu-id="99e00-187">傳回指定之 <see cref="T:System.Windows.DependencyProperty" /> 的非動畫實值。</span><span class="sxs-lookup"><span data-stu-id="99e00-187">Returns the non-animated value of the specified <see cref="T:System.Windows.DependencyProperty" />.</span></span></summary>
        <returns><span data-ttu-id="99e00-188">指定的屬性沒有建立動畫時要傳回的值。</span><span class="sxs-lookup"><span data-stu-id="99e00-188">The value that would be returned if the specified property were not animated.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99e00-189">如果指定的屬性沒有建立動畫，則這個方法會傳回相同結果<xref:System.Windows.DependencyObject.GetValue%2A>。</span><span class="sxs-lookup"><span data-stu-id="99e00-189">If the specified property is not animated, this method returns the same result as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99e00-190">在下列範例中，會擷取和顯示動畫屬性的非動畫值。</span><span class="sxs-lookup"><span data-stu-id="99e00-190">In the following example, the non-animated values of animated properties are retrieved and displayed.</span></span>  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalueexamplewholepage)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValueExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalueexamplewholepage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Animatable.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasAnimatedProperties : bool" Usage="System.Windows.Media.Animation.Animatable.HasAnimatedProperties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="99e00-191">取得值，這個值表示是否有一個或多個 <see cref="T:System.Windows.Media.Animation.AnimationClock" /> 物件與這個物件的任何一個相依性屬性相關聯。</span><span class="sxs-lookup"><span data-stu-id="99e00-191">Gets a value that indicates whether one or more <see cref="T:System.Windows.Media.Animation.AnimationClock" /> objects is associated with any of this object's dependency properties.</span></span></summary>
        <value><span data-ttu-id="99e00-192"><see langword="true" /> 如果一或多個<see cref="T:System.Windows.Media.Animation.AnimationClock" />物件會有任何物件的相依性屬性相關聯，否則<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="99e00-192"><see langword="true" /> if one or more <see cref="T:System.Windows.Media.Animation.AnimationClock" /> objects is associated with any of this object's dependency properties; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99e00-193">這個屬性不會指出這個物件是否包含動畫的子物件。</span><span class="sxs-lookup"><span data-stu-id="99e00-193">This property does not indicate whether this object contains animated sub-objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStoredWeakReference">
      <MemberSignature Language="C#" Value="public static bool ShouldSerializeStoredWeakReference (System.Windows.DependencyObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ShouldSerializeStoredWeakReference(class System.Windows.DependencyObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ShouldSerializeStoredWeakReference (target As DependencyObject) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ShouldSerializeStoredWeakReference(System::Windows::DependencyObject ^ target);" />
      <MemberSignature Language="F#" Value="static member ShouldSerializeStoredWeakReference : System.Windows.DependencyObject -&gt; bool" Usage="System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="99e00-194">代表參與相依性屬性系統的物件。</span><span class="sxs-lookup"><span data-stu-id="99e00-194">Represents an object that participates in the dependency property system.</span></span></param>
        <summary><span data-ttu-id="99e00-195">指定相依性物件是否應該序列化。</span><span class="sxs-lookup"><span data-stu-id="99e00-195">Specifies whether a dependency object should be serialized.</span></span></summary>
        <returns><span data-ttu-id="99e00-196"><see langword="true" /> 表示要序列化 <paramref name="target" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="99e00-196"><see langword="true" /> to serialize <paramref name="target" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="99e00-197">預設值為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="99e00-197">The default is <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99e00-198"><xref:System.ComponentModel.TypeDescriptor>類別會使用<xref:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference%2A>方法，以判斷是否應序列化屬性。</span><span class="sxs-lookup"><span data-stu-id="99e00-198">The <xref:System.ComponentModel.TypeDescriptor> class uses the <xref:System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference%2A> method to determine if a property should be serialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>