<Type Name="Clock" FullName="System.Windows.Media.Animation.Clock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="829cbcd67b4a6736053ec04245b9b87181268348" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30659982" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Clock : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Clock extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.Clock" />
  <TypeSignature Language="VB.NET" Value="Public Class Clock&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class Clock : System::Windows::Threading::DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>維護 <see cref="T:System.Windows.Media.Animation.Timeline" /> 的執行階段計時狀態。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Media.Animation.Timeline>，單獨使用時，實際上並不進行任何項目以外描述一段時間。 它是時間軸的<xref:System.Windows.Media.Animation.Clock>從事實際作業的物件： 其維持的時間軸與時間有關執行階段狀態。  
  
 在大部分情況下，時鐘會自動針對時間表建立。 當您使用動畫顯示<xref:System.Windows.Media.Animation.Storyboard>或<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A>方法中，時鐘的自動建立時間表的動畫並套用至其目標屬性。 如需範例，請參閱[How to： 建立屬性的動畫所使用的分鏡腳本](~/docs/framework/wpf/graphics-multimedia/how-to-animate-a-property-by-using-a-storyboard.md)和[如何： 以動畫顯示屬性而不使用分鏡腳本](~/docs/framework/wpf/graphics-multimedia/how-to-animate-a-property-without-using-a-storyboard.md)。  
  
 您也可以建立<xref:System.Windows.Media.Animation.Clock>明確地使用<xref:System.Windows.Media.Animation.Timeline.CreateClock%2A>方法。 需要大量效能的情況下，例如動畫執行大量的類似物件，管理您自己<xref:System.Windows.Media.Animation.Clock>使用可以提供的效能優勢。  
  
 在符合的結構的樹狀目錄中排列時鐘<xref:System.Windows.Media.Animation.Timeline>所建立的物件樹狀結構。 這類時間樹狀結構的根時鐘可以以互動方式操作 （暫停、 繼續、 已停止，依此類推） 藉由擷取其<xref:System.Windows.Media.Animation.Clock.Controller%2A>。 無法直接控制不是根時鐘。  
  
 一旦建立，時鐘不能修改 （但可以操作）。  
  
## <a name="using-a-timeline-as-a-timer"></a>使用時間表，做為計時器  
 與其相關聯的事件處理常式時，時間軸的時鐘會只進度或 (如果是<xref:System.Windows.Media.Animation.AnimationClock>物件) 相關聯的屬性。 因此 （和其他項目），不建議您改用<xref:System.Windows.Media.Animation.Timeline>做為計時器。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>在衍生的類別應實作<see cref="M:System.Windows.Media.Animation.Clock.GetCurrentTimeCore" />如果他們想要修改這個時鐘時間流動的方式。 在衍生的類別，可以藉由時鐘重複、 略過、 搜尋、 開始、 暫停、 繼續，或停止透過覆寫時，執行額外的工作<see cref="M:System.Windows.Media.Animation.Clock.DiscontinuousTimeMovement" />， <see cref="M:System.Windows.Media.Animation.Clock.SpeedChanged" />，和<see cref="M:System.Windows.Media.Animation.Clock.Stopped" />方法。</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal Clock (System.Windows.Media.Animation.Timeline timeline);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class System.Windows.Media.Animation.Timeline timeline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.#ctor(System.Windows.Media.Animation.Timeline)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; Clock(System::Windows::Media::Animation::Timeline ^ timeline);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="timeline" Type="System.Windows.Media.Animation.Timeline" />
      </Parameters>
      <Docs>
        <param name="timeline">應在其中建構這個時鐘的 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" />。 如果時鐘已經存在，就不會為任何子 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> 物件建立時鐘。</param>
        <summary>使用指定的 <see cref="T:System.Windows.Media.Animation.Clock" /> 做為範本，初始化 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> 類別的新執行個體。 新的 <see cref="T:System.Windows.Media.Animation.Clock" /> 物件沒有子系。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public event EventHandler Completed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Completed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.Completed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Completed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Completed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當這個時鐘完成播放時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個時鐘時鐘的樹狀結構的根時鐘，它已完成播放之後到達結束其使用中的持續期間 （其中包含重複） 和所有子系已達到其作用中的持續時間的結尾。 如果這個時鐘子時鐘，認定為完全結束播放時所屬到達時鐘樹狀結構的根時鐘結束其使用中的持續時間和其所有子時鐘已完成播放。  
  
 停止時鐘不會觸發已完成的事件，但前進到其填滿期間。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Controller">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockController Controller { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.ClockController Controller" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.Controller" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Controller As ClockController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::ClockController ^ Controller { System::Windows::Media::Animation::ClockController ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Windows.Media.Animation.ClockController" />，可用於啟動、暫停、繼續、搜尋、略過、停止或移除這個 <see cref="T:System.Windows.Media.Animation.Clock" />。</summary>
        <value>如果這是根時鐘則為 <see cref="T:System.Windows.Media.Animation.ClockController" />，否則為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只有根時鐘可以以互動方式控制。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Begin" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Pause" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Resume" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Stop" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Remove" />
      </Docs>
    </Member>
    <Member MemberName="CurrentGlobalSpeed">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; CurrentGlobalSpeed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;float64&gt; CurrentGlobalSpeed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentGlobalSpeed As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;double&gt; CurrentGlobalSpeed { Nullable&lt;double&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得時鐘目前行進速率，與實際時間相比較。</summary>
        <value>這個時鐘目前的行進速率，與實際時間相比較。 如果已停止時鐘，則這個屬性會傳回 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentGlobalSpeedInvalidated">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentGlobalSpeedInvalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentGlobalSpeedInvalidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CurrentGlobalSpeedInvalidated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CurrentGlobalSpeedInvalidated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在更新時鐘的速度時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 暫停、 繼續、 反轉、 加速、 減速、 搜尋、 停止或變更時鐘的互動速度使用<xref:System.Windows.Media.Animation.ClockController>觸發此事件。  
  
 雖然此事件發生時<xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A>屬性會變成無效，不一定表示屬性已變更。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
        <altmember cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio" />
        <altmember cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" />
        <altmember cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio" />
        <altmember cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio" />
      </Docs>
    </Member>
    <Member MemberName="CurrentGlobalTime">
      <MemberSignature Language="C#" Value="protected TimeSpan CurrentGlobalTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan CurrentGlobalTime" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentGlobalTime" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CurrentGlobalTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property TimeSpan CurrentGlobalTime { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前全域時間，由 [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] 計時系統建立。</summary>
        <value>[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] 計時系統的目前全域時間。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; CurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; CurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentIteration As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;int&gt; CurrentIteration { Nullable&lt;int&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個時鐘的目前反覆項目。</summary>
        <value>這個時鐘在其目前使用中週期內的目前反覆運算，如果時鐘已停止，則為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時鐘的第一個反覆項目有值為 1。  
  
 如果這個時鐘時間表具有<xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A>設定`true`，完整的反覆項目是由正向反向組所組成，不只是下列其中一種區段。  
  
 其目前的反覆項目，不論搜尋時鐘傳回其目前的反覆項目設為 1。 重新啟動時鐘也會傳回其目前的反覆項目設為 1。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" />
      </Docs>
    </Member>
    <Member MemberName="CurrentProgress">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; CurrentProgress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;float64&gt; CurrentProgress" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentProgress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentProgress As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;double&gt; CurrentProgress { Nullable&lt;double&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 在其目前反覆項目內的目前進度。</summary>
        <value>
          如果這個時鐘是 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" /> 則為 <see langword="null" />，如果這個時鐘在使用中且其 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> 的 <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> 是 <see cref="P:System.Windows.Duration.Forever" />，則為 0.0，否則為介於 0.0 與 1.0 之間的值，表示這個時鐘在其目前反覆項目內的目前進度。 值 0.0 表示沒有進度，而值 1.0 表示時鐘已到目前反覆運算的結尾。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性的值會指出<xref:System.Windows.Media.Animation.Clock.CurrentTime%2A>以<xref:System.Windows.Media.Animation.Timeline.Duration%2A>這個時鐘<xref:System.Windows.Media.Animation.Clock.Timeline%2A>。  
  
 是時鐘<xref:System.Windows.Media.Animation.ClockState.Filling>具有<xref:System.Windows.Media.Animation.Clock.CurrentProgress%2A>為 1.0。  
  
## <a name="using-a-timeline-as-a-timer"></a>使用時間表，做為計時器  
 與其相關聯的事件處理常式時，時間軸的時鐘會只進度或 (如果是<xref:System.Windows.Media.Animation.AnimationClock>物件) 相關聯的屬性。 因此 （和其他項目），不建議您改用<xref:System.Windows.Media.Animation.Timeline>做為計時器。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Animation.ClockState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As ClockState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::ClockState CurrentState { System::Windows::Media::Animation::ClockState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出時鐘目前為 <see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" /> 或 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />。</summary>
        <value>時鐘的目前狀態：<see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" /> 或 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 請注意時鐘的<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>屬性未告訴您是否已暫停。 若要判斷是否要暫停時鐘，請使用<xref:System.Windows.Media.Animation.Clock.IsPaused%2A>屬性。  
  
 <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated>當這個屬性的值變更時發生。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Media.Animation.Clock.CurrentStateInvalidated" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalTime" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="CurrentStateInvalidated">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentStateInvalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentStateInvalidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.CurrentStateInvalidated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CurrentStateInvalidated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CurrentStateInvalidated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>時鐘的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> 屬性更新時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated>事件，當您想要收到通知，如果時鐘啟動時，就會停止，或填滿。 <xref:System.Object>參數<xref:System.EventHandler>事件處理常式是<xref:System.Windows.Media.Animation.Clock>驗證為無效的狀態。  
  
 暫停<xref:System.Windows.Media.Animation.Clock>不會變更其<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>。 若要收到通知的時鐘會變成暫停時，要使用<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated>事件。  
  
 雖然此事件發生時<xref:System.Windows.Media.Animation.ClockState>會變成無效，不一定表示<xref:System.Windows.Media.Animation.ClockState>變更：<xref:System.Windows.Media.Animation.Clock>切換從<xref:System.Windows.Media.Animation.ClockState.Active>來<xref:System.Windows.Media.Animation.ClockState.Filling>然後再設回<xref:System.Windows.Media.Animation.ClockState.Active>在相同刻度將會引發此事件引發，但其<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>屬性實際上不會變更。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentState" />
        <altmember cref="T:System.Windows.Media.Animation.ClockState" />
        <altmember cref="E:System.Windows.Media.Animation.Clock.CurrentTimeInvalidated" />
      </Docs>
    </Member>
    <Member MemberName="CurrentTime">
      <MemberSignature Language="C#" Value="public Nullable&lt;TimeSpan&gt; CurrentTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; CurrentTime" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentTime As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;TimeSpan&gt; CurrentTime { Nullable&lt;TimeSpan&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個時鐘在其目前反覆項目內的目前時間。</summary>
        <value>
          如果這個時鐘是 <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" /> 則為 <see langword="null" />，否則為這個時鐘的目前時間。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="using-a-timeline-as-a-timer"></a>使用時間表，做為計時器  
 與其相關聯的事件處理常式時，時間軸的時鐘會只進度或 (如果是<xref:System.Windows.Media.Animation.AnimationClock>物件) 相關聯的屬性。 因此 （和其他項目），不建議您改用<xref:System.Windows.Media.Animation.Timeline>做為計時器。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" />
      </Docs>
    </Member>
    <Member MemberName="CurrentTimeInvalidated">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentTimeInvalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentTimeInvalidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.CurrentTimeInvalidated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CurrentTimeInvalidated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CurrentTimeInvalidated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當這個時鐘的 <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> 變成無效時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 時鐘的<xref:System.Windows.Media.Animation.Clock.CurrentTime%2A>失效時時鐘進行中。 下列互動作業也會觸發 CurrentTimeInvalidated 事件： <xref:System.Windows.Media.Animation.ClockController.Begin%2A>， <xref:System.Windows.Media.Animation.ClockController.SkipToFill%2A>， <xref:System.Windows.Media.Animation.ClockController.Seek%2A>， <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A>，和<xref:System.Windows.Media.Animation.ClockController.Stop%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscontinuousTimeMovement">
      <MemberSignature Language="C#" Value="protected virtual void DiscontinuousTimeMovement ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DiscontinuousTimeMovement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.DiscontinuousTimeMovement" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DiscontinuousTimeMovement ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DiscontinuousTimeMovement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中實作時，每當時鐘重複、略過或搜尋，就會叫用 (Invoke)。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCanSlip">
      <MemberSignature Language="C#" Value="protected virtual bool GetCanSlip ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetCanSlip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.GetCanSlip" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetCanSlip () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetCanSlip();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回值指出 <see cref="T:System.Windows.Media.Animation.Clock" /> 是否具有自己的外部時間來源，該來源可能需要與計時系統同步。</summary>
        <returns>如果 <see cref="T:System.Windows.Media.Animation.Clock" /> 有自己的外部時間來源，可能需要與計時系統同步，則傳回 **true**，否則傳回 **false**。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 媒體播放使用<xref:System.Windows.Media.MediaTimeline>內<xref:System.Windows.Media.Animation.Storyboard>是建立的範例<xref:System.Windows.Media.Animation.Clock>會具有外部時間來源 （例如視訊剪輯） 這可能需要與其他時間軸中的同步處理<xref:System.Windows.Media.Animation.Storyboard>。 如需詳細資訊，請參閱 <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentTimeCore">
      <MemberSignature Language="C#" Value="protected virtual TimeSpan GetCurrentTimeCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.TimeSpan GetCurrentTimeCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.GetCurrentTimeCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetCurrentTimeCore () As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual TimeSpan GetCurrentTimeCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得這個時鐘在其目前反覆項目內的目前時間。</summary>
        <returns>如果這個時鐘為使用中或填滿狀態則為這個時鐘的目前時間，否則為 <see cref="F:System.TimeSpan.Zero" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法用在實作<xref:System.Windows.Media.Animation.Clock.CurrentTime%2A>方法，且不應該直接從程式碼呼叫。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在衍生的類別應該覆寫這個方法，如果他們想要修改它們如何判定目前的時間。</para>
        </block>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      </Docs>
    </Member>
    <Member MemberName="HasControllableRoot">
      <MemberSignature Language="C#" Value="public bool HasControllableRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasControllableRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.HasControllableRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasControllableRoot As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasControllableRoot { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 是否為可控制之時鐘樹狀結構的一部分。</summary>
        <value>
          如果這個時鐘屬於時鐘樹狀結構且具有可控制的根時鐘，或這個時鐘本身就是可控制的根時鐘，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaused">
      <MemberSignature Language="C#" Value="public bool IsPaused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.IsPaused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaused { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，這個值表示這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 或任何其父代是否暫停。</summary>
        <value>
          如果這個 <see cref="T:System.Windows.Media.Animation.Clock" /> 或任何其父代暫停則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Pause" />
      </Docs>
    </Member>
    <Member MemberName="NaturalDuration">
      <MemberSignature Language="C#" Value="public System.Windows.Duration NaturalDuration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Duration NaturalDuration" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.NaturalDuration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NaturalDuration As Duration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Duration NaturalDuration { System::Windows::Duration get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Duration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個時鐘之 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> 的自然持續時間。</summary>
        <value>這個時鐘的自然持續時間，可由其 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> 決定。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如需自然持續期間的詳細資訊，請參閱<xref:System.Windows.Media.Animation.Timeline.GetNaturalDuration%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Timeline.GetNaturalDuration(System.Windows.Media.Animation.Clock)" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Clock Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Clock Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Clock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Clock ^ Parent { System::Windows::Media::Animation::Clock ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Clock</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得這個時鐘的父時鐘。</summary>
        <value>這個時鐘的父時鐘，如果這個時鐘是根時鐘，則為 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRequested">
      <MemberSignature Language="C#" Value="public event EventHandler RemoveRequested;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RemoveRequested" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.RemoveRequested" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RemoveRequested As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RemoveRequested;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>當在這個 <see cref="M:System.Windows.Media.Animation.ClockController.Remove" /> 或它的一個父時鐘上呼叫 <see cref="T:System.Windows.Media.Animation.Clock" /> 方法時發生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeedChanged">
      <MemberSignature Language="C#" Value="protected virtual void SpeedChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SpeedChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.SpeedChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SpeedChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SpeedChanged();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中實作時，每當時鐘啟動、略過、暫停、繼續或修改時鐘的 <see cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio" /> 時，就會叫用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stopped">
      <MemberSignature Language="C#" Value="protected virtual void Stopped ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Stopped() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.Stopped" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Stopped ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Stopped();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在衍生類別中實作時，每當使用 <see cref="M:System.Windows.Media.Animation.ClockController.Stop" /> 方法停止時鐘時，就會叫用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeline">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Timeline Timeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Timeline Timeline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.Timeline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timeline As Timeline" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Timeline ^ Timeline { System::Windows::Media::Animation::Timeline ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Timeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得在其中建立這個 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> 的 <see cref="T:System.Windows.Media.Animation.Clock" />。</summary>
        <value>在其中建立這個 <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> 的 <see cref="T:System.Windows.Media.Animation.Clock" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 修改時鐘的<xref:System.Windows.Media.MediaTimeline>不會更新時鐘; 您必須建立的新時鐘從修改<xref:System.Windows.Media.Animation.Timeline>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>