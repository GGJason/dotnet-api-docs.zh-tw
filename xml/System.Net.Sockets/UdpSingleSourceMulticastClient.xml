<Type Name="UdpSingleSourceMulticastClient" FullName="System.Net.Sockets.UdpSingleSourceMulticastClient">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="22d8e0a33fcc708ac83a1356d04077ab35d0449c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30460932" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UdpSingleSourceMulticastClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpSingleSourceMulticastClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpSingleSourceMulticastClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpSingleSourceMulticastClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpSingleSourceMulticastClient : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>單一來源的多點流量的用戶端接收器，也稱為特定來源多點傳送 (SSM，Source Specific Multicast)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必須知道的多點傳送的群組位址和寄件者來源位址。  
  
 除了接收多點傳送的資料來自特定寄件者<xref:System.Net.Sockets.UdpSingleSourceMulticastClient>用戶端也可以傳回給傳送者傳送單點傳播資料。  
  
 多個來源接收多點傳送或來源不事先知道時使用<xref:System.Net.Sockets.UdpSingleSourceMulticastClient>類別。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpSingleSourceMulticastClient (System.Net.IPAddress sourceAddress, System.Net.IPAddress groupAddress, int localPort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress sourceAddress, class System.Net.IPAddress groupAddress, int32 localPort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (sourceAddress As IPAddress, groupAddress As IPAddress, localPort As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpSingleSourceMulticastClient(System::Net::IPAddress ^ sourceAddress, System::Net::IPAddress ^ groupAddress, int localPort);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sourceAddress" Type="System.Net.IPAddress" />
        <Parameter Name="groupAddress" Type="System.Net.IPAddress" />
        <Parameter Name="localPort" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceAddress">此收件者要訂閱的寄件者來源位址。</param>
        <param name="groupAddress">此收件者要訂閱的多點傳送群組位址。</param>
        <param name="localPort">此收件者要繫結的本機連接埠。</param>
        <summary>建立新的 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> UDP 用戶端，用於訂閱群組位址和接收來自單一來源的資料包。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A>建構函式會將 UDP 多點傳送的通訊端關聯的群組位址與連接埠，但不會繫結或否則就會使用通訊端。  
  
 `groupAddress`參數可能是 IPv6 或 IPv4 多點傳送位址。 不過的位址系列`sourceAddress`和`groupAddress`參數必須相同。  
  
 `localPort`參數必須指定小於 1024 的連接埠。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="sourceAddress" /> 和 <paramref name="groupAddress" /> 必須屬於相同的位址家族。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceAddress" /> 是 null 參考 (在 Visual Basic 中為 Nothing)。  
  
 -或-  
  
 <paramref name="groupAddress" /> 是 null 參考 (在 Visual Basic 中為 Nothing)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="localPort" /> 小於 0  
  
 -或-  
  
 <paramref name="localPort" /> 大於 65,535。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="localPort" /> 小於 1024</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginJoinGroup">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginJoinGroup (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginJoinGroup(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginJoinGroup (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginJoinGroup(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">作業完成時要叫用的回呼方法。</param>
        <param name="state">要傳遞給這項作業之「回呼」<c></c>方法的選擇性狀態資訊。</param>
        <summary>繫結通訊端並開始加入多點傳送群組中的作業，以允許從單一來源位址接收資料包。</summary>
        <returns>傳回 <see cref="T:System.IAsyncResult" />。  
  
 參考這項作業的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup%2A>方法繫結的本機連接埠將 UDP 多點傳送的通訊端，而且聯結多點傳送的群組，以允許從單一來源位址接收資料包。 中指定多點傳送的群組位址、 單一來源位址和本機連接埠繫結至<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A>建構函式。  
  
 中指定的方法`callback`加入多點傳送的群組作業完成時，會叫用參數。  
  
 如果是由執行階段所需<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup%2A>方法也會執行原則檢查，確認允許用戶端存取多點傳送的群組。 如果用戶端不允許存取，<xref:System.Net.Sockets.SocketException>會擲回<xref:System.Net.Sockets.SocketError.AccessDenied>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">多點傳送群組已經加入，或加入作業目前正在進行中。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> 已經處置。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">嘗試存取通訊端時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveFromSource">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveFromSource (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceiveFromSource(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveFromSource (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveFromSource(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">要儲存已接收資料的緩衝區。</param>
        <param name="offset">距離應儲存資料之「緩衝區」<c></c>開頭的位移 (以位元組為單位)。</param>
        <param name="count">要接收並儲存在「緩衝區」<c></c>中的最大位元組數。</param>
        <param name="callback">作業完成時要叫用的回呼方法。</param>
        <param name="state">要傳遞給這項作業之「回呼」<c></c>方法的選擇性狀態資訊。</param>
        <summary>開始從已加入的多點傳送群組接收封包之作業，並在封包從指定的寄件者送達群組時，叫用指定的回呼。</summary>
        <returns>傳回 <see cref="T:System.IAsyncResult" />。  
  
 參考這項作業的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A>方法開始從單一傳送者的聯結多點傳送群組接收 UDP 封包的作業。 中指定本機連接埠、 多點傳送的群組和寄件者來源位址<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A>建構函式。 多點傳送的用戶端必須也完成聯結多點傳送群組。  
  
 中指定的方法`callback`收到封包時，會叫用參數。  
  
 很可能發生通訊端失敗的狀況，如果接收作業失敗，以同步方式，雖然這是不常見 udp。 如果發生通訊端失敗，<xref:System.Net.Sockets.SocketException>就會擲回。 收到的錯誤指定成員的身分<xref:System.Net.Sockets.SocketError>列舉型別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 是 null 參考 (在 Visual Basic 中為 Nothing)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 小於 0  
  
 -或-  
  
 <paramref name="offset" /> 大於 <paramref name="buffer" /> 的長度。  
  
 -或-  
  
 <paramref name="count" /> 小於 0  
  
 -或-  
  
 <paramref name="offset" /> 加上這個計數會大於 <paramref name="buffer" /> 的長度。</exception>
        <exception cref="T:System.InvalidOperationException">尚未聯結多點傳送群組。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> 已經處置。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">嘗試存取接收通訊端時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginSendToSource">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSendToSource (byte[] buffer, int offset, int count, int remotePort, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSendToSource(unsigned int8[] buffer, int32 offset, int32 count, int32 remotePort, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource(System.Byte[],System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSendToSource (buffer As Byte(), offset As Integer, count As Integer, remotePort As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSendToSource(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, int remotePort, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="remotePort" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">包含要傳送之資料的緩衝區。</param>
        <param name="offset">從「緩衝區」<c></c>開頭到讀取要傳送之資料的位移 (以位元組為單位)。</param>
        <param name="count">要從「緩衝區」<c></c>傳送的位元組數目。</param>
        <param name="remotePort">作為封包傳送目標的遠端連接埠。 遠端位置是由 <see cref="M:System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)" /> 建構函式所指定。</param>
        <param name="callback">作業完成時要叫用的回呼方法。</param>
        <param name="state">要傳遞給這項作業之「回呼」<c></c>方法的選擇性狀態資訊。</param>
        <summary>開始將單點傳播封包傳送到先前指定來源的作業。</summary>
        <returns>傳回 <see cref="T:System.IAsyncResult" />。  
  
 參考這項作業的 <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A>方法開始作業，將 UDP 封包傳送至先前指定的來源。  
  
 某些通訊協定會使用此資訊來流量控制，品質的服務統計資料或復原訊息一起傳遞。  
  
 中指定的方法`callback`已傳送封包時，會叫用參數。  
  
 用戶端必須已經完成聯結多點傳送群組。  
  
 如果在指定目的地連接埠`remotePort`參數是小於 1024<xref:System.Net.Sockets.SocketException>會擲回<xref:System.Net.Sockets.SocketError.AccessDenied>。  
  
 很可能發生通訊端失敗的狀況，如果傳送作業失敗，以同步方式，雖然這是不常見 udp。 如果發生通訊端失敗，<xref:System.Net.Sockets.SocketException>就會擲回。 收到的錯誤指定成員的身分<xref:System.Net.Sockets.SocketError>列舉型別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 是 null 參考 (在 Visual Basic 中為 Nothing)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 小於 0  
  
 -或-  
  
 <paramref name="offset" /> 大於 <paramref name="buffer" /> 的長度。  
  
 -或-  
  
 <paramref name="count" /> 小於 0  
  
 -或-  
  
 <paramref name="offset" /> 加上這個計數會大於 <paramref name="buffer" /> 的長度。  
  
 -或-  
  
 <paramref name="remotePort" /> 小於 0 或大於 65,535。</exception>
        <exception cref="T:System.InvalidOperationException">尚未聯結多點傳送群組。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> 已經處置。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">嘗試存取通訊端時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>離開多點傳送群組，並釋出目前的 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> 類別執行個體和基礎 <see cref="T:System.Net.Sockets.Socket" /> 使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> 使用完畢時，請呼叫 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient>。 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> 方法會將 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> 保留在無法使用的狀態。 在呼叫<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A>，您必須釋放所有參考<xref:System.Net.Sockets.UdpSingleSourceMulticastClient>讓記憶體回收行程可以回收記憶體的<xref:System.Net.Sockets.UdpSingleSourceMulticastClient>所佔用。  
  
 在您釋放最後一個 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose%2A> 參考之前，請務必呼叫 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient>。 否則工作窗格所使用的資源不會釋放，直到記憶體回收行程呼叫 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient> 物件的 <xref:System.Object.Finalize%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndJoinGroup">
      <MemberSignature Language="C#" Value="public void EndJoinGroup (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndJoinGroup(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndJoinGroup (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndJoinGroup(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">非同步加入作業的結果。</param>
        <summary>完成對多點傳送群組的非同步加入群組作業。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup%2A>方法完成的非同步通訊端與聯結多點傳送群組作業繫結。  
  
 如果是由執行階段所需<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup%2A>方法也會執行原則檢查，確認允許用戶端存取多點傳送的群組。 如果用戶端不允許存取，<xref:System.Net.Sockets.SocketException>會擲回<xref:System.Net.Sockets.SocketError.AccessDenied>。  
  
 如果執行 加入群組作業中，通訊端失敗<xref:System.Net.Sockets.SocketException>就會擲回。 收到的錯誤指定成員的身分<xref:System.Net.Sockets.SocketError>列舉型別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="result" /> 是 null 參考 (在 Visual Basic 中為 Nothing)。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> 已經處置。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">嘗試存取通訊端時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveFromSource">
      <MemberSignature Language="C#" Value="public int EndReceiveFromSource (IAsyncResult result, out int sourcePort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndReceiveFromSource(class System.IAsyncResult result, [out] int32&amp; sourcePort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource(System.IAsyncResult,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveFromSource (result As IAsyncResult, ByRef sourcePort As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndReceiveFromSource(IAsyncResult ^ result, [Runtime::InteropServices::Out] int % sourcePort);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="sourcePort" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result">非同步接收作業的結果。</param>
        <param name="sourcePort">接收到之封包的來源端點。</param>
        <summary>完成從已聯結之多點傳送群組接收封包的非同步作業，並提供接收到的資訊。</summary>
        <returns>傳回 <see cref="T:System.Int32" />。  
  
 傳遞至 <see cref="M:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法之 <paramref name="buffer" /> 參數中儲存的訊息長度，以位元組為單位。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource%2A>方法完成非同步作業以多點傳送群組中的單一來源接收的封包。  
  
 如果同時執行接收作業中，通訊端失敗<xref:System.Net.Sockets.SocketException>就會擲回。 收到的錯誤指定成員的身分<xref:System.Net.Sockets.SocketError>列舉型別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="result" /> 是 null 參考 (在 Visual Basic 中為 Nothing)。</exception>
        <exception cref="T:System.InvalidOperationException">尚未聯結多點傳送群組。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> 已經處置。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">嘗試存取通訊端時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSendToSource">
      <MemberSignature Language="C#" Value="public void EndSendToSource (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndSendToSource(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndSendToSource (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndSendToSource(IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">非同步傳送作業的結果。</param>
        <summary>完成傳送單點傳播封包至單一來源的作業。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource%2A>方法完成非同步作業以將封包傳送到先前指定的單一來源。  
  
 如果同時執行接收作業中，通訊端失敗<xref:System.Net.Sockets.SocketException>就會擲回。 收到的錯誤指定成員的身分<xref:System.Net.Sockets.SocketError>列舉型別。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="result" /> 是 null 參考 (在 Visual Basic 中為 Nothing)。</exception>
        <exception cref="T:System.InvalidOperationException">尚未聯結多點傳送群組。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> 已經處置。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">嘗試存取通訊端時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Net.Sockets.Socket" /> 的接收緩衝區大小 (以位元組為單位)，用於這個 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> 執行個體上多點傳送的接收作業。</summary>
        <value>傳回 <see cref="T:System.Int32" />。  
  
 接收緩衝區的大小，以位元組為單位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ReceiveBufferSize`屬性會取得或設定大小，以位元組為單位的接收緩衝區的基礎<xref:System.Net.Sockets.Socket>上多點傳送的接收作業所使用的<xref:System.Net.Sockets.UdpSingleSourceMulticastClient>執行個體。 具體來說，`ReceiveBufferSize`屬性會控制與堆疊使用的封包到達，但應用程式尚未呼叫時之緩衝區的大小<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A>方法。 如果這個緩衝區填滿，而且封包保留應用程式會呼叫之前進入<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A>和<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource%2A>會卸除舊的封包的方法。 應用程式將無法接收舊的封包，並呼叫時，會收到較新的封包<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A>方法。  
  
 在 Windows 上接收緩衝區的預設大小為 8,192。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的緩衝區大小小於 0。</exception>
        <exception cref="T:System.InvalidOperationException">尚未聯結多點傳送群組。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> 已經處置。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Net.Sockets.Socket" /> 的傳送緩衝區大小 (以位元組為單位)，用於這個 <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> 執行個體上多點傳送的傳送作業。</summary>
        <value>傳回 <see cref="T:System.Int32" />。  
  
 傳送緩衝區大小，以位元組為單位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 SendBufferSize 屬性取得或設定大小，以位元組為單位的傳送緩衝區基礎<xref:System.Net.Sockets.Socket>上多點傳送的傳送作業所使用的<xref:System.Net.Sockets.UdpSingleSourceMulticastClient>執行個體。  
  
 在 Mac OS X 上，<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A>屬性會控制多少位元組有可能在網路堆疊傳送等候緩衝區額外的呼叫之前<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A>方法開始失敗。 Mac OS X 上的應用程式可能需要顧慮這個屬性如果他們傳送大量的 UDP 封包在短時間範圍內。  
  
 在 Windows 中，呼叫<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A>方法會將較長的時間呼叫的值而定的回呼<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A>屬性傳送緩衝區已滿。 <xref:System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize%2A>屬性唯一傳送作業完成之前，使用者的緩衝區是否保持鎖定實體記憶體中的控制項。  
  
 在 Windows 上的傳送緩衝區的預設大小為 8,192。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的緩衝區大小小於 0。</exception>
        <exception cref="T:System.InvalidOperationException">尚未聯結多點傳送群組。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpSingleSourceMulticastClient" /> 已經處置。</exception>
      </Docs>
    </Member>
  </Members>
</Type>