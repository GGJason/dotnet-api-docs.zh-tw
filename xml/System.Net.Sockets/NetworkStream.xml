<Type Name="NetworkStream" FullName="System.Net.Sockets.NetworkStream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="76c14c9925529487197c61d1d85f1ea5aeaefc62" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39924738" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NetworkStream : System.IO.Stream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NetworkStream extends System.IO.Stream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.NetworkStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NetworkStream&#xA;Inherits Stream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NetworkStream : System::IO::Stream" />
  <TypeSignature Language="F#" Value="type NetworkStream = class&#xA;    inherit Stream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供基礎資料流以進行網路存取。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream>類別提供方法來傳送和接收資料，透過<xref:System.Net.Sockets.SocketType.Stream>處於封鎖模式通訊端。 如需有關封鎖與封鎖<xref:System.Net.Sockets.Socket>s，請參閱 <<c2> [ 使用非同步用戶端通訊端](~/docs/framework/network-programming/using-an-asynchronous-client-socket.md)。 您可以使用<xref:System.Net.Sockets.NetworkStream>這兩個同步和非同步資料傳輸的類別。 如需有關同步和非同步通訊的詳細資訊，請參閱 <<c0> [ 通訊端](~/docs/framework/network-programming/sockets.md)。  
  
 若要建立<xref:System.Net.Sockets.NetworkStream>，您必須提供連接<xref:System.Net.Sockets.Socket>。 您也可以指定哪些<xref:System.IO.FileAccess>權限<xref:System.Net.Sockets.NetworkStream>高於提供<xref:System.Net.Sockets.Socket>。 根據預設，關閉<xref:System.Net.Sockets.NetworkStream>不會關閉提供<xref:System.Net.Sockets.Socket>。 如果您想<xref:System.Net.Sockets.NetworkStream>能夠關閉所提供的權限<xref:System.Net.Sockets.Socket>，您必須指定`true`值的`ownsSocket`參數。  
  
 使用<xref:System.Net.Sockets.NetworkStream.Write%2A>和<xref:System.Net.Sockets.NetworkStream.Read%2A>方法簡單的單一執行緒同步封鎖的 I/O。 如果您想要處理您使用個別執行緒的 I/O，請考慮使用<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>並<xref:System.Net.Sockets.NetworkStream.EndWrite%2A>方法，或有<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>和<xref:System.Net.Sockets.NetworkStream.EndRead%2A>進行通訊的方法。  
  
 <xref:System.Net.Sockets.NetworkStream>不支援隨機存取的網路資料流。 值<xref:System.Net.Sockets.NetworkStream.CanSeek%2A>屬性，指出資料流是否支援搜尋，總是`false`; 讀取<xref:System.Net.Sockets.NetworkStream.Position%2A>屬性，讀取<xref:System.Net.Sockets.NetworkStream.Length%2A>屬性或呼叫<xref:System.Net.Sockets.NetworkStream.Seek%2A>方法會擲回<xref:System.NotSupportedException>.  
  
 讀取和寫入作業可以同時執行的執行個體上<xref:System.Net.Sockets.NetworkStream>類別，而不需要同步處理。 只要沒有 「 寫入 」 操作專用的執行緒和一個唯一的執行緒，讀取作業，讀取之間會有不互相干擾，就需要寫入執行緒與任何同步處理。  
  
   
  
## Examples  
 下列程式碼範例示範如何建立<xref:System.Net.Sockets.NetworkStream>從已連線<xref:System.Net.Sockets.SocketType.Stream><xref:System.Net.Sockets.Socket>並執行基本的同步封鎖 I/O。  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>建立 <see cref="T:System.Net.Sockets.NetworkStream" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream socket" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
      </Parameters>
      <Docs>
        <param name="socket">
          <see cref="T:System.Net.Sockets.Socket" />，<see cref="T:System.Net.Sockets.NetworkStream" /> 會利用它來傳送和接收資料。</param>
        <summary>為指定的 <see cref="T:System.Net.Sockets.NetworkStream" /> 建立 <see cref="T:System.Net.Sockets.Socket" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream>會建立指定的讀取/寫入存取<xref:System.Net.Sockets.Socket>。 <xref:System.Net.Sockets.NetworkStream>並未擁有基礎<xref:System.Net.Sockets.Socket>，因此呼叫<xref:System.Net.Sockets.NetworkStream.Close%2A>方法，不會關閉<xref:System.Net.Sockets.Socket>。  
  
   
  
## Examples  
 下列程式碼範例說明如何建立<xref:System.Net.Sockets.NetworkStream>與<xref:System.Net.Sockets.Socket>。  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="socket" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="socket" /> 參數未連接。  
  
-或- 
<paramref name="socket" /> 參數的 <see cref="P:System.Net.Sockets.Socket.SocketType" /> 屬性不是 <see cref="F:System.Net.Sockets.SocketType.Stream" />。  
  
-或- 
<paramref name="socket" /> 參數處於未封鎖的狀態。</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, bool ownsSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, bool ownsSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, bool ownsSocket);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket * bool -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream (socket, ownsSocket)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="ownsSocket" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="socket">
          <see cref="T:System.Net.Sockets.Socket" />，<see cref="T:System.Net.Sockets.NetworkStream" /> 會利用它來傳送和接收資料。</param>
        <param name="ownsSocket">設定為 <see langword="true" />，表示 <see cref="T:System.Net.Sockets.NetworkStream" /> 將取得 <see cref="T:System.Net.Sockets.Socket" /> 的擁有權，否則為 <see langword="false" />。</param>
        <summary>使用指定的 <see cref="T:System.Net.Sockets.NetworkStream" /> 擁有權，為指定的 <see cref="T:System.Net.Sockets.Socket" /> 初始化 <see cref="T:System.Net.Sockets.Socket" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream>會建立指定的讀取/寫入存取<xref:System.Net.Sockets.Socket>。 如果值`ownsSocket`參數是`true`，則<xref:System.Net.Sockets.NetworkStream>會取得擁有權的基礎<xref:System.Net.Sockets.Socket>，然後呼叫<xref:System.Net.Sockets.NetworkStream.Close%2A>方法也會關閉基礎<xref:System.Net.Sockets.Socket>。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Net.Sockets.NetworkStream>的擁有權與<xref:System.Net.Sockets.Socket>。  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="socket" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="socket" /> 參數未連接。  
  
-或- 
<paramref name="socket" /> 參數的 <see cref="P:System.Net.Sockets.Socket.SocketType" /> 屬性值不是 <see cref="F:System.Net.Sockets.SocketType.Stream" />。  
  
-或- 
<paramref name="socket" /> 參數處於未封鎖的狀態。</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket * System.IO.FileAccess -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream (socket, access)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="socket">
          <see cref="T:System.Net.Sockets.Socket" />，<see cref="T:System.Net.Sockets.NetworkStream" /> 會利用它來傳送和接收資料。</param>
        <param name="access">
          <see cref="T:System.IO.FileAccess" /> 值的位元組合，指定透過所提供之 <see cref="T:System.Net.Sockets.NetworkStream" /> 授與 <see cref="T:System.Net.Sockets.Socket" /> 的存取類型。</param>
        <summary>使用指定的存取權限，建立指定 <see cref="T:System.Net.Sockets.NetworkStream" /> 的 <see cref="T:System.Net.Sockets.Socket" /> 類別新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream>建立具有指定的存取權指定<xref:System.Net.Sockets.Socket>。 使用這個建構函式，<xref:System.Net.Sockets.NetworkStream>並未擁有基礎<xref:System.Net.Sockets.Socket>，因此呼叫<xref:System.Net.Sockets.NetworkStream.Close%2A>方法不會關閉基礎<xref:System.Net.Sockets.Socket>。  
  
 `access`參數集<xref:System.Net.Sockets.NetworkStream.CanRead%2A>並<xref:System.Net.Sockets.NetworkStream.CanWrite%2A>的屬性<xref:System.Net.Sockets.NetworkStream>。 如果您指定<xref:System.IO.FileAccess.Write>，則<xref:System.Net.Sockets.NetworkStream>可讓呼叫<xref:System.Net.Sockets.NetworkStream.Write%2A>方法。 如果您指定<xref:System.IO.FileAccess.Read>，則<xref:System.Net.Sockets.NetworkStream>可讓呼叫<xref:System.Net.Sockets.NetworkStream.Read%2A>方法。 如果您指定<xref:System.IO.FileAccess.ReadWrite>，允許兩個方法呼叫。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Net.Sockets.NetworkStream>能夠讀取和寫入<xref:System.Net.Sockets.Socket>。  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#1)]
 [!code-vb[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="socket" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="socket" /> 參數未連接。  
  
-或- 
<paramref name="socket" /> 參數的 <see cref="P:System.Net.Sockets.Socket.SocketType" /> 屬性不是 <see cref="F:System.Net.Sockets.SocketType.Stream" />。  
  
-或- 
<paramref name="socket" /> 參數處於未封鎖的狀態。</exception>
        <altmember cref="T:System.IO.FileAccess" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, System.IO.FileAccess access, bool ownsSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, valuetype System.IO.FileAccess access, bool ownsSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, System::IO::FileAccess access, bool ownsSocket);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket * System.IO.FileAccess * bool -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream (socket, access, ownsSocket)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="ownsSocket" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="socket">
          <see cref="T:System.Net.Sockets.Socket" />，<see cref="T:System.Net.Sockets.NetworkStream" /> 會利用它來傳送和接收資料。</param>
        <param name="access">
          <see cref="T:System.IO.FileAccess" /> 值的位元組合，指定存取的類型；這個存取會指定給提供的 <see cref="T:System.Net.Sockets.NetworkStream" /> 上的 <see cref="T:System.Net.Sockets.Socket" />。</param>
        <param name="ownsSocket">設定為 <see langword="true" />，表示 <see cref="T:System.Net.Sockets.NetworkStream" /> 將取得 <see cref="T:System.Net.Sockets.Socket" /> 的擁有權，否則為 <see langword="false" />。</param>
        <summary>使用指定的存取權限和指定的 <see cref="T:System.Net.Sockets.NetworkStream" /> 擁有權，建立指定 <see cref="T:System.Net.Sockets.Socket" /> 的 <see cref="T:System.Net.Sockets.Socket" /> 類別新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream>會建立指定的讀取/寫入存取<xref:System.Net.Sockets.Socket>。 如果值`ownsSocket`參數是`true`，則<xref:System.Net.Sockets.NetworkStream>會取得擁有權的基礎<xref:System.Net.Sockets.Socket>，然後呼叫<xref:System.Net.Sockets.NetworkStream.Close%2A>方法也會關閉基礎<xref:System.Net.Sockets.Socket>。  
  
 `access`參數集<xref:System.Net.Sockets.NetworkStream.CanRead%2A>並<xref:System.Net.Sockets.NetworkStream.CanWrite%2A>的屬性<xref:System.Net.Sockets.NetworkStream>。 如果您指定<xref:System.IO.FileAccess.Write>，則<xref:System.Net.Sockets.NetworkStream>可讓呼叫<xref:System.Net.Sockets.NetworkStream.Write%2A>方法。 如果您指定<xref:System.IO.FileAccess.Read>，則<xref:System.Net.Sockets.NetworkStream>可讓呼叫<xref:System.Net.Sockets.NetworkStream.Read%2A>方法。 如果您指定<xref:System.IO.FileAccess.ReadWrite>，允許兩個方法呼叫。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Net.Sockets.NetworkStream>能夠讀取和寫入<xref:System.Net.Sockets.Socket>。 擁有權<xref:System.Net.Sockets.Socket>提供給這<xref:System.Net.Sockets.NetworkStream>藉由指定`true`如`ownsSocket`參數。  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#1)]
 [!code-vb[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="socket" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="socket" /> 參數未連接。  
  
-或- 
<paramref name="socket" /> 參數的 <see cref="P:System.Net.Sockets.Socket.SocketType" /> 屬性不是 <see cref="F:System.Net.Sockets.SocketType.Stream" />。  
  
-或- 
<paramref name="socket" /> 參數處於未封鎖的狀態。</exception>
        <altmember cref="T:System.IO.FileAccess" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int size, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 size, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginRead (buffer As Byte(), offset As Integer, size As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="networkStream.BeginRead (buffer, offset, size, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <see cref="T:System.Byte" /> 型別的陣列，這是存放讀取自 <see cref="T:System.Net.Sockets.NetworkStream" /> 的資料的記憶體位置。</param>
        <param name="offset">
          <c>buffe</c> 中的位置，開始將資料儲存至其中。</param>
        <param name="size">要從 <see cref="T:System.Net.Sockets.NetworkStream" /> 讀取的位元組數。</param>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> 委派，會在 <see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 完成時加以執行。</param>
        <param name="state">物件，包含任何額外的使用者定義資料。</param>
        <summary>開始從 <see cref="T:System.Net.Sockets.NetworkStream" /> 進行非同步讀取。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" />，表示非同步呼叫。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>方法會開始以非同步方式讀取連入的網路緩衝區中的資料。 呼叫<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>方法可讓您能夠接收不同的執行緒內的資料。  
  
 您必須建立回呼方法可實作<xref:System.AsyncCallback>委派，並將其名稱來傳遞<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>方法。 至少，您`state`參數必須包含<xref:System.Net.Sockets.NetworkStream>。 因為您會想要取得已接收的資料，您的回呼方法中，您應該建立小型的類別或結構存放讀取的緩衝區和其他有用的資訊。 若要將結構或類別執行個體傳遞<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>方法，透過`state`參數。  
  
 您的回呼方法應該呼叫<xref:System.Net.Sockets.NetworkStream.EndRead%2A>方法。 當您的應用程式呼叫<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>，系統會等候，直到收到資料或發生錯誤，然後系統會使用個別的執行緒來執行指定的回呼方法和上的區塊<xref:System.Net.Sockets.NetworkStream.EndRead%2A>直到提供<xref:System.Net.Sockets.NetworkStream>讀取資料或擲回例外狀況。 如果您想封鎖之後呼叫的原始執行緒<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>方法，請使用<xref:System.Threading.WaitHandle.WaitOne%2A>方法。 呼叫<xref:System.Threading.EventWaitHandle.Set%2A>在回呼方法，當您想要繼續執行的原始執行緒時。 如需撰寫回呼方法的詳細資訊，請參閱 <<c0> [ 封送處理為回呼方法的委派](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。  
  
 <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>方法會讀取可供使用，最多所指定的位元組數目的資料量`size`參數。  
  
> [!NOTE]
>  如果您收到<xref:System.IO.IOException>，檢查<xref:System.Exception.InnerException%2A>屬性來判斷如果它因<xref:System.Net.Sockets.SocketException>。 如果是，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A>屬性取得特定的錯誤碼，並參照[Windows Sockets 第 2 版 API 錯誤碼](/windows/desktop/winsock/windows-sockets-error-codes-2)錯誤的詳細描述的文件。  
  
 讀取和寫入作業可以同時執行的執行個體上<xref:System.Net.Sockets.NetworkStream>類別，而不需要同步處理。 只要沒有 「 寫入 」 操作專用的執行緒和一個唯一的執行緒，讀取作業，讀取之間會有不互相干擾，就需要寫入執行緒與任何同步處理。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>從網路資料流，以非同步方式讀取資料。 `myReadCallBack`方法實作<xref:System.AsyncCallback>委派，而且由系統呼叫時<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>傳回。  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 參數小於 0。  
  
-或- 
<paramref name="offset" /> 參數大於 <paramref name="buffer" /> 參數的長度。  
  
-或- 
<paramref name="size" /> 小於 0。  
  
-或- 
<paramref name="size" /> 大於 <paramref name="buffer" /> 的長度減去 <paramref name="offset" /> 參數值。</exception>
        <exception cref="T:System.IO.IOException">基礎 <see cref="T:System.Net.Sockets.Socket" /> 已經關閉。  
  
-或- 
從網路讀取時發生失敗。  
  
-或- 
存取通訊端時發生錯誤。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> 已關閉。</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int size, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 size, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginWrite (buffer As Byte(), offset As Integer, size As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="networkStream.BeginWrite (buffer, offset, size, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <see cref="T:System.Byte" /> 型別的陣列，包含要寫入至 <see cref="T:System.Net.Sockets.NetworkStream" /> 的資料。</param>
        <param name="offset">
          <c>buffe</c> 中的位置，要從此處開始傳送資料。</param>
        <param name="size">要寫入至 <see cref="T:System.Net.Sockets.NetworkStream" /> 的位元組數。</param>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> 委派，會在 <see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 完成時加以執行。</param>
        <param name="state">物件，包含任何額外的使用者定義資料。</param>
        <summary>開始非同步寫入資料流。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" />，表示非同步呼叫。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>方法會啟動非同步傳送作業至遠端主機。 呼叫<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>方法可讓您能夠傳送不同的執行緒中的資料。  
  
 您必須建立回呼方法可實作<xref:System.AsyncCallback>委派，並將其名稱來傳遞<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>方法。 至少，您`state`參數必須包含<xref:System.Net.Sockets.NetworkStream>。 如果回呼需要更多的資訊時，您可以建立的小型類別或結構以容納<xref:System.Net.Sockets.NetworkStream>和其他必要的資訊。 若要將結構或類別執行個體傳遞<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>方法，透過`state`參數。  
  
 您的回呼方法應該實作<xref:System.Net.Sockets.NetworkStream.EndWrite%2A>方法。 當您的應用程式呼叫<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>，系統會使用個別的執行緒來執行指定的回呼方法，並封鎖<xref:System.Net.Sockets.NetworkStream.EndWrite%2A>直到<xref:System.Net.Sockets.NetworkStream>傳送要求的位元組數目，或擲回例外狀況。 如果您想封鎖之後呼叫的原始執行緒<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>方法，請使用<xref:System.Threading.WaitHandle.WaitOne%2A>方法。 呼叫<xref:System.Threading.EventWaitHandle.Set%2A>在回呼方法，當您想要繼續執行的原始執行緒時。 如需撰寫回呼方法的詳細資訊，請參閱 <<c0> [ 封送處理為回呼方法的委派](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)。  
  
> [!NOTE]
>  如果您收到<xref:System.IO.IOException>，檢查<xref:System.Exception.InnerException%2A>屬性來判斷如果它因<xref:System.Net.Sockets.SocketException>。 如果是，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A>屬性取得特定的錯誤碼，並參照[Windows Sockets 第 2 版 API 錯誤碼](/windows/desktop/winsock/windows-sockets-error-codes-2)錯誤的詳細描述的文件。  
  
 讀取和寫入作業可以同時執行的執行個體上<xref:System.Net.Sockets.NetworkStream>類別，而不需要同步處理。 只要沒有 「 寫入 」 操作專用的執行緒和一個唯一的執行緒，讀取作業，讀取之間會有不互相干擾，就需要寫入執行緒與任何同步處理。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>將資料以非同步方式寫入的網路資料流。 `myWriteCallBack`方法實作<xref:System.AsyncCallback>委派，而且由系統呼叫時<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>傳回。  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 參數小於 0。  
  
-或- 
<paramref name="offset" /> 參數大於 <paramref name="buffer" /> 的長度。  
  
-或- 
<paramref name="size" /> 參數小於 0。  
  
-或- 
<paramref name="size" /> 參數大於 <paramref name="buffer" /> 的長度減去 <paramref name="offset" /> 參數值。</exception>
        <exception cref="T:System.IO.IOException">基礎 <see cref="T:System.Net.Sockets.Socket" /> 已經關閉。  
  
-或- 
寫入網路時發生失敗。  
  
-或- 
存取通訊端時發生錯誤。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> 已關閉。</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Net.Sockets.NetworkStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Net.Sockets.NetworkStream" /> 是否支援讀取。</summary>
        <value>如果可以從資料流讀取資料，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Net.Sockets.NetworkStream.CanRead%2A>已`true`，<xref:System.Net.Sockets.NetworkStream>可讓呼叫<xref:System.Net.Sockets.NetworkStream.Read%2A>方法。 提供適當<xref:System.IO.FileAccess>列舉值來設定的可讀性和可寫性的建構函式中<xref:System.Net.Sockets.NetworkStream>。 <xref:System.Net.Sockets.NetworkStream.CanRead%2A>屬性時，會設定<xref:System.Net.Sockets.NetworkStream>初始化。  
  
   
  
## Examples  
 下列程式碼範例會檢查<xref:System.Net.Sockets.NetworkStream.CanRead%2A>來確認<xref:System.Net.Sockets.NetworkStream>讀取。 然後執行讀取的作業上<xref:System.Net.Sockets.NetworkStream>。  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.Readable" />
        <altmember cref="T:System.IO.FileAccess" />
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Net.Sockets.NetworkStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出資料流是否支援搜尋。 目前不支援這個屬性。這個屬性永遠會傳回 <see langword="false" />。</summary>
        <value>
          <see langword="false" /> 永遠表示 <see cref="T:System.Net.Sockets.NetworkStream" /> 無法搜尋資料流中的特定位置。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanTimeout : bool" Usage="System.Net.Sockets.NetworkStream.CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指出逾時屬性是否適用於 <see cref="T:System.Net.Sockets.NetworkStream" />。</summary>
        <value>所有情況下都是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性是存在，因為它繼承自<xref:System.IO.Stream>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Net.Sockets.NetworkStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Net.Sockets.NetworkStream" /> 是否支援寫入。</summary>
        <value>如果可以寫入資料至 <see cref="T:System.Net.Sockets.NetworkStream" />，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Net.Sockets.NetworkStream.CanWrite%2A>已`true`，<xref:System.Net.Sockets.NetworkStream>可讓呼叫<xref:System.Net.Sockets.NetworkStream.Write%2A>方法。 提供適當<xref:System.IO.FileAccess>列舉值來設定的可讀性和可寫性的建構函式中<xref:System.Net.Sockets.NetworkStream>。 <xref:System.Net.Sockets.NetworkStream.CanWrite%2A>屬性時，會設定<xref:System.Net.Sockets.NetworkStream>初始化。  
  
   
  
## Examples  
 下列程式碼範例會檢查<xref:System.Net.Sockets.NetworkStream.CanWrite%2A>來確認<xref:System.Net.Sockets.NetworkStream>是可寫入。 然後執行寫入作業上<xref:System.Net.Sockets.NetworkStream>。  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
        <altmember cref="T:System.IO.FileAccess" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="networkStream.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (timeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close(int timeout);" />
      <MemberSignature Language="F#" Value="override this.Close : int -&gt; unit" Usage="networkStream.Close timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="timeout">32 位元帶正負號的整數，其指定在關閉之前等待傳送剩餘資料的毫秒數。</param>
        <summary>在等待了指定的時間以允許傳送資料後，關閉 <see cref="T:System.Net.Sockets.NetworkStream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.Close%2A>方法會釋放相關聯的非受控和受控資源<xref:System.Net.Sockets.NetworkStream>。 如果<xref:System.Net.Sockets.NetworkStream>擁有基礎<xref:System.Net.Sockets.Socket>，它也會關閉。  
  
 如果<xref:System.Net.Sockets.NetworkStream>與相關聯<xref:System.Net.Sockets.TcpClient>，則<xref:System.Net.Sockets.NetworkStream.Close%2A>方法會關閉 TCP 連線，但未處置相關聯的<xref:System.Net.Sockets.TcpClient>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> 參數小於 -1。</exception>
      </Docs>
    </Member>
    <Member MemberName="DataAvailable">
      <MemberSignature Language="C#" Value="public virtual bool DataAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DataAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.DataAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DataAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool DataAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.DataAvailable : bool" Usage="System.Net.Sockets.NetworkStream.DataAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Net.Sockets.NetworkStream" /> 上的資料是否可供讀取。</summary>
        <value>如果資料流上的資料可供讀取，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Net.Sockets.NetworkStream.DataAvailable%2A>屬性來判斷資料是否可供讀取。 如果<xref:System.Net.Sockets.NetworkStream.DataAvailable%2A>已`true`，以呼叫<xref:System.Net.Sockets.NetworkStream.Read%2A>會立即傳回。 如果遠端主機關機或關閉連接，<xref:System.Net.Sockets.NetworkStream.DataAvailable%2A>可能會擲回<xref:System.Net.Sockets.SocketException>。  
  
   
  
## Examples  
 下列程式碼範例會從讀取<xref:System.Net.Sockets.NetworkStream>，只要資料可供使用。  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> 已關閉。</exception>
        <exception cref="T:System.IO.IOException">基礎 <see cref="T:System.Net.Sockets.Socket" /> 已經關閉。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">您可以使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 屬性取得特定的錯誤碼，並參閱 <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets 第 2 版 API 錯誤碼</see>文件，以取得錯誤的詳細描述。</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="networkStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
        <summary>釋放 <see cref="T:System.Net.Sockets.NetworkStream" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會呼叫公用`Dispose`方法和<xref:System.Object.Finalize%2A>方法。 `Dispose` 叫用受保護`Dispose(Boolean)`方法`disposing`參數設為`true`。 <xref:System.Object.Finalize%2A> 叫用`Dispose`具有`disposing`設定為`false`。  
  
 `disposing` 參數為 `true` 時，這個方法會釋放 <xref:System.Net.Sockets.NetworkStream> 參考的任何 Managed 物件所掌握的資源。 這個方法會叫用每個參考物件的 `Dispose` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> 可以多次呼叫的其他物件。覆寫 <see langword="Dispose(Boolean)" /> 時，請小心不要參考到先前已在對 <see langword="Dispose" /> 的早期呼叫中被處置 (Dispose) 的物件。如需有關如何實作<see langword="Dispose(Boolean)" />，請參閱 &lt;&lt;c2&gt; [ 實作 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。如需詳細資訊<see langword="Dispose" />和<see cref="M:System.Object.Finalize" />，請參閱[清除 Unmanaged 資源總](~/docs/standard/garbage-collection/unmanaged.md)並[覆寫 Finalize 方法](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndRead : IAsyncResult -&gt; int" Usage="networkStream.EndRead asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" />，表示非同步呼叫。</param>
        <summary>處理非同步讀取的結束。</summary>
        <returns>從 <see cref="T:System.Net.Sockets.NetworkStream" /> 讀取的位元組數。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.EndRead%2A>方法完成非同步的讀取的作業，以啟動<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>方法。  
  
 然後再呼叫<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>，您必須建立實作的回呼方法<xref:System.AsyncCallback>委派。 這個回呼方法會在個別的執行緒中執行之後, 系統便會呼叫<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>傳回。 回呼方法必須接受<xref:System.IAsyncResult>傳回<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>做為參數的方法。  
  
 在回呼方法中，呼叫<xref:System.IAsyncResult.AsyncState%2A>的屬性<xref:System.IAsyncResult>取得狀態物件傳遞至<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>方法。 擷取接收<xref:System.Net.Sockets.NetworkStream>從這個狀態物件。 取得之後<xref:System.Net.Sockets.NetworkStream>，呼叫<xref:System.Net.Sockets.NetworkStream.EndRead%2A>方法成功完成讀取的作業，並傳回讀取的位元組數目。  
  
 <xref:System.Net.Sockets.NetworkStream.EndRead%2A>方法會封鎖直到資料可供使用。 <xref:System.Net.Sockets.NetworkStream.EndRead%2A>方法會讀取位於不超過指定的位元組數目的資料量`size`參數<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>方法。 如果遠端主機已關閉<xref:System.Net.Sockets.Socket>已經收到連線並將所有可用的資料，<xref:System.Net.Sockets.NetworkStream.EndRead%2A>方法立即完成，並傳回零個位元組。  
  
 若要取得已接收的資料，請呼叫<xref:System.IAsyncResult.AsyncState%2A>屬性<xref:System.IAsyncResult>，並將解壓縮所產生的狀態物件中所含的緩衝區。  
  
> [!NOTE]
>  如果您收到<xref:System.IO.IOException>，檢查<xref:System.Exception.InnerException%2A>屬性來判斷如果它因<xref:System.Net.Sockets.SocketException>。 如果是，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A>屬性取得特定的錯誤碼，並參照[Windows Sockets 第 2 版 API 錯誤碼](/windows/desktop/winsock/windows-sockets-error-codes-2)錯誤的詳細描述的文件。  
  
   
  
## Examples  
 在下列程式碼範例中，`myReadCallback`提供給<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>做為回呼方法。 <xref:System.Net.Sockets.NetworkStream.EndRead%2A> 在中實作`myReadCallback`來完成非同步讀取呼叫啟動<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>。  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#5)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#5)]
 [!code-vb[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">基礎 <see cref="T:System.Net.Sockets.Socket" /> 已經關閉。  
  
-或- 
存取通訊端時發生錯誤。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> 已關閉。</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndWrite : IAsyncResult -&gt; unit" Usage="networkStream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" />，表示非同步呼叫。</param>
        <summary>處理非同步寫入的結束。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> 完成非同步傳送作業中啟動<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>。  
  
 然後再呼叫<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>，您必須建立實作的回呼方法<xref:System.AsyncCallback>委派。 這個回呼方法會在個別的執行緒中執行之後, 系統便會呼叫<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>傳回。 回呼方法必須接受<xref:System.IAsyncResult>傳回<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>做為參數的方法。  
  
 在回呼方法中，呼叫<xref:System.IAsyncResult.AsyncState%2A>的屬性`IAsyncResult`參數來取得<xref:System.Net.Sockets.NetworkStream>。 取得之後<xref:System.Net.Sockets.NetworkStream>，您可以呼叫<xref:System.Net.Sockets.NetworkStream.EndWrite%2A>方法成功完成傳送作業，並傳回傳送的位元組數目。  
  
 <xref:System.Net.Sockets.NetworkStream.EndWrite%2A>方法封鎖，直到傳送要求的位元組數目。  
  
> [!NOTE]
>  如果您收到<xref:System.IO.IOException>，檢查<xref:System.Exception.InnerException%2A>屬性來判斷如果它因<xref:System.Net.Sockets.SocketException>。 如果是，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A>屬性取得特定的錯誤碼，並參照[Windows Sockets 第 2 版 API 錯誤碼](/windows/desktop/winsock/windows-sockets-error-codes-2)錯誤的詳細描述的文件。  
  
   
  
## Examples  
 在下列程式碼範例中，`myWriteCallback`提供給<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>做為回呼方法。 <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> 在中實作`myWriteCallback`完成啟動的非同步寫入呼叫<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>。  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">基礎 <see cref="T:System.Net.Sockets.Socket" /> 已經關閉。  
  
-或- 
寫入網路時發生錯誤。  
  
-或- 
存取通訊端時發生錯誤。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> 已關閉。</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NetworkStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NetworkStream ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="networkStream.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>釋放 <see cref="T:System.Net.Sockets.NetworkStream" /> 所使用的所有資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法覆寫 <xref:System.Object.Finalize%2A?displayProperty=nameWithType>。 應用程式程式碼不應該呼叫這個方法。物件的<xref:System.Object.Finalize%2A>方法會自動叫用記憶體回收期間，除非呼叫已停用記憶體回收行程的最終處理<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。  
  
 如需使用 Finalize 方法的詳細資訊，請參閱[Finalize 方法和解構函式](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)，[清除 Unmanaged 資源總](~/docs/standard/garbage-collection/unmanaged.md)，並[覆寫 Finalize 方法](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="networkStream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除資料流的資料。 這個方法是保留供日後使用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.Flush%2A>方法實作<xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType>方法，但是因為<xref:System.Net.Sockets.NetworkStream>是未經緩衝處理，它就不會影響網路資料流。 呼叫<xref:System.Net.Sockets.NetworkStream.Flush%2A>方法不會擲回例外狀況。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="networkStream.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">用來傳播應該取消這項作業之通知的取消語彙基元。</param>
        <summary>以非同步作業的方式，清除資料流的資料。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task" />。  
  
工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task>物件會完成之後已排清資料的資料流從<xref:System.Net.Sockets.NetworkStream>執行個體。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Net.Sockets.NetworkStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得資料流上可以使用之資料的長度。 這個屬性目前不受支援，而且永遠會擲回 <see cref="T:System.NotSupportedException" />。</summary>
        <value>資料流上可以使用之資料的長度。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">對這個屬性的任何使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Net.Sockets.NetworkStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定資料流中目前的位置。 這個屬性目前不受支援，而且永遠會擲回 <see cref="T:System.NotSupportedException" />。</summary>
        <value>在資料流中的目前位置。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">對這個屬性的任何使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read([out] unsigned int8[] buffer, int32 offset, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, size As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="networkStream.Read (buffer, offset, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <see cref="T:System.Byte" /> 型別的陣列，這是存放讀取自 <see cref="T:System.Net.Sockets.NetworkStream" /> 的資料的記憶體位置。</param>
        <param name="offset">
          <c>buffe</c> 中的位置，開始將資料儲存至其中。</param>
        <param name="size">要從 <see cref="T:System.Net.Sockets.NetworkStream" /> 讀取的位元組數。</param>
        <summary>從 <see cref="T:System.Net.Sockets.NetworkStream" /> 讀取資料。</summary>
        <returns>從 <see cref="T:System.Net.Sockets.NetworkStream" /> 讀取的位元組數，如關閉通訊端則為 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會讀取資料到`buffer`參數並傳回成功讀取的位元組數目。 如果已關閉通訊端，<xref:System.Net.Sockets.NetworkStream.Read%2A>方法會傳回 0。 <xref:System.Net.Sockets.NetworkStream.Read%2A>作業會讀取可供使用，最多所指定的位元組數目的資料量`size`參數。 如果遠端主機關閉連線，且已收到所有可用的資料，<xref:System.Net.Sockets.NetworkStream.Read%2A>方法會立即完成，並傳回零個位元組。  
  
> [!NOTE]
>  檢查是否<xref:System.Net.Sockets.NetworkStream>是可讀取呼叫<xref:System.Net.Sockets.NetworkStream.CanRead%2A>屬性。 如果您嘗試讀取<xref:System.Net.Sockets.NetworkStream>不是可讀取，就會發生<xref:System.IO.IOException>。  
  
> [!NOTE]
>  如果您收到<xref:System.IO.IOException>，檢查<xref:System.Exception.InnerException%2A>屬性來判斷如果它因<xref:System.Net.Sockets.SocketException>。 如果是，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A>屬性取得特定的錯誤碼，並參照[Windows Sockets 第 2 版 API 錯誤碼](/windows/desktop/winsock/windows-sockets-error-codes-2)錯誤的詳細描述的文件。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Net.Sockets.NetworkStream.DataAvailable%2A>來判斷資料是否可供讀取。 如果資料可供使用，它會讀取從<xref:System.Net.Sockets.NetworkStream>。  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 參數小於 0。  
  
-或- 
<paramref name="offset" /> 參數大於 <paramref name="buffer" /> 的長度。  
  
-或- 
<paramref name="size" /> 參數小於 0。  
  
-或- 
<paramref name="size" /> 參數大於 <paramref name="buffer" /> 的長度減去 <paramref name="offset" /> 參數值。  
  
-或- 
存取通訊端時發生錯誤。</exception>
        <exception cref="T:System.IO.IOException">基礎 <see cref="T:System.Net.Sockets.Socket" /> 已經關閉。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> 已關閉。  
  
-或- 
從網路讀取時有失敗產生。</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.DataAvailable" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
      </Docs>
    </Member>
    <Member MemberName="Readable">
      <MemberSignature Language="C#" Value="protected bool Readable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Readable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Readable" />
      <MemberSignature Language="VB.NET" Value="Protected Property Readable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Readable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Readable : bool with get, set" Usage="System.Net.Sockets.NetworkStream.Readable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否可以讀取 <see cref="T:System.Net.Sockets.NetworkStream" />。</summary>
        <value>若要指示可以讀取 <see cref="T:System.Net.Sockets.NetworkStream" />，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您必須衍生自<xref:System.Net.Sockets.NetworkStream>類別，以使用<xref:System.Net.Sockets.NetworkStream.Readable%2A>屬性。 如果<xref:System.Net.Sockets.NetworkStream.Readable%2A>已`true`，<xref:System.Net.Sockets.NetworkStream>可讓呼叫<xref:System.Net.Sockets.NetworkStream.Read%2A>方法。 您也可以判斷是否<xref:System.Net.Sockets.NetworkStream>藉由檢查可公開存取是可讀取<xref:System.Net.Sockets.NetworkStream.CanRead%2A>屬性。  
  
 <xref:System.Net.Sockets.NetworkStream.Readable%2A>屬性時，會設定<xref:System.Net.Sockets.NetworkStream>初始化。  
  
   
  
## Examples  
 在下列程式碼範例中，`CanCommunicate`屬性檢查<xref:System.Net.Sockets.NetworkStream.Readable%2A>屬性來判斷<xref:System.Net.Sockets.NetworkStream>讀取。  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int size, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ReadAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="networkStream.ReadAsync (buffer, offset, size, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="size">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadTimeout : int with get, set" Usage="System.Net.Sockets.NetworkStream.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定讀取作業封鎖等待資料的時間長度。</summary>
        <value>
          <see cref="T:System.Int32" />，指定讀取作業失敗前經過的時間長度 (以毫秒為單位)。 預設值 <see cref="F:System.Threading.Timeout.Infinite" /> 會指定讀取作業不逾時。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個屬性所指定的時間內沒有完成讀取的作業，讀取的作業會擲回<xref:System.IO.IOException>。  
  
> [!NOTE]
>  這個屬性會影響執行所呼叫的僅同步讀取<xref:System.Net.Sockets.NetworkStream.Read%2A>方法。 這個屬性不會影響執行所呼叫的非同步讀取<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例會設定為 10 毫秒的網路資料流的讀取逾時。  
  
 [!code-csharp[NCLTcpClientSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLTcpClientSync/CS/tcpclient.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的值小於或等於零，並且不是 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="networkStream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">不使用這個參數。</param>
        <param name="origin">不使用這個參數。</param>
        <summary>設定資料流的目前位置為指定的數值。 這個方法目前不受支援，而且永遠會擲回 <see cref="T:System.NotSupportedException" />。</summary>
        <returns>資料流中的位置。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">對這個屬性的任何使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="networkStream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">不使用這個參數。</param>
        <summary>設定資料流的長度。 這個方法永遠會擲回 <see cref="T:System.NotSupportedException" />。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">對這個屬性的任何使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="Socket">
      <MemberSignature Language="C#" Value="protected System.Net.Sockets.Socket Socket { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Socket" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Socket" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Socket As Socket" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Net::Sockets::Socket ^ Socket { System::Net::Sockets::Socket ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Socket : System.Net.Sockets.Socket" Usage="System.Net.Sockets.NetworkStream.Socket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得基礎 <see cref="T:System.Net.Sockets.Socket" />。</summary>
        <value>表示基礎網路連接的 <see cref="T:System.Net.Sockets.Socket" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 類別衍生自<xref:System.Net.Sockets.NetworkStream>可以使用這個屬性，以取得基礎<xref:System.Net.Sockets.Socket>。 使用基礎<xref:System.Net.Sockets.Socket>傳回從<xref:System.Net.Sockets.NetworkStream.Socket%2A>屬性，如果您需要存取超過其<xref:System.Net.Sockets.NetworkStream>提供。  
  
> [!NOTE]
>  這個屬性就只能透過此類別或衍生的類別存取。  
  
   
  
## Examples  
 下列程式碼範例會擷取基礎<xref:System.Net.Sockets.Socket>確認作用中連線。  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="networkStream.Write (buffer, offset, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <see cref="T:System.Byte" /> 型別的陣列，包含要寫入至 <see cref="T:System.Net.Sockets.NetworkStream" /> 的資料。</param>
        <param name="offset">
          <c>buffe</c> 中的位置，要開始自該處寫入資料。</param>
        <param name="size">要寫入至 <see cref="T:System.Net.Sockets.NetworkStream" /> 的位元組數。</param>
        <summary>寫入資料至 <see cref="T:System.Net.Sockets.NetworkStream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.Write%2A>方法會啟動位於指定之`offset`，並將傳送`size`位元組的內容從`buffer`到網路。 <xref:System.Net.Sockets.NetworkStream.Write%2A>方法會封鎖，直到在傳送要求的位元組數目或<xref:System.Net.Sockets.SocketException>就會擲回。 如果您收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>屬性取得特定的錯誤碼，並參照[Windows Sockets 第 2 版 API 錯誤碼](/windows/desktop/winsock/windows-sockets-error-codes-2)錯誤的詳細描述的文件。  
  
> [!NOTE]
>  檢查是否<xref:System.Net.Sockets.NetworkStream>是可寫入存取<xref:System.Net.Sockets.NetworkStream.CanWrite%2A>屬性。 如果您嘗試寫入<xref:System.Net.Sockets.NetworkStream>不是可寫入，就會發生<xref:System.IO.IOException>。 如果您收到<xref:System.IO.IOException>，檢查<xref:System.Exception.InnerException%2A>屬性來判斷如果它因<xref:System.Net.Sockets.SocketException>。  
  
   
  
## Examples  
 下列程式碼範例會檢查以查看是否<xref:System.Net.Sockets.NetworkStream>是可寫入。 如果是，然後<xref:System.Net.Sockets.NetworkStream.Write%2A>用來寫入小型訊息。  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> 參數小於 0。  
  
-或- 
<paramref name="offset" /> 參數大於 <paramref name="buffer" /> 的長度。  
  
-或- 
<paramref name="size" /> 參數小於 0。  
  
-或- 
<paramref name="size" /> 參數大於 <paramref name="buffer" /> 的長度減去 <paramref name="offset" /> 參數值。</exception>
        <exception cref="T:System.IO.IOException">寫入網路時發生失敗。  
  
-或- 
存取通訊端時發生錯誤。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> 已關閉。  
  
-或- 
從網路進行讀取時發生失敗。</exception>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
      </Docs>
    </Member>
    <Member MemberName="Writeable">
      <MemberSignature Language="C#" Value="protected bool Writeable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Writeable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Writeable" />
      <MemberSignature Language="VB.NET" Value="Protected Property Writeable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Writeable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Writeable : bool with get, set" Usage="System.Net.Sockets.NetworkStream.Writeable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Net.Sockets.NetworkStream" /> 是否可寫入。</summary>
        <value>如果可以寫入資料至資料流，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您必須衍生自<xref:System.Net.Sockets.NetworkStream>類別，以使用<xref:System.Net.Sockets.NetworkStream.Writeable%2A>屬性。 如果<xref:System.Net.Sockets.NetworkStream.Writeable%2A>已`true`，<xref:System.Net.Sockets.NetworkStream>可讓呼叫<xref:System.Net.Sockets.NetworkStream.Write%2A>方法。 您也可以判斷是否<xref:System.Net.Sockets.NetworkStream>是藉由檢查可公開存取的可寫入<xref:System.Net.Sockets.NetworkStream.CanWrite%2A>屬性。  
  
 <xref:System.Net.Sockets.NetworkStream.Writeable%2A>屬性時，會設定<xref:System.Net.Sockets.NetworkStream>初始化。  
  
   
  
## Examples  
 在下列程式碼範例中，`CanCommunicate`屬性檢查<xref:System.Net.Sockets.NetworkStream.Writeable%2A>屬性來判斷<xref:System.Net.Sockets.NetworkStream>是可寫入。  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Readable" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int size, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.WriteAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="networkStream.WriteAsync (buffer, offset, size, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="size">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WriteTimeout : int with get, set" Usage="System.Net.Sockets.NetworkStream.WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定寫入作業封鎖等待資料的時間長度。</summary>
        <value>
          <see cref="T:System.Int32" />，指定寫入作業失敗前經過的時間長度 (以毫秒為單位)。 預設值 <see cref="F:System.Threading.Timeout.Infinite" /> 會指定寫入作業不逾時。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個屬性所指定的時間內沒有完成寫入作業，寫入作業會擲回<xref:System.IO.IOException>。  
  
> [!NOTE]
>  這個屬性會影響執行藉由呼叫只同步寫入作業<xref:System.Net.Sockets.NetworkStream.Write%2A>方法。 這個屬性不會影響執行所呼叫的非同步寫入<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例會設定為 10 毫秒的網路資料流的寫入逾時。  
  
 [!code-cpp[NCLTcpServerSync#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclTcpServerSync/cpp/tcplistener.cpp#0)]
 [!code-csharp[NCLTcpServerSync#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclTcpServerSync/CS/tcplistener.cs#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的值小於或等於零，並且不是 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>