<Type Name="TcpListener" FullName="System.Net.Sockets.TcpListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="70b4efe2d402b27e3285b56bb7a50aff7def9e09" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30461082" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TcpListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpListener extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpListener" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpListener" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>接聽 TCP 網路用戶端的連接。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener>類別會提供簡單的方法接聽及接受連入連線要求中封鎖同步模式。 您可以使用<xref:System.Net.Sockets.TcpClient>或<xref:System.Net.Sockets.Socket>要用來連接<xref:System.Net.Sockets.TcpListener>。 建立<xref:System.Net.Sockets.TcpListener>使用<xref:System.Net.IPEndPoint>，本機 IP 位址和連接埠號碼或連接埠的數字。 指定<xref:System.Net.IPAddress.Any>本機 IP 位址和本機連接埠號碼，如果您希望基礎服務提供者，針對您指定這些值為 0。 如果您選擇這樣做，您可以使用<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>內容來識別已指派的資訊之後已連接的通訊端。  
  
 使用<xref:System.Net.Sockets.TcpListener.Start%2A>開始接聽連入連線要求的方法。 <xref:System.Net.Sockets.TcpListener.Start%2A> 會將佇列的連入連線，直到您呼叫<xref:System.Net.Sockets.TcpListener.Stop%2A>方法或它已經排入佇列<xref:System.Net.Sockets.SocketOptionName.MaxConnections>。 使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>或<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>提取來自內送連接要求佇列的連接。 這兩個方法會封鎖。 如果您想要避免封鎖，您可以使用<xref:System.Net.Sockets.TcpListener.Pending%2A>方法，以判斷連線要求是否有可用的佇列中。  
  
 呼叫<xref:System.Net.Sockets.TcpListener.Stop%2A>方法，關閉<xref:System.Net.Sockets.TcpListener>。  
  
> [!NOTE]
>  <xref:System.Net.Sockets.TcpListener.Stop%2A>方法不會關閉任何已接受的連接。 您必須負責個別關閉這些項目。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Net.Sockets.TcpListener>。  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 請參閱<xref:System.Net.Sockets.TcpClient>如用戶端的範例。  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">若要建立傳出連線，或接受連入要求。</permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(int port);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use TcpListener (IPAddress address, int port) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">通訊埠，將會在此處接聽連入的連接嘗試。</param>
        <summary>初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 類別的新執行個體，這個執行個體包含指定的設計工具。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式已經過時。 使用<xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType>或<xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType>建構函式。  
  
 這個建構函式可讓您指定要接聽連入連線嘗試的連接埠號碼。 這個建構函式，以基礎的服務提供者會指派最適當的網路位址。 如果您並不在意哪些本機連接埠使用，您可以指定連接埠號碼 0。 在此情況下，服務提供者將會指派可用的暫時連接埠號碼。 如果您使用此方法時，您可以探索哪些本機網路位址和通訊埠編號已被指派使用<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>屬性。  
  
 呼叫<xref:System.Net.Sockets.TcpListener.Start%2A>開始接聽連入連線嘗試的方法。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Net.Sockets.TcpListener>使用本機連接埠號碼。  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之間。</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPEndPoint ^ localEP);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP">
          <see cref="T:System.Net.IPEndPoint" />，表示接聽項 (Listener) <see cref="T:System.Net.Sockets.Socket" /> 所要繫結至的本機端點。</param>
        <summary>使用指定的本機端點，初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式可讓您指定的本機 IP 位址和通訊埠編號上接聽連入連線嘗試。 之前使用這個建構函式，您必須建立<xref:System.Net.IPEndPoint>使用所需的本機 IP 位址和連接埠號碼。 將此變數傳遞<xref:System.Net.IPEndPoint>做為建構函式`localEP`參數。  
  
 如果您並不在意哪些本機位址指派，您可以建立<xref:System.Net.IPEndPoint>使用<xref:System.Net.IPAddress.Any?displayProperty=nameWithType>位址參數，以及基礎的服務提供者會指派最適當的網路位址。 這有助於簡化您的應用程式，如果您有多個網路介面。 如果您並不在意哪些本機連接埠使用，您可以建立<xref:System.Net.IPEndPoint>使用連接埠號碼 0。 在此情況下，服務提供者將會指派可用的暫時連接埠號碼。 如果您使用此方法時，您可以探索哪些本機網路位址和通訊埠編號已被指派使用<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>屬性。  
  
 呼叫<xref:System.Net.Sockets.TcpListener.Start%2A>開始接聽連入連線嘗試的方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例建立的執行個體<xref:System.Net.Sockets.TcpListener>類別使用的本機端點。  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="localEP" /> 為 <see langword="null" />。</exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPAddress localaddr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress localaddr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localaddr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPAddress ^ localaddr, int port);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localaddr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localaddr">
          <see cref="T:System.Net.IPAddress" />，表示本機 IP 位址。</param>
        <param name="port">通訊埠，將會在此處接聽連入的連接嘗試。</param>
        <summary>初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 類別的新執行個體，這個執行個體會在指定的本機 IP 位址和通訊埠編號上接聽連入的連接嘗試。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個建構函式可讓您指定的本機 IP 位址和通訊埠編號上接聽連入連線嘗試。 呼叫這個建構函式之前您必須先建立<xref:System.Net.IPAddress>使用所需的本機位址。 將此變數傳遞<xref:System.Net.IPAddress>做為建構函式`localaddr`參數。 如果您並不在意哪些本機位址指派，指定<xref:System.Net.IPAddress.Any?displayProperty=nameWithType>如`localaddr`參數和基礎的服務提供者將會指派最適當的網路位址。 這有助於簡化您的應用程式，如果您有多個網路介面。 如果您並不在意哪些本機連接埠使用，您可以指定連接埠號碼 0。 在此情況下，服務提供者會指派可用的通訊埠編號介於 1024年到 5000 之間。 如果您使用此方法時，您可以探索哪些本機網路位址和通訊埠編號已被指派使用<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>屬性。  
  
 呼叫<xref:System.Net.Sockets.TcpListener.Start%2A>開始接聽連入連線嘗試的方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例建立的執行個體<xref:System.Net.Sockets.TcpListener>類別使用本機 IP 位址和連接埠號碼。  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="localaddr" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之間。</exception>
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket AcceptSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket AcceptSocket() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocket" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocket () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ AcceptSocket();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>接受暫止連接要求。</summary>
        <returns>用來傳送和接收資料的 <see cref="T:System.Net.Sockets.Socket" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 已封鎖的方法會傳回<xref:System.Net.Sockets.Socket>可用來傳送和接收資料。 如果您想要避免封鎖，使用<xref:System.Net.Sockets.TcpListener.Pending%2A>方法來判斷連線要求是否有可用的連入連線佇列中。  
  
 <xref:System.Net.Sockets.Socket>傳回初始化與遠端主機的 IP 位址和連接埠號碼。 您可以使用任一<xref:System.Net.Sockets.Socket.Send%2A>和<xref:System.Net.Sockets.Socket.Receive%2A>中可用的方法<xref:System.Net.Sockets.Socket>類別來與遠端主機通訊。 完畢時使用<xref:System.Net.Sockets.Socket>，務必呼叫其<xref:System.Net.Sockets.Socket.Close%2A>方法。 如果您的應用程式相當簡單，請考慮使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法而非<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。 <xref:System.Net.Sockets.TcpClient> 您提供簡單的方法來傳送和接收資料，透過封鎖同步模式中的網路。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 在下列程式碼範例中，<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法用來傳回<xref:System.Net.Sockets.Socket>。 這<xref:System.Net.Sockets.Socket>用來與剛連線的用戶端通訊。  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尚未以呼叫 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 來啟動接聽項。</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt; AcceptSocketAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.Socket&gt; AcceptSocketAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocketAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocketAsync () As Task(Of Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::Socket ^&gt; ^ AcceptSocketAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以非同步作業的方式接受暫止連接要求。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
 工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回用來傳送和接收資料的 <see cref="T:System.Net.Sockets.Socket" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>已接受通訊端連線之後，物件會完成。  
  
 <xref:System.Net.Sockets.Socket>中傳回<xref:System.Threading.Tasks.Task%601>初始化與遠端主機的 IP 位址和連接埠號碼。 您可以使用任一<xref:System.Net.Sockets.Socket.Send%2A>和<xref:System.Net.Sockets.Socket.Receive%2A>中可用的方法<xref:System.Net.Sockets.Socket>類別來與遠端主機通訊。 完畢時使用<xref:System.Net.Sockets.Socket>，務必呼叫其<xref:System.Net.Sockets.Socket.Close%2A>方法。 如果您的應用程式相當簡單，請考慮使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法而非<xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>方法。 <xref:System.Net.Sockets.TcpClient> 您提供簡單的方法來傳送和接收資料，透過封鎖同步模式中的網路。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尚未以呼叫 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 來啟動接聽項。</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient AcceptTcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient AcceptTcpClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClient () As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ AcceptTcpClient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>接受暫止連接要求。</summary>
        <returns>用來傳送和接收資料的 <see cref="T:System.Net.Sockets.TcpClient" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 已封鎖的方法會傳回<xref:System.Net.Sockets.TcpClient>可用來傳送和接收資料。 使用<xref:System.Net.Sockets.TcpListener.Pending%2A>方法來判斷是否連線要求可以使用連入連線佇列，是否您想要避免封鎖。  
  
 使用<xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType>方法，以取得基礎<xref:System.Net.Sockets.NetworkStream>傳回<xref:System.Net.Sockets.TcpClient>。 <xref:System.Net.Sockets.NetworkStream>會為您提供方法來傳送和接收的遠端主機。 如果您是透過與<xref:System.Net.Sockets.TcpClient>，務必呼叫其<xref:System.Net.Sockets.TcpClient.Close%2A>方法。 如果您想要更大的彈性比<xref:System.Net.Sockets.TcpClient>優惠，請考慮使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 在下列程式碼範例中，<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法用來傳回<xref:System.Net.Sockets.TcpClient>。 這<xref:System.Net.Sockets.TcpClient>用來與剛連線的用戶端通訊。  
  
 [!code-cpp[Classic TcpListenerExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListenerExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListenerExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListenerExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListenerExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListenerExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尚未以呼叫 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 來啟動接聽項。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 屬性取得特定錯誤碼。 一旦取得這個錯誤碼，您就可以參閱 MSDN 中的 Windows Sockets 第 2 版 API 錯誤碼文件，以取得錯誤的詳細描述。</exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClientAsync () As Task(Of TcpClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::TcpClient ^&gt; ^ AcceptTcpClientAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以非同步作業的方式接受暫止連接要求。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  
  
 工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回用來傳送和接收資料的 <see cref="T:System.Net.Sockets.TcpClient" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>已接受 TCP 連線之後，物件會完成。  
  
 使用<xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType>方法，以取得基礎<xref:System.Net.Sockets.NetworkStream>傳回<xref:System.Net.Sockets.TcpClient>中<xref:System.Threading.Tasks.Task%601>。 <xref:System.Net.Sockets.NetworkStream>會為您提供方法來傳送和接收的遠端主機。 如果您是透過與<xref:System.Net.Sockets.TcpClient>，務必呼叫其<xref:System.Net.Sockets.TcpClient.Close%2A>方法。 如果您想要更大的彈性比<xref:System.Net.Sockets.TcpClient>優惠，請考慮使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>或<xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尚未以呼叫 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 來啟動接聽項。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 屬性取得特定錯誤碼。 一旦取得這個錯誤碼，您就可以參閱 MSDN 中的 Windows Sockets 第 2 版 API 錯誤碼文件，以取得錯誤的詳細描述。</exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Active" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得值，指出 <see cref="T:System.Net.Sockets.TcpListener" /> 是否正在接聽用戶端連接。</summary>
        <value>
          如果 <see cref="T:System.Net.Sockets.TcpListener" /> 正在接聽則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 類別衍生自<xref:System.Net.Sockets.TcpListener>可以使用這個屬性來判斷如果<xref:System.Net.Sockets.Socket>目前正在接聽連入連線嘗試。 <xref:System.Net.Sockets.TcpClient.Active%2A>屬性可以用來避免多餘<xref:System.Net.Sockets.TcpListener.Start%2A>嘗試。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowed">布林值，指定是否啟用或停用 NAT 周遊。</param>
        <summary>啟用或停用在 <see cref="T:System.Net.Sockets.TcpListener" /> 執行個體上的網路位址轉譯 (NAT) 周遊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>方法用來啟用或停用的 NAT 周遊<xref:System.Net.Sockets.TcpListener>執行個體。 您可以使用 Teredo、 6to4 或 ISATAP 通道提供 NAT 周遊。  
  
 當`allowed`參數為 false，<xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel>相關聯的通訊端上的選項設定為<xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>。 此明確地停用的 NAT 周遊<xref:System.Net.Sockets.TcpListener>執行個體。  
  
 當`allowed`參數為 true，<xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel>相關聯的通訊端上的選項設定為<xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>。 這可能會讓 NAT 周遊<xref:System.Net.Sockets.TcpListener>根據在系統上的防火牆規則。  
  
 <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>必須叫用方法呼叫之前<xref:System.Net.Sockets.TcpListener.Start%2A>来開始接聽連入連線要求 （繫結通訊端） 之前的方法。 如果<xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>方法之後呼叫<xref:System.Net.Sockets.TcpListener.Start%2A>方法，則<xref:System.InvalidOperationException>就會擲回。  
  
 Teredo 位址是 IPv6 位址首碼為 2001年:: / 32。 Teredo 位址可透過一般的 DNS 名稱解析傳回或列舉為指派給本機介面的 IPv6 位址。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">已在呼叫 <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> 方法之後呼叫 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 方法</exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptSocket">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptSocket(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptSocket (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptSocket(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> 委派，會於作業完成時參考要叫用的方法。</param>
        <param name="state">使用者定義物件，包含接受作業資訊。 作業完成時，這個物件會傳遞給 <c>callback</c> 委派。</param>
        <summary>開始非同步作業以接受連入的連接嘗試。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" />，參考 <see cref="T:System.Net.Sockets.Socket" /> 的非同步建立。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 非同步<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>作業必須完成呼叫<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>方法。 一般而言，方法由叫用`callback`委派。  
  
 這個方法不會封鎖直到作業完成為止。 若要封鎖的作業完成之前，請使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。  
  
 如需使用非同步程式設計模型的詳細資訊，請參閱[呼叫同步方法以非同步方式](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。  
  
> [!NOTE]
>  您可以呼叫<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>屬性傳回之<xref:System.Net.Sockets.Socket>來識別遠端主機的網路位址和連接埠號碼。  
  
> [!NOTE]
>  如果您收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>屬性來取得特定錯誤碼，並請參閱 Windows Sockets 第 2 版 API 錯誤的程式碼文件位於 MSDN library 中[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)詳細的動作錯誤的描述。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>方法來建立和連線通訊端。 委派會呼叫回呼<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>方法來結束非同步的要求。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">嘗試存取通訊端時發生錯誤。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.Socket" /> 已關閉。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptTcpClient">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptTcpClient(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptTcpClient (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptTcpClient(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> 委派，會於作業完成時參考要叫用的方法。</param>
        <param name="state">使用者定義物件，包含接受作業資訊。 作業完成時，這個物件會傳遞給 <c>callback</c> 委派。</param>
        <summary>開始非同步作業以接受連入的連接嘗試。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" />，參考 <see cref="T:System.Net.Sockets.TcpClient" /> 的非同步建立。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 非同步<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>作業必須完成呼叫<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>方法。 一般而言，方法由叫用`callback`委派。  
  
 這個方法不會封鎖直到作業完成為止。 若要封鎖的作業完成之前，請使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法。  
  
 如需使用非同步程式設計模型的詳細資訊，請參閱[呼叫同步方法以非同步方式](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。  
  
> [!NOTE]
>  如果您收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>屬性來取得特定錯誤碼，並請參閱 Windows Sockets 第 2 版 API 錯誤的程式碼文件位於 MSDN library 中[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)詳細的動作錯誤的描述。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>方法來建立和連線通訊端。 委派會呼叫回呼<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>方法來結束非同步的要求。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">嘗試存取通訊端時發生錯誤。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.Socket" /> 已關閉。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.Sockets.TcpListener Create (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Sockets.TcpListener Create(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Create(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (port As Integer) As TcpListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Sockets::TcpListener ^ Create(int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">通訊埠，將會在此處接聽連入的連接嘗試。</param>
        <summary>建立要在指定的連接埠上接聽的新 <see cref="T:System.Net.Sockets.TcpListener" /> 執行個體。</summary>
        <returns>傳回 <see cref="T:System.Net.Sockets.TcpListener" />。  
  
 要在指定的連接埠上接聽的新 <see cref="T:System.Net.Sockets.TcpListener" /> 執行個體。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAcceptSocket(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptSocket (asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAcceptSocket(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">呼叫 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> 方法時傳回的 <see cref="T:System.IAsyncResult" />。</param>
        <summary>以非同步方式接受連入的連接嘗試，並建立新的 <see cref="T:System.Net.Sockets.Socket" /> 來處理遠端主機通訊。</summary>
        <returns>
          <see cref="T:System.Net.Sockets.Socket" />。  
  
 用來傳送和接收資料的 <see cref="T:System.Net.Sockets.Socket" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖直到作業完成。 若要以同步方式執行這項作業，使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。  
  
> [!NOTE]
>  您可以呼叫<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>屬性傳回之<xref:System.Net.Sockets.Socket>來識別遠端主機的網路位址和連接埠號碼。  
  
> [!NOTE]
>  如果您收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>屬性來取得特定錯誤碼，並請參閱 Windows Sockets 第 2 版 API 錯誤的程式碼文件位於 MSDN library 中[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)詳細的動作錯誤的描述。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>方法來建立和連線通訊端。 委派會呼叫回呼<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>方法來結束非同步的要求。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">基礎 <see cref="T:System.Net.Sockets.Socket" /> 已關閉。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">呼叫 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> 方法時不會建立 <paramref name="asyncResult" /> 參數。</exception>
        <exception cref="T:System.InvalidOperationException">先前已呼叫 <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> 方法。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">嘗試存取 <see cref="T:System.Net.Sockets.Socket" /> 時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient EndAcceptTcpClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptTcpClient (asyncResult As IAsyncResult) As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ EndAcceptTcpClient(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">呼叫 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> 方法時傳回的 <see cref="T:System.IAsyncResult" />。</param>
        <summary>以非同步方式接受連入的連接嘗試，並建立新的 <see cref="T:System.Net.Sockets.TcpClient" /> 來處理遠端主機通訊。</summary>
        <returns>
          <see cref="T:System.Net.Sockets.TcpClient" />。  
  
 用來傳送和接收資料的 <see cref="T:System.Net.Sockets.TcpClient" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會封鎖直到作業完成。 若要以同步方式執行這項作業，使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法。  
  
> [!NOTE]
>  您可以呼叫<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>基礎通訊端的屬性 (<xref:System.Net.Sockets.TcpClient.Client%2A>) 來識別遠端主機的網路位址和連接埠號碼。  
  
> [!NOTE]
>  如果您收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>屬性來取得特定錯誤碼，並請參閱 Windows Sockets 第 2 版 API 錯誤的程式碼文件位於 MSDN library 中[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)詳細的動作錯誤的描述。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>方法來建立和連線通訊端。 委派會呼叫回呼<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>方法來結束非同步的要求。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Boolean" /> 值，其指定 <see cref="T:System.Net.Sockets.TcpListener" /> 是否只允許一個基礎通訊端接聽特定的通訊埠。</summary>
        <value>
          如果 <see cref="T:System.Net.Sockets.TcpListener" /> 只允許一個 <see cref="T:System.Net.Sockets.TcpListener" /> 接聽特定的通訊埠，則為 <see langword="true" />，否則為 <see langword="false" />。 。 若為 Windows Server 2003 和 Windows XP Service Pack 2 (含) 以後版本，則預設值為 <see langword="true" />；若為所有其他版本，則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 根據預設，多個接聽程式可以接聽特定通訊埠。 不過，只有其中一個接聽程式可以執行網路流量傳送至連接埠的作業。 如果多個接聽程式所要繫結至特定的連接埠，則具有更特定的 IP 位址會處理傳送至該通訊埠的網路流量。 您可以使用<xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>屬性，避免多個接聽程式接聽特定連接埠。  
  
 設定這個屬性，然後再呼叫<xref:System.Net.Sockets.TcpListener.Start%2A>，或呼叫<xref:System.Net.Sockets.TcpListener.Stop%2A>方法並將這個屬性。  
  
   
  
## Examples  
 下列程式碼範例會取得並設定<xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A>屬性。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#2)]
 [!code-vb[System.Net.Sockets.TcpListener1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Net.Sockets.TcpListener" /> 已經啟動。 呼叫 <see cref="M:System.Net.Sockets.TcpListener.Stop" /> 方法，並設定 <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> 屬性。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">嘗試存取基礎通訊端時發生錯誤。</exception>
        <exception cref="T:System.ObjectDisposedException">基礎 <see cref="T:System.Net.Sockets.Socket" /> 已關閉。</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpListener ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndpoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndpoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndpoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndpoint { System::Net::EndPoint ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前 <see cref="T:System.Net.EndPoint" /> 的 <see cref="T:System.Net.Sockets.TcpListener" />。</summary>
        <value>繫結至 <see cref="T:System.Net.EndPoint" /> 的 <see cref="T:System.Net.Sockets.Socket" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>屬性來識別用來接聽內送的用戶端連接要求，通訊端連線建立之後的區域網路介面和連接埠號碼。 您必須先將此轉型<xref:System.Net.EndPoint>至<xref:System.Net.IPEndPoint>。 您可以接著呼叫<xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType>屬性，以擷取本機 IP 位址，而<xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType>屬性，以擷取本機連接埠號碼。  
  
   
  
## Examples  
 下列程式碼範例會顯示本機 IP 位址和連接埠號碼所在<xref:System.Net.Sockets.TcpListener>接聽內送連接要求。  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Pending">
      <MemberSignature Language="C#" Value="public bool Pending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Pending() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Pending" />
      <MemberSignature Language="VB.NET" Value="Public Function Pending () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Pending();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>決定是否有暫止連接要求存在。</summary>
        <returns>
          如果連接為暫止，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此非封鎖的方法會判斷是否有任何暫止的連接要求。 因為<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>和<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法封鎖執行，直到<xref:System.Net.Sockets.TcpListener.Start%2A>方法已放入佇列的連入連線要求，<xref:System.Net.Sockets.TcpListener.Pending%2A>方法可以用來判斷連線是否可用，然後再嘗試將同意這些授權條款。  
  
   
  
## Examples  
 下列程式碼範例會檢查<xref:System.Net.Sockets.TcpListener.Pending%2A>方法。 如果連線要求正在等待被接受，然後呼叫<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法進行。  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尚未以呼叫 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 來啟動接聽項。</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Server" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Server { System::Net::Sockets::Socket ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得基礎網路 <see cref="T:System.Net.Sockets.Socket" />。</summary>
        <value>基礎 <see cref="T:System.Net.Sockets.Socket" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener> 建立<xref:System.Net.Sockets.Socket>接聽內送的用戶端連接要求。 類別衍生自<xref:System.Net.Sockets.TcpListener>可以使用這個屬性，以解決此<xref:System.Net.Sockets.Socket>。 使用基礎<xref:System.Net.Sockets.Socket>傳回<xref:System.Net.Sockets.TcpListener.Server%2A>屬性，如果您需要存取超過其<xref:System.Net.Sockets.TcpListener>提供。  
  
> [!NOTE]
>  <xref:System.Net.Sockets.TcpListener.Server%2A>屬性只會傳回<xref:System.Net.Sockets.Socket>用來接聽內送的用戶端連接要求。 使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法接受暫止的連接要求，並取得<xref:System.Net.Sockets.Socket>來傳送和接收資料。 您也可以使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法接受暫止的連接要求，並取得<xref:System.Net.Sockets.TcpClient>來傳送和接收資料。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.Sockets.TcpListener.Server%2A>屬性。 基礎<xref:System.Net.Sockets.Socket>擷取和<xref:System.Net.Sockets.SocketOptionName.Linger><xref:System.Net.Sockets.Socket>選項設定的逾時時間在 10 秒後如果資料仍會保留在的網路緩衝區之後關閉連接。  
  
 [!code-csharp[TcpListenerProtectedMembers1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListenerProtectedMembers1/CS/source.cs#1)]
 [!code-vb[TcpListenerProtectedMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListenerProtectedMembers1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>啟動對輸入連接要求的接聽。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>啟動對輸入連接要求的接聽。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.Start%2A>方法會初始化基礎<xref:System.Net.Sockets.Socket>、 將它繫結至的本機端點和接聽連入連線嘗試。 如果收到連線要求時，<xref:System.Net.Sockets.TcpListener.Start%2A>方法將會要求排入佇列，並繼續接聽其他要求，直到您呼叫<xref:System.Net.Sockets.TcpListener.Stop%2A>方法。 如果<xref:System.Net.Sockets.TcpListener>收到連接要求它有已排入佇列的連線數目上限之後，它將會擲回<xref:System.Net.Sockets.SocketException>用戶端上。  
  
 若要從連入連線佇列中移除連接，請使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法或<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法會從佇列移除的連接，並傳回<xref:System.Net.Sockets.TcpClient>可用來傳送和接收資料。 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法會傳回<xref:System.Net.Sockets.Socket>可用來執行相同的動作。 如果您的應用程式只需要同步 I/O，請使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。 如需詳細的行為的控制項，使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。 這兩種方法封鎖，直到連接要求佇列中可用為止。  
  
 使用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法，關閉<xref:System.Net.Sockets.TcpListener>並停止接聽。 您必須負責個別關閉已接受的連接。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何<xref:System.Net.Sockets.TcpListener.Start%2A>用來接聽內送的用戶端連接嘗試。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 屬性取得特定錯誤碼。 一旦取得這個錯誤碼，您就可以參閱 MSDN 中的 Windows Sockets 第 2 版 API 錯誤碼文件，以取得錯誤的詳細描述。</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(int backlog);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="backlog">暫止連接佇列的最大長度。</param>
        <summary>啟動對含有最大數目暫止連接之連入連接要求的接聽。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.Start%2A>方法會初始化基礎<xref:System.Net.Sockets.Socket>、 將它繫結至的本機端點和接聽連入連線嘗試。 如果收到連線要求時，<xref:System.Net.Sockets.TcpListener.Start%2A>將要求排入佇列並繼續接聽其他要求，直到您呼叫<xref:System.Net.Sockets.TcpListener.Stop%2A>方法。 如果<xref:System.Net.Sockets.TcpListener>收到連接要求時，它有已排入佇列的則會擲回的連線數目上限之後<xref:System.Net.Sockets.SocketException>用戶端上。  
  
 若要從連入連線佇列中移除連接，請使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法或<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法會從佇列移除的連接，並傳回<xref:System.Net.Sockets.TcpClient>可用來傳送和接收資料。 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法會傳回<xref:System.Net.Sockets.Socket>可用來執行相同的動作。 如果您的應用程式只需要同步 I/O，請使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。 如需詳細的行為的控制項，使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。 這兩種方法封鎖，直到連接要求佇列中可用為止。  
  
 使用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法，關閉<xref:System.Net.Sockets.TcpListener>並停止接聽。 您必須負責個別關閉已接受的連接。  
  
> [!NOTE]
>  使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>屬性來取得特定錯誤碼，並請參閱 Windows Sockets 第 2 版 API 錯誤的程式碼文件位於 MSDN library 中[ http://msdn.microsoft.com/library/ ](http://msdn.microsoft.com/library/)如需詳細的錯誤說明。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何<xref:System.Net.Sockets.TcpListener.Start%2A>用來接聽內送的用戶端連接嘗試。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">存取通訊端時發生錯誤。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="backlog" /> 參數小於零或超過允許的最大連接數。</exception>
        <exception cref="T:System.InvalidOperationException">基礎 <see cref="T:System.Net.Sockets.Socket" /> 為 null。</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>關閉接聽程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.Stop%2A> 關閉接聽程式。 佇列中的任何不被接受的連接要求將會遺失。 接受遠端主機等候連接將會擲回<xref:System.Net.Sockets.SocketException>。 您必須負責個別關閉已接受的連接。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法，關閉基礎<xref:System.Net.Sockets.Socket>。  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 屬性取得特定錯誤碼。 一旦取得這個錯誤碼，您就可以參閱 MSDN 中的 Windows Sockets 第 2 版 API 錯誤碼文件，以取得錯誤的詳細描述。</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.Net.Sockets.TcpListener.Stop" />方法也會關閉基礎<see cref="T:System.Net.Sockets.Socket" />，並建立新<see cref="T:System.Net.Sockets.Socket" />如<see cref="T:System.Net.Sockets.TcpListener" />。 如果您設定任何屬性的基礎<see cref="T:System.Net.Sockets.Socket" />之前呼叫<see cref="M:System.Net.Sockets.TcpListener.Stop" />方法，這些屬性將不會延續到新<see cref="T:System.Net.Sockets.Socket" />。</para>
        </block>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
  </Members>
</Type>