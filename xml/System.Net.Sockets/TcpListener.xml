<Type Name="TcpListener" FullName="System.Net.Sockets.TcpListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eb2b4d962e9ff84bbe0aad0968396a6df0015b8c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58698734" /></Metadata><TypeSignature Language="C#" Value="public class TcpListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpListener extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpListener" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpListener" />
  <TypeSignature Language="F#" Value="type TcpListener = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e8707-101">接聽 TCP 網路用戶端的連接。</span><span class="sxs-lookup"><span data-stu-id="e8707-101">Listens for connections from TCP network clients.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-102"><xref:System.Net.Sockets.TcpListener>類別提供簡單的方法，接聽和接受連入連線要求，在封鎖同步模式。</span><span class="sxs-lookup"><span data-stu-id="e8707-102">The <xref:System.Net.Sockets.TcpListener> class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode.</span></span> <span data-ttu-id="e8707-103">您可以使用<xref:System.Net.Sockets.TcpClient>或是<xref:System.Net.Sockets.Socket>互相交流<xref:System.Net.Sockets.TcpListener>。</span><span class="sxs-lookup"><span data-stu-id="e8707-103">You can use either a <xref:System.Net.Sockets.TcpClient> or a <xref:System.Net.Sockets.Socket> to connect with a <xref:System.Net.Sockets.TcpListener>.</span></span> <span data-ttu-id="e8707-104">建立<xref:System.Net.Sockets.TcpListener>使用<xref:System.Net.IPEndPoint>，本機 IP 位址和連接埠號碼或只是一個連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-104">Create a <xref:System.Net.Sockets.TcpListener> using an <xref:System.Net.IPEndPoint>, a Local IP address and port number, or just a port number.</span></span> <span data-ttu-id="e8707-105">指定<xref:System.Net.IPAddress.Any>本機 IP 位址和本機連接埠號碼，如果您想要將這些值指派為您的基礎服務提供者為 0。</span><span class="sxs-lookup"><span data-stu-id="e8707-105">Specify <xref:System.Net.IPAddress.Any> for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you.</span></span> <span data-ttu-id="e8707-106">如果您選擇這樣做，您可以使用<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>屬性來識別已指派的資訊之後已連線的通訊端。</span><span class="sxs-lookup"><span data-stu-id="e8707-106">If you choose to do this, you can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the assigned information, after the socket has connected.</span></span>  
  
 <span data-ttu-id="e8707-107">使用<xref:System.Net.Sockets.TcpListener.Start%2A>以開始接聽連入連線要求的方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-107">Use the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests.</span></span> <span data-ttu-id="e8707-108"><xref:System.Net.Sockets.TcpListener.Start%2A> 將佇列的連入連線，直到您呼叫<xref:System.Net.Sockets.TcpListener.Stop%2A>方法，或它已經排入佇列<xref:System.Net.Sockets.SocketOptionName.MaxConnections>。</span><span class="sxs-lookup"><span data-stu-id="e8707-108"><xref:System.Net.Sockets.TcpListener.Start%2A> will queue incoming connections until you either call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method or it has queued <xref:System.Net.Sockets.SocketOptionName.MaxConnections>.</span></span> <span data-ttu-id="e8707-109">使用任何一種<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>或<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>提取從內送連接要求佇列的連線。</span><span class="sxs-lookup"><span data-stu-id="e8707-109">Use either <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> to pull a connection from the incoming connection request queue.</span></span> <span data-ttu-id="e8707-110">這兩種方法將會封鎖。</span><span class="sxs-lookup"><span data-stu-id="e8707-110">These two methods will block.</span></span> <span data-ttu-id="e8707-111">如果您想要避免封鎖，您可以使用<xref:System.Net.Sockets.TcpListener.Pending%2A>第一次，以判斷是否連接要求佇列中可用的方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-111">If you want to avoid blocking, you can use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method first to determine if connection requests are available in the queue.</span></span>  
  
 <span data-ttu-id="e8707-112">呼叫<xref:System.Net.Sockets.TcpListener.Stop%2A>方法以關閉<xref:System.Net.Sockets.TcpListener>。</span><span class="sxs-lookup"><span data-stu-id="e8707-112">Call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-113"><xref:System.Net.Sockets.TcpListener.Stop%2A>方法不會關閉任何已接受的連線。</span><span class="sxs-lookup"><span data-stu-id="e8707-113">The <xref:System.Net.Sockets.TcpListener.Stop%2A> method does not close any accepted connections.</span></span> <span data-ttu-id="e8707-114">您有責任個別關閉這些項目。</span><span class="sxs-lookup"><span data-stu-id="e8707-114">You are responsible for closing these separately.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-115">下列程式碼範例會建立<xref:System.Net.Sockets.TcpListener>。</span><span class="sxs-lookup"><span data-stu-id="e8707-115">The following code example creates a <xref:System.Net.Sockets.TcpListener>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 <span data-ttu-id="e8707-116">請參閱<xref:System.Net.Sockets.TcpClient>如用戶端的範例。</span><span class="sxs-lookup"><span data-stu-id="e8707-116">See <xref:System.Net.Sockets.TcpClient> for a client example.</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission"><span data-ttu-id="e8707-117">若要建立傳出連線，或接受連入要求。</span><span class="sxs-lookup"><span data-stu-id="e8707-117">to establish an outgoing connection or accept an incoming request.</span></span></permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8707-118">初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="e8707-118">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : int -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use TcpListener (IPAddress address, int port) instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use TcpListener(IPAddress localaddr, int port) instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use TcpListener(IPAddress localaddr, int port).")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use TcpListener(IPAddress localaddr, int port) instead. https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="port"><span data-ttu-id="e8707-119">通訊埠，將會在此處接聽連入的連接嘗試。</span><span class="sxs-lookup"><span data-stu-id="e8707-119">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="e8707-120">初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 類別的新執行個體，這個執行個體包含指定的設計工具。</span><span class="sxs-lookup"><span data-stu-id="e8707-120">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens on the specified port.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-121">這個建構函式已經過時。</span><span class="sxs-lookup"><span data-stu-id="e8707-121">This constructor is obsolete.</span></span> <span data-ttu-id="e8707-122">使用<xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType>或<xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType>建構函式。</span><span class="sxs-lookup"><span data-stu-id="e8707-122">Use the <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType> or <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType> constructors.</span></span>  
  
 <span data-ttu-id="e8707-123">這個建構函式可讓您指定要接聽連入連線嘗試的連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-123">This constructor allows you to specify the port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="e8707-124">使用這個建構函式，基礎的服務提供者會指派最適當的網路位址。</span><span class="sxs-lookup"><span data-stu-id="e8707-124">With this constructor, the underlying service provider assigns the most appropriate network address.</span></span> <span data-ttu-id="e8707-125">如果您並不在意哪些本機連接埠，您可以指定連接埠號碼 0。</span><span class="sxs-lookup"><span data-stu-id="e8707-125">If you do not care which local port is used, you can specify 0 for the port number.</span></span> <span data-ttu-id="e8707-126">在此情況下，服務提供者會指派可用的暫時連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-126">In this case, the service provider will assign an available ephemeral port number.</span></span> <span data-ttu-id="e8707-127">如果您使用此方法時，您可以探索哪些本機網路位址和連接埠號碼已被指派使用<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="e8707-127">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="e8707-128">呼叫<xref:System.Net.Sockets.TcpListener.Start%2A>以開始接聽連入連線嘗試的方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-128">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-129">下列程式碼範例會建立<xref:System.Net.Sockets.TcpListener>使用本機連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-129">The following code example creates a <xref:System.Net.Sockets.TcpListener> using a local port number.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e8707-130"><paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之間。</span><span class="sxs-lookup"><span data-stu-id="e8707-130"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : System.Net.IPEndPoint -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP"><span data-ttu-id="e8707-131"><see cref="T:System.Net.IPEndPoint" />，表示接聽項 (Listener) <see cref="T:System.Net.Sockets.Socket" /> 所要繫結至的本機端點。</span><span class="sxs-lookup"><span data-stu-id="e8707-131">An <see cref="T:System.Net.IPEndPoint" /> that represents the local endpoint to which to bind the listener <see cref="T:System.Net.Sockets.Socket" />.</span></span></param>
        <summary><span data-ttu-id="e8707-132">使用指定的本機端點，初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 類別的新執行個體。</span><span class="sxs-lookup"><span data-stu-id="e8707-132">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class with the specified local endpoint.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-133">這個建構函式可讓您指定的本機 IP 位址和連接埠號碼上接聽連入連線嘗試。</span><span class="sxs-lookup"><span data-stu-id="e8707-133">This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="e8707-134">之前使用這個建構函式，您必須建立<xref:System.Net.IPEndPoint>使用所需的本機 IP 位址和連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-134">Before using this constructor, you must create an <xref:System.Net.IPEndPoint> using the desired local IP address and port number.</span></span> <span data-ttu-id="e8707-135">傳遞這<xref:System.Net.IPEndPoint>做為建構函式`localEP`參數。</span><span class="sxs-lookup"><span data-stu-id="e8707-135">Pass this <xref:System.Net.IPEndPoint> to the constructor as the `localEP` parameter.</span></span>  
  
 <span data-ttu-id="e8707-136">如果您並不在意指派的本機位址，您可以建立<xref:System.Net.IPEndPoint>使用<xref:System.Net.IPAddress.Any?displayProperty=nameWithType>位址參數，以及基礎的服務提供者會指派最適當的網路位址。</span><span class="sxs-lookup"><span data-stu-id="e8707-136">If you do not care which local address is assigned, you can create an <xref:System.Net.IPEndPoint> using <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> as the address parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="e8707-137">這有助於簡化您的應用程式，如果您有多個網路介面。</span><span class="sxs-lookup"><span data-stu-id="e8707-137">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="e8707-138">如果您並不在意哪些本機連接埠，您可以建立<xref:System.Net.IPEndPoint>使用 0 連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-138">If you do not care which local port is used, you can create an <xref:System.Net.IPEndPoint> using 0 for the port number.</span></span> <span data-ttu-id="e8707-139">在此情況下，服務提供者會指派可用的暫時連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-139">In this case, the service provider will assign an available ephemeral port number.</span></span> <span data-ttu-id="e8707-140">如果您使用此方法時，您可以探索哪些本機網路位址和連接埠號碼已被指派使用<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="e8707-140">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="e8707-141">呼叫<xref:System.Net.Sockets.TcpListener.Start%2A>以開始接聽連入連線嘗試的方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-141">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-142">在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-142">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e8707-143">如需詳細資訊，請參閱 < [.NET Framework 中的網路追蹤](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-143">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-144">下列程式碼範例建立的執行個體<xref:System.Net.Sockets.TcpListener>類別使用的本機端點。</span><span class="sxs-lookup"><span data-stu-id="e8707-144">The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using the local endpoint.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e8707-145"><paramref name="localEP" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-145"><paramref name="localEP" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPAddress localaddr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress localaddr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localaddr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPAddress ^ localaddr, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : System.Net.IPAddress * int -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener (localaddr, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localaddr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localaddr"><span data-ttu-id="e8707-146"><see cref="T:System.Net.IPAddress" />，表示本機 IP 位址。</span><span class="sxs-lookup"><span data-stu-id="e8707-146">An <see cref="T:System.Net.IPAddress" /> that represents the local IP address.</span></span></param>
        <param name="port"><span data-ttu-id="e8707-147">通訊埠，將會在此處接聽連入的連接嘗試。</span><span class="sxs-lookup"><span data-stu-id="e8707-147">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="e8707-148">初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 類別的新執行個體，這個執行個體會在指定的本機 IP 位址和通訊埠編號上接聽連入的連接嘗試。</span><span class="sxs-lookup"><span data-stu-id="e8707-148">Initializes a new instance of the <see cref="T:System.Net.Sockets.TcpListener" /> class that listens for incoming connection attempts on the specified local IP address and port number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-149">這個建構函式可讓您指定的本機 IP 位址和連接埠號碼上接聽連入連線嘗試。</span><span class="sxs-lookup"><span data-stu-id="e8707-149">This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</span></span> <span data-ttu-id="e8707-150">呼叫這個建構函式之前您必須先建立<xref:System.Net.IPAddress>使用所需的本機位址。</span><span class="sxs-lookup"><span data-stu-id="e8707-150">Before calling this constructor you must first create an <xref:System.Net.IPAddress> using the desired local address.</span></span> <span data-ttu-id="e8707-151">傳遞這<xref:System.Net.IPAddress>做為建構函式`localaddr`參數。</span><span class="sxs-lookup"><span data-stu-id="e8707-151">Pass this <xref:System.Net.IPAddress> to the constructor as the `localaddr` parameter.</span></span> <span data-ttu-id="e8707-152">如果您並不在意指派的本機位址，指定<xref:System.Net.IPAddress.Any?displayProperty=nameWithType>針對`localaddr`參數，基礎的服務提供者會將指派的最適當的網路位址。</span><span class="sxs-lookup"><span data-stu-id="e8707-152">If you do not care which local address is assigned, specify <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> for the `localaddr` parameter, and the underlying service provider will assign the most appropriate network address.</span></span> <span data-ttu-id="e8707-153">這有助於簡化您的應用程式，如果您有多個網路介面。</span><span class="sxs-lookup"><span data-stu-id="e8707-153">This might help simplify your application if you have multiple network interfaces.</span></span> <span data-ttu-id="e8707-154">如果您並不在意哪些本機連接埠，您可以指定連接埠號碼 0。</span><span class="sxs-lookup"><span data-stu-id="e8707-154">If you do not care which local port is used, you can specify 0 for the port number.</span></span> <span data-ttu-id="e8707-155">在此情況下，服務提供者會指派可用的通訊埠編號介於 1024年到 5000 之間。</span><span class="sxs-lookup"><span data-stu-id="e8707-155">In this case, the service provider will assign an available port number between 1024 and 5000.</span></span> <span data-ttu-id="e8707-156">如果您使用此方法時，您可以探索哪些本機網路位址和連接埠號碼已被指派使用<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="e8707-156">If you use this approach, you can discover what local network address and port number has been assigned by using the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property.</span></span>  
  
 <span data-ttu-id="e8707-157">呼叫<xref:System.Net.Sockets.TcpListener.Start%2A>以開始接聽連入連線嘗試的方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-157">Call the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection attempts.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-158">在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-158">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e8707-159">如需詳細資訊，請參閱 < [.NET Framework 中的網路追蹤](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-159">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-160">下列程式碼範例建立的執行個體<xref:System.Net.Sockets.TcpListener>類別使用本機的 IP 位址和連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-160">The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using a local IP address and port number.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e8707-161"><paramref name="localaddr" /> 為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-161"><paramref name="localaddr" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e8707-162"><paramref name="port" /> 不在 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之間。</span><span class="sxs-lookup"><span data-stu-id="e8707-162"><paramref name="port" /> is not between <see cref="F:System.Net.IPEndPoint.MinPort" /> and <see cref="F:System.Net.IPEndPoint.MaxPort" />.</span></span></exception>
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket AcceptSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket AcceptSocket() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocket" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocket () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ AcceptSocket();" />
      <MemberSignature Language="F#" Value="member this.AcceptSocket : unit -&gt; System.Net.Sockets.Socket" Usage="tcpListener.AcceptSocket " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e8707-163">接受暫止連接要求。</span><span class="sxs-lookup"><span data-stu-id="e8707-163">Accepts a pending connection request.</span></span></summary>
        <returns><span data-ttu-id="e8707-164">用來傳送和接收資料的 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-164">A <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-165"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 已封鎖的方法會傳回<xref:System.Net.Sockets.Socket>可用來傳送和接收資料。</span><span class="sxs-lookup"><span data-stu-id="e8707-165"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> is a blocking method that returns a <xref:System.Net.Sockets.Socket> that you can use to send and receive data.</span></span> <span data-ttu-id="e8707-166">如果您想要避免封鎖，使用<xref:System.Net.Sockets.TcpListener.Pending%2A>方法，以判斷是否傳入的連線佇列中可用的連線要求。</span><span class="sxs-lookup"><span data-stu-id="e8707-166">If you want to avoid blocking, use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue.</span></span>  
  
 <span data-ttu-id="e8707-167"><xref:System.Net.Sockets.Socket>傳回初始化與遠端主機的 IP 位址和連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-167">The <xref:System.Net.Sockets.Socket> returned is initialized with the IP address and port number of the remote host.</span></span> <span data-ttu-id="e8707-168">您可以使用任一<xref:System.Net.Sockets.Socket.Send%2A>並<xref:System.Net.Sockets.Socket.Receive%2A>方法，可<xref:System.Net.Sockets.Socket>通訊與遠端主機的類別。</span><span class="sxs-lookup"><span data-stu-id="e8707-168">You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host.</span></span> <span data-ttu-id="e8707-169">完畢時使用<xref:System.Net.Sockets.Socket>，務必呼叫其<xref:System.Net.Sockets.Socket.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-169">When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="e8707-170">如果您的應用程式相當簡單，請考慮使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法而非<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-170">If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="e8707-171"><xref:System.Net.Sockets.TcpClient> 為您提供簡單的方法來傳送和接收資料，透過網路以封鎖同步模式。</span><span class="sxs-lookup"><span data-stu-id="e8707-171"><xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-172">在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-172">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e8707-173">如需詳細資訊，請參閱 < [.NET Framework 中的網路追蹤](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-173">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-174">在下列程式碼範例中，<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法用來傳回<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="e8707-174">In the following code example, the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method is used to return a <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="e8707-175">這<xref:System.Net.Sockets.Socket>用來與新連線的用戶端通訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-175">This <xref:System.Net.Sockets.Socket> is used to communicate with the newly connected client.</span></span>  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e8707-176">尚未以呼叫 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 來啟動接聽項。</span><span class="sxs-lookup"><span data-stu-id="e8707-176">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt; AcceptSocketAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.Socket&gt; AcceptSocketAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocketAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocketAsync () As Task(Of Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::Socket ^&gt; ^ AcceptSocketAsync();" />
      <MemberSignature Language="F#" Value="member this.AcceptSocketAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;" Usage="tcpListener.AcceptSocketAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e8707-177">以非同步作業的方式接受暫止連接要求。</span><span class="sxs-lookup"><span data-stu-id="e8707-177">Accepts a pending connection request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="e8707-178">工作物件，表示非同步作業。</span><span class="sxs-lookup"><span data-stu-id="e8707-178">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="e8707-179">工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回用來傳送和接收資料的 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-179">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns a <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-180">這項作業不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="e8707-180">This operation will not block.</span></span> <span data-ttu-id="e8707-181">傳回<xref:System.Threading.Tasks.Task%601>已接受通訊端連線之後，物件會完成。</span><span class="sxs-lookup"><span data-stu-id="e8707-181">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the socket connection has been accepted.</span></span>  
  
 <span data-ttu-id="e8707-182"><xref:System.Net.Sockets.Socket>中傳回<xref:System.Threading.Tasks.Task%601>初始化與遠端主機的 IP 位址和連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-182">The <xref:System.Net.Sockets.Socket> returned in <xref:System.Threading.Tasks.Task%601> is initialized with the IP address and port number of the remote host.</span></span> <span data-ttu-id="e8707-183">您可以使用任一<xref:System.Net.Sockets.Socket.Send%2A>並<xref:System.Net.Sockets.Socket.Receive%2A>方法，可<xref:System.Net.Sockets.Socket>通訊與遠端主機的類別。</span><span class="sxs-lookup"><span data-stu-id="e8707-183">You can use any of the <xref:System.Net.Sockets.Socket.Send%2A> and <xref:System.Net.Sockets.Socket.Receive%2A> methods available in the <xref:System.Net.Sockets.Socket> class to communicate with the remote host.</span></span> <span data-ttu-id="e8707-184">完畢時使用<xref:System.Net.Sockets.Socket>，務必呼叫其<xref:System.Net.Sockets.Socket.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-184">When you are finished using the <xref:System.Net.Sockets.Socket>, be sure to call its <xref:System.Net.Sockets.Socket.Close%2A> method.</span></span> <span data-ttu-id="e8707-185">如果您的應用程式相當簡單，請考慮使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法而非<xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-185">If your application is relatively simple, consider using the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method rather than the <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> method.</span></span> <span data-ttu-id="e8707-186"><xref:System.Net.Sockets.TcpClient> 為您提供簡單的方法來傳送和接收資料，透過網路以封鎖同步模式。</span><span class="sxs-lookup"><span data-stu-id="e8707-186"><xref:System.Net.Sockets.TcpClient> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-187">在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-187">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e8707-188">如需詳細資訊，請參閱 < [.NET Framework 中的網路追蹤](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-188">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e8707-189">尚未以呼叫 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 來啟動接聽項。</span><span class="sxs-lookup"><span data-stu-id="e8707-189">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient AcceptTcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient AcceptTcpClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClient () As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ AcceptTcpClient();" />
      <MemberSignature Language="F#" Value="member this.AcceptTcpClient : unit -&gt; System.Net.Sockets.TcpClient" Usage="tcpListener.AcceptTcpClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e8707-190">接受暫止連接要求。</span><span class="sxs-lookup"><span data-stu-id="e8707-190">Accepts a pending connection request.</span></span></summary>
        <returns><span data-ttu-id="e8707-191">用來傳送和接收資料的 <see cref="T:System.Net.Sockets.TcpClient" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-191">A <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-192"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 已封鎖的方法會傳回<xref:System.Net.Sockets.TcpClient>可用來傳送和接收資料。</span><span class="sxs-lookup"><span data-stu-id="e8707-192"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> is a blocking method that returns a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="e8707-193">使用<xref:System.Net.Sockets.TcpListener.Pending%2A>方法來判斷是否您想要避免封鎖連線要求是否提供連入連線佇列中。</span><span class="sxs-lookup"><span data-stu-id="e8707-193">Use the <xref:System.Net.Sockets.TcpListener.Pending%2A> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.</span></span>  
  
 <span data-ttu-id="e8707-194">使用<xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType>方法，以取得基礎<xref:System.Net.Sockets.NetworkStream>傳回<xref:System.Net.Sockets.TcpClient>。</span><span class="sxs-lookup"><span data-stu-id="e8707-194">Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="e8707-195"><xref:System.Net.Sockets.NetworkStream>會為您提供方法來傳送和接收與遠端主機。</span><span class="sxs-lookup"><span data-stu-id="e8707-195">The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host.</span></span> <span data-ttu-id="e8707-196">當您是透過與<xref:System.Net.Sockets.TcpClient>，務必呼叫其<xref:System.Net.Sockets.TcpClient.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-196">When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span> <span data-ttu-id="e8707-197">如果您想要更大的彈性比<xref:System.Net.Sockets.TcpClient>供應項目，請考慮使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。</span><span class="sxs-lookup"><span data-stu-id="e8707-197">If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-198">在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-198">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e8707-199">如需詳細資訊，請參閱 < [.NET Framework 中的網路追蹤](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-199">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-200">在下列程式碼範例中，<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法用來傳回<xref:System.Net.Sockets.TcpClient>。</span><span class="sxs-lookup"><span data-stu-id="e8707-200">In the following code example, the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is used to return a <xref:System.Net.Sockets.TcpClient>.</span></span> <span data-ttu-id="e8707-201">這<xref:System.Net.Sockets.TcpClient>用來與新連線的用戶端通訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-201">This <xref:System.Net.Sockets.TcpClient> is used to communicate with the newly connected client.</span></span>  
  
 [!code-cpp[Classic TcpListenerExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListenerExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListenerExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListenerExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListenerExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListenerExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e8707-202">尚未以呼叫 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 來啟動接聽項。</span><span class="sxs-lookup"><span data-stu-id="e8707-202">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="e8707-203">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 屬性取得特定錯誤碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-203">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="e8707-204">一旦取得這個錯誤碼，您就可以參閱 <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets 第 2 版 API 錯誤碼</see>文件，以取得錯誤的詳細描述。</span><span class="sxs-lookup"><span data-stu-id="e8707-204">When you have obtained this code, you can refer to the <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets version 2 API error code</see> documentation for a detailed description of the error.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClientAsync () As Task(Of TcpClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::TcpClient ^&gt; ^ AcceptTcpClientAsync();" />
      <MemberSignature Language="F#" Value="member this.AcceptTcpClientAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;" Usage="tcpListener.AcceptTcpClientAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e8707-205">以非同步作業的方式接受暫止連接要求。</span><span class="sxs-lookup"><span data-stu-id="e8707-205">Accepts a pending connection request as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="e8707-206">工作物件，表示非同步作業。</span><span class="sxs-lookup"><span data-stu-id="e8707-206">The task object representing the asynchronous operation.</span></span> <span data-ttu-id="e8707-207">工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回用來傳送和接收資料的 <see cref="T:System.Net.Sockets.TcpClient" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-207">The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns a <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-208">這項作業不會封鎖。</span><span class="sxs-lookup"><span data-stu-id="e8707-208">This operation will not block.</span></span> <span data-ttu-id="e8707-209">傳回<xref:System.Threading.Tasks.Task%601>物件會完成之後在接受 TCP 連線。</span><span class="sxs-lookup"><span data-stu-id="e8707-209">The returned <xref:System.Threading.Tasks.Task%601> object will complete after the TCP connection has been accepted.</span></span>  
  
 <span data-ttu-id="e8707-210">使用<xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType>方法，以取得基礎<xref:System.Net.Sockets.NetworkStream>傳回的<xref:System.Net.Sockets.TcpClient>在<xref:System.Threading.Tasks.Task%601>。</span><span class="sxs-lookup"><span data-stu-id="e8707-210">Use the <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> method to obtain the underlying <xref:System.Net.Sockets.NetworkStream> of the returned <xref:System.Net.Sockets.TcpClient> in the <xref:System.Threading.Tasks.Task%601>.</span></span> <span data-ttu-id="e8707-211"><xref:System.Net.Sockets.NetworkStream>會為您提供方法來傳送和接收與遠端主機。</span><span class="sxs-lookup"><span data-stu-id="e8707-211">The <xref:System.Net.Sockets.NetworkStream> will provide you with methods for sending and receiving with the remote host.</span></span> <span data-ttu-id="e8707-212">當您是透過與<xref:System.Net.Sockets.TcpClient>，務必呼叫其<xref:System.Net.Sockets.TcpClient.Close%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-212">When you are through with the <xref:System.Net.Sockets.TcpClient>, be sure to call its <xref:System.Net.Sockets.TcpClient.Close%2A> method.</span></span> <span data-ttu-id="e8707-213">如果您想要更大的彈性比<xref:System.Net.Sockets.TcpClient>供應項目，請考慮使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>或<xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>。</span><span class="sxs-lookup"><span data-stu-id="e8707-213">If you want greater flexibility than a <xref:System.Net.Sockets.TcpClient> offers, consider using <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> or <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-214">在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-214">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e8707-215">如需詳細資訊，請參閱 < [.NET Framework 中的網路追蹤](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-215">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e8707-216">尚未以呼叫 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 來啟動接聽項。</span><span class="sxs-lookup"><span data-stu-id="e8707-216">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="e8707-217">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 屬性取得特定錯誤碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-217">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="e8707-218">一旦取得這個錯誤碼，您就可以參閱 <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets 第 2 版 API 錯誤碼</see>文件，以取得錯誤的詳細描述。</span><span class="sxs-lookup"><span data-stu-id="e8707-218">When you have obtained this code, you can refer to the <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets version 2 API error code</see> documentation for a detailed description of the error.</span></span></exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Active" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool" Usage="System.Net.Sockets.TcpListener.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8707-219">取得值，指出 <see cref="T:System.Net.Sockets.TcpListener" /> 是否正在接聽用戶端連接。</span><span class="sxs-lookup"><span data-stu-id="e8707-219">Gets a value that indicates whether <see cref="T:System.Net.Sockets.TcpListener" /> is actively listening for client connections.</span></span></summary>
        <value><span data-ttu-id="e8707-220">如果 <see cref="T:System.Net.Sockets.TcpListener" /> 正在接聽則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-220"><see langword="true" /> if <see cref="T:System.Net.Sockets.TcpListener" /> is actively listening; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-221">類別衍生自<xref:System.Net.Sockets.TcpListener>可以使用這個屬性來判斷如果<xref:System.Net.Sockets.Socket>目前正在接聽連入連線嘗試。</span><span class="sxs-lookup"><span data-stu-id="e8707-221">Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to determine if the <xref:System.Net.Sockets.Socket> is currently listening for incoming connection attempts.</span></span> <span data-ttu-id="e8707-222"><xref:System.Net.Sockets.TcpClient.Active%2A>屬性可用來避免備援<xref:System.Net.Sockets.TcpListener.Start%2A>嘗試。</span><span class="sxs-lookup"><span data-stu-id="e8707-222">The <xref:System.Net.Sockets.TcpClient.Active%2A> property can be used to avoid redundant <xref:System.Net.Sockets.TcpListener.Start%2A> attempts.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberSignature Language="F#" Value="member this.AllowNatTraversal : bool -&gt; unit" Usage="tcpListener.AllowNatTraversal allowed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="allowed"><span data-ttu-id="e8707-223">布林值，指定是否啟用或停用 NAT 周遊。</span><span class="sxs-lookup"><span data-stu-id="e8707-223">A Boolean value that specifies whether to enable or disable NAT traversal.</span></span></param>
        <summary><span data-ttu-id="e8707-224">啟用或停用在 <see cref="T:System.Net.Sockets.TcpListener" /> 執行個體上的網路位址轉譯 (NAT) 周遊。</span><span class="sxs-lookup"><span data-stu-id="e8707-224">Enables or disables Network Address Translation (NAT) traversal on a <see cref="T:System.Net.Sockets.TcpListener" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-225"><xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>方法用來啟用或停用 NAT 周遊<xref:System.Net.Sockets.TcpListener>執行個體。</span><span class="sxs-lookup"><span data-stu-id="e8707-225">The <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method is used to enable or disable NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.</span></span> <span data-ttu-id="e8707-226">您可以使用 Teredo，6to4 或 ISATAP 通道提供 NAT 周遊。</span><span class="sxs-lookup"><span data-stu-id="e8707-226">NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</span></span>  
  
 <span data-ttu-id="e8707-227">當`allowed`參數為 false，<xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel>相關聯的通訊端上的選項設定為<xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>。</span><span class="sxs-lookup"><span data-stu-id="e8707-227">When the `allowed` parameter is false, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>.</span></span> <span data-ttu-id="e8707-228">此明確停用 NAT 周遊<xref:System.Net.Sockets.TcpListener>執行個體。</span><span class="sxs-lookup"><span data-stu-id="e8707-228">This explicitly disables NAT traversal for a <xref:System.Net.Sockets.TcpListener> instance.</span></span>  
  
 <span data-ttu-id="e8707-229">當`allowed`參數為 true，<xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel>相關聯的通訊端上的選項設定為<xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>。</span><span class="sxs-lookup"><span data-stu-id="e8707-229">When the `allowed` parameter is true, the <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> option on the associated socket is set to <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>.</span></span> <span data-ttu-id="e8707-230">這可能會讓 NAT 周遊<xref:System.Net.Sockets.TcpListener>根據就地的系統上的防火牆規則。</span><span class="sxs-lookup"><span data-stu-id="e8707-230">This may allow NAT traversal for a <xref:System.Net.Sockets.TcpListener> depending on firewall rules in place on the system.</span></span>  
  
 <span data-ttu-id="e8707-231"><xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>必須叫用方法，才能呼叫<xref:System.Net.Sockets.TcpListener.Start%2A>方法，以開始接聽連入連線要求 （之前繫結的通訊端）。</span><span class="sxs-lookup"><span data-stu-id="e8707-231">The <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method must be invoked prior to calling the <xref:System.Net.Sockets.TcpListener.Start%2A> method to begin listening for incoming connection requests (before the socket is bound).</span></span> <span data-ttu-id="e8707-232">如果<xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A>方法之後呼叫<xref:System.Net.Sockets.TcpListener.Start%2A>方法，則<xref:System.InvalidOperationException>就會擲回。</span><span class="sxs-lookup"><span data-stu-id="e8707-232">If <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> method is called after the <xref:System.Net.Sockets.TcpListener.Start%2A> method, then an <xref:System.InvalidOperationException> will be thrown.</span></span>  
  
 <span data-ttu-id="e8707-233">Teredo 位址是 IPv6 位址首碼為 2001年:: / 32。</span><span class="sxs-lookup"><span data-stu-id="e8707-233">A Teredo address is an IPv6 address with the prefix of 2001::/32.</span></span> <span data-ttu-id="e8707-234">Teredo 位址可以是透過一般的 DNS 名稱解析傳回或列舉為 IPv6 位址指派給本機介面。</span><span class="sxs-lookup"><span data-stu-id="e8707-234">Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e8707-235">已在呼叫 <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> 方法之後呼叫 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 方法</span><span class="sxs-lookup"><span data-stu-id="e8707-235">The <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> method was called after calling the <see cref="M:System.Net.Sockets.TcpListener.Start" /> method</span></span></exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptSocket">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptSocket(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptSocket (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptSocket(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAcceptSocket : AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpListener.BeginAcceptSocket (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="e8707-236"><see cref="T:System.AsyncCallback" /> 委派，會於作業完成時參考要叫用的方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-236">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="e8707-237">使用者定義物件，包含接受作業資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-237">A user-defined object containing information about the accept operation.</span></span> <span data-ttu-id="e8707-238">作業完成時會將這個物件傳遞至 <paramref name="callback" /> 委派。</span><span class="sxs-lookup"><span data-stu-id="e8707-238">This object is passed to the <paramref name="callback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="e8707-239">開始非同步作業以接受連入的連接嘗試。</span><span class="sxs-lookup"><span data-stu-id="e8707-239">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
        <returns><span data-ttu-id="e8707-240"><see cref="T:System.IAsyncResult" />，參考 <see cref="T:System.Net.Sockets.Socket" /> 的非同步建立。</span><span class="sxs-lookup"><span data-stu-id="e8707-240">An <see cref="T:System.IAsyncResult" /> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.Socket" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-241">非同步<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>作業必須完成呼叫<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-241">The asynchronous <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method.</span></span> <span data-ttu-id="e8707-242">一般而言，會叫用方法`callback`委派。</span><span class="sxs-lookup"><span data-stu-id="e8707-242">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="e8707-243">這個方法不會封鎖直到作業完成為止。</span><span class="sxs-lookup"><span data-stu-id="e8707-243">This method does not block until the operation completes.</span></span> <span data-ttu-id="e8707-244">若要封鎖，直到作業完成為止，使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-244">To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span>  
  
 <span data-ttu-id="e8707-245">如需使用非同步程式設計模型的詳細資訊，請參閱 < [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-245">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-246">您可以呼叫<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>屬性傳回之<xref:System.Net.Sockets.Socket>來識別遠端主機的網路位址和連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-246">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-247">如果您收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>屬性取得特定的錯誤碼，並參照[Windows Sockets 第 2 版 API 錯誤碼](/windows/desktop/winsock/windows-sockets-error-codes-2)錯誤的詳細描述的文件。</span><span class="sxs-lookup"><span data-stu-id="e8707-247">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-248">在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-248">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e8707-249">如需詳細資訊，請參閱 < [.NET Framework 中的網路追蹤](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-249">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-250">下列程式碼範例示範使用<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>方法來建立並與通訊端連接。</span><span class="sxs-lookup"><span data-stu-id="e8707-250">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket.</span></span> <span data-ttu-id="e8707-251">回呼委派呼叫<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>方法以結束非同步要求。</span><span class="sxs-lookup"><span data-stu-id="e8707-251">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="e8707-252">嘗試存取通訊端時發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="e8707-252">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e8707-253"><see cref="T:System.Net.Sockets.Socket" /> 已關閉。</span><span class="sxs-lookup"><span data-stu-id="e8707-253">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptTcpClient">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptTcpClient(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptTcpClient (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptTcpClient(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAcceptTcpClient : AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpListener.BeginAcceptTcpClient (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="e8707-254"><see cref="T:System.AsyncCallback" /> 委派，會於作業完成時參考要叫用的方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-254">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the operation is complete.</span></span></param>
        <param name="state"><span data-ttu-id="e8707-255">使用者定義物件，包含接受作業資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-255">A user-defined object containing information about the accept operation.</span></span> <span data-ttu-id="e8707-256">作業完成時會將這個物件傳遞至 <paramref name="callback" /> 委派。</span><span class="sxs-lookup"><span data-stu-id="e8707-256">This object is passed to the <paramref name="callback" /> delegate when the operation is complete.</span></span></param>
        <summary><span data-ttu-id="e8707-257">開始非同步作業以接受連入的連接嘗試。</span><span class="sxs-lookup"><span data-stu-id="e8707-257">Begins an asynchronous operation to accept an incoming connection attempt.</span></span></summary>
        <returns><span data-ttu-id="e8707-258"><see cref="T:System.IAsyncResult" />，參考 <see cref="T:System.Net.Sockets.TcpClient" /> 的非同步建立。</span><span class="sxs-lookup"><span data-stu-id="e8707-258">An <see cref="T:System.IAsyncResult" /> that references the asynchronous creation of the <see cref="T:System.Net.Sockets.TcpClient" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-259">非同步<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>作業必須完成呼叫<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-259">The asynchronous <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> operation must be completed by calling the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method.</span></span> <span data-ttu-id="e8707-260">一般而言，會叫用方法`callback`委派。</span><span class="sxs-lookup"><span data-stu-id="e8707-260">Typically, the method is invoked by the `callback` delegate.</span></span>  
  
 <span data-ttu-id="e8707-261">這個方法不會封鎖直到作業完成為止。</span><span class="sxs-lookup"><span data-stu-id="e8707-261">This method does not block until the operation completes.</span></span> <span data-ttu-id="e8707-262">若要封鎖，直到作業完成為止，使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-262">To block until the operation completes, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.</span></span>  
  
 <span data-ttu-id="e8707-263">如需使用非同步程式設計模型的詳細資訊，請參閱 < [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-263">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-264">如果您收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>屬性取得特定的錯誤碼，並參照[Windows Sockets 第 2 版 API 錯誤碼](/windows/desktop/winsock/windows-sockets-error-codes-2)錯誤的詳細描述的文件。</span><span class="sxs-lookup"><span data-stu-id="e8707-264">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-265">在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-265">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e8707-266">如需詳細資訊，請參閱 < [.NET Framework 中的網路追蹤](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-266">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-267">下列程式碼範例示範使用<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>方法來建立並與通訊端連接。</span><span class="sxs-lookup"><span data-stu-id="e8707-267">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket.</span></span> <span data-ttu-id="e8707-268">回呼委派呼叫<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>方法以結束非同步要求。</span><span class="sxs-lookup"><span data-stu-id="e8707-268">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="e8707-269">嘗試存取通訊端時發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="e8707-269">An error occurred while attempting to access the socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e8707-270"><see cref="T:System.Net.Sockets.Socket" /> 已關閉。</span><span class="sxs-lookup"><span data-stu-id="e8707-270">The <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.Sockets.TcpListener Create (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Sockets.TcpListener Create(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Create(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (port As Integer) As TcpListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Sockets::TcpListener ^ Create(int port);" />
      <MemberSignature Language="F#" Value="static member Create : int -&gt; System.Net.Sockets.TcpListener" Usage="System.Net.Sockets.TcpListener.Create port" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="port"><span data-ttu-id="e8707-271">通訊埠，將會在此處接聽連入的連接嘗試。</span><span class="sxs-lookup"><span data-stu-id="e8707-271">The port on which to listen for incoming connection attempts.</span></span></param>
        <summary><span data-ttu-id="e8707-272">建立要在指定的連接埠上接聽的新 <see cref="T:System.Net.Sockets.TcpListener" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="e8707-272">Creates a new <see cref="T:System.Net.Sockets.TcpListener" /> instance to listen on the specified port.</span></span></summary>
        <returns><span data-ttu-id="e8707-273">要在指定的連接埠上接聽的新 <see cref="T:System.Net.Sockets.TcpListener" /> 執行個體。</span><span class="sxs-lookup"><span data-stu-id="e8707-273">A new <see cref="T:System.Net.Sockets.TcpListener" /> instance to listen on the specified port.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAcceptSocket(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptSocket (asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAcceptSocket(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAcceptSocket : IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="tcpListener.EndAcceptSocket asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="e8707-274">呼叫 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> 方法時傳回的 <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-274">An <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="e8707-275">以非同步方式接受連入的連接嘗試，並建立新的 <see cref="T:System.Net.Sockets.Socket" /> 來處理遠端主機通訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-275">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.Socket" /> to handle remote host communication.</span></span></summary>
        <returns><span data-ttu-id="e8707-276"><see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-276">A <see cref="T:System.Net.Sockets.Socket" />.</span></span>  
  
<span data-ttu-id="e8707-277">用來傳送和接收資料的 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-277">The <see cref="T:System.Net.Sockets.Socket" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-278">這個方法會封鎖直到作業完成。</span><span class="sxs-lookup"><span data-stu-id="e8707-278">This method blocks until the operation is complete.</span></span> <span data-ttu-id="e8707-279">若要以同步方式執行這項作業，使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-279">To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-280">您可以呼叫<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>屬性傳回之<xref:System.Net.Sockets.Socket>來識別遠端主機的網路位址和連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-280">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the returned <xref:System.Net.Sockets.Socket> to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-281">如果您收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>屬性取得特定的錯誤碼，並參照[Windows Sockets 第 2 版 API 錯誤碼](/windows/desktop/winsock/windows-sockets-error-codes-2)錯誤的詳細描述的文件。</span><span class="sxs-lookup"><span data-stu-id="e8707-281">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-282">在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-282">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e8707-283">如需詳細資訊，請參閱 < [.NET Framework 中的網路追蹤](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-283">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-284">下列程式碼範例示範使用<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A>方法來建立並與通訊端連接。</span><span class="sxs-lookup"><span data-stu-id="e8707-284">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket.</span></span> <span data-ttu-id="e8707-285">回呼委派呼叫<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>方法以結束非同步要求。</span><span class="sxs-lookup"><span data-stu-id="e8707-285">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e8707-286">基礎 <see cref="T:System.Net.Sockets.Socket" /> 已關閉。</span><span class="sxs-lookup"><span data-stu-id="e8707-286">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e8707-287"><paramref name="asyncResult" /> 參數為 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-287">The <paramref name="asyncResult" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e8707-288">呼叫 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> 方法時不會建立 <paramref name="asyncResult" /> 參數。</span><span class="sxs-lookup"><span data-stu-id="e8707-288">The <paramref name="asyncResult" /> parameter was not created by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e8707-289">先前已呼叫 <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-289">The <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> method was previously called.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="e8707-290">嘗試存取 <see cref="T:System.Net.Sockets.Socket" /> 時發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="e8707-290">An error occurred while attempting to access the <see cref="T:System.Net.Sockets.Socket" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient EndAcceptTcpClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptTcpClient (asyncResult As IAsyncResult) As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ EndAcceptTcpClient(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAcceptTcpClient : IAsyncResult -&gt; System.Net.Sockets.TcpClient" Usage="tcpListener.EndAcceptTcpClient asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="e8707-291">呼叫 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> 方法時傳回的 <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-291">An <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <summary><span data-ttu-id="e8707-292">以非同步方式接受連入的連接嘗試，並建立新的 <see cref="T:System.Net.Sockets.TcpClient" /> 來處理遠端主機通訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-292">Asynchronously accepts an incoming connection attempt and creates a new <see cref="T:System.Net.Sockets.TcpClient" /> to handle remote host communication.</span></span></summary>
        <returns><span data-ttu-id="e8707-293"><see cref="T:System.Net.Sockets.TcpClient" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-293">A <see cref="T:System.Net.Sockets.TcpClient" />.</span></span>  
  
<span data-ttu-id="e8707-294">用來傳送和接收資料的 <see cref="T:System.Net.Sockets.TcpClient" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-294">The <see cref="T:System.Net.Sockets.TcpClient" /> used to send and receive data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-295">這個方法會封鎖直到作業完成。</span><span class="sxs-lookup"><span data-stu-id="e8707-295">This method blocks until the operation is complete.</span></span> <span data-ttu-id="e8707-296">若要以同步方式執行這項作業，使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-296">To perform this operation synchronously, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-297">您可以呼叫<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>屬性的基礎通訊端 (<xref:System.Net.Sockets.TcpClient.Client%2A>) 來識別遠端主機的網路位址和連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-297">You can call the <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> property of the underlying socket (<xref:System.Net.Sockets.TcpClient.Client%2A>) to identify the remote host's network address and port number.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-298">如果您收到<xref:System.Net.Sockets.SocketException>，使用<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType>屬性取得特定的錯誤碼，並參照[Windows Sockets 第 2 版 API 錯誤碼](/windows/desktop/winsock/windows-sockets-error-codes-2)錯誤的詳細描述的文件。</span><span class="sxs-lookup"><span data-stu-id="e8707-298">If you receive a <xref:System.Net.Sockets.SocketException>, use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-299">在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-299">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e8707-300">如需詳細資訊，請參閱 < [.NET Framework 中的網路追蹤](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-300">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-301">下列程式碼範例示範使用<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A>方法來建立並與通訊端連接。</span><span class="sxs-lookup"><span data-stu-id="e8707-301">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket.</span></span> <span data-ttu-id="e8707-302">回呼委派呼叫<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>方法以結束非同步要求。</span><span class="sxs-lookup"><span data-stu-id="e8707-302">The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8707-303">取得或設定 <see cref="T:System.Boolean" /> 值，其指定 <see cref="T:System.Net.Sockets.TcpListener" /> 是否只允許一個基礎通訊端接聽特定的通訊埠。</span><span class="sxs-lookup"><span data-stu-id="e8707-303">Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.TcpListener" /> allows only one underlying socket to listen to a specific port.</span></span></summary>
        <value><span data-ttu-id="e8707-304">如果 <see cref="T:System.Net.Sockets.TcpListener" /> 只允許一個 <see cref="T:System.Net.Sockets.TcpListener" /> 接聽特定的通訊埠，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-304"><see langword="true" /> if the <see cref="T:System.Net.Sockets.TcpListener" /> allows only one <see cref="T:System.Net.Sockets.TcpListener" /> to listen to a specific port; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="e8707-305">。</span><span class="sxs-lookup"><span data-stu-id="e8707-305">.</span></span> <span data-ttu-id="e8707-306">若為 Windows Server 2003 和 Windows XP Service Pack 2 (含) 以後版本，則預設值為 <see langword="true" />，若為所有其他版本，則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-306">The default is <see langword="true" /> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <see langword="false" /> for all other versions.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-307">根據預設，多個接聽程式可以接聽特定通訊埠。</span><span class="sxs-lookup"><span data-stu-id="e8707-307">By default, multiple listeners can listen to a specific port.</span></span> <span data-ttu-id="e8707-308">不過，只有其中一個接聽程式可以執行網路流量傳送至連接埠的作業。</span><span class="sxs-lookup"><span data-stu-id="e8707-308">However, only one of the listeners can perform operations on the network traffic sent to the port.</span></span> <span data-ttu-id="e8707-309">如果多個接聽程式會嘗試繫結到特定的連接埠，則具有更特定的 IP 位址會處理傳送到該連接埠的網路流量。</span><span class="sxs-lookup"><span data-stu-id="e8707-309">If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port.</span></span> <span data-ttu-id="e8707-310">您可以使用<xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>以防止多個接聽程式接聽特定連接埠的屬性。</span><span class="sxs-lookup"><span data-stu-id="e8707-310">You can use the <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> property to prevent multiple listeners from listening to a specific port.</span></span>  
  
 <span data-ttu-id="e8707-311">設定這個屬性，然後再呼叫<xref:System.Net.Sockets.TcpListener.Start%2A>，或呼叫<xref:System.Net.Sockets.TcpListener.Stop%2A>方法，然後設定此屬性。</span><span class="sxs-lookup"><span data-stu-id="e8707-311">Set this property before calling <xref:System.Net.Sockets.TcpListener.Start%2A>, or call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method and then set this property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-312">下列程式碼範例會取得並設定<xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="e8707-312">The following code example gets and sets the <xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> property.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#2)]
 [!code-vb[System.Net.Sockets.TcpListener1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e8707-313"><see cref="T:System.Net.Sockets.TcpListener" /> 已經啟動。</span><span class="sxs-lookup"><span data-stu-id="e8707-313">The <see cref="T:System.Net.Sockets.TcpListener" /> has been started.</span></span> <span data-ttu-id="e8707-314">呼叫 <see cref="M:System.Net.Sockets.TcpListener.Stop" /> 方法，並設定 <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> 屬性。</span><span class="sxs-lookup"><span data-stu-id="e8707-314">Call the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method and then set the <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> property.</span></span></exception>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="e8707-315">嘗試存取基礎通訊端時發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="e8707-315">An error occurred when attempting to access the underlying socket.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="e8707-316">基礎 <see cref="T:System.Net.Sockets.Socket" /> 已關閉。</span><span class="sxs-lookup"><span data-stu-id="e8707-316">The underlying <see cref="T:System.Net.Sockets.Socket" /> has been closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpListener ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="tcpListener.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e8707-317">釋放 <see cref="T:System.Net.Sockets.TcpListener" /> 類別所使用的資源。</span><span class="sxs-lookup"><span data-stu-id="e8707-317">Frees resources used by the <see cref="T:System.Net.Sockets.TcpListener" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="e8707-318"><xref:System.Net.Sockets.TcpListener>類別相關聯的完成項免費資源<xref:System.Net.Sockets.TcpListener>執行個體。</span><span class="sxs-lookup"><span data-stu-id="e8707-318">The <xref:System.Net.Sockets.TcpListener> class finalizer free resources associated with the <xref:System.Net.Sockets.TcpListener> instance.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndpoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndpoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndpoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndpoint { System::Net::EndPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalEndpoint : System.Net.EndPoint" Usage="System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8707-319">取得目前 <see cref="T:System.Net.EndPoint" /> 的 <see cref="T:System.Net.Sockets.TcpListener" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-319">Gets the underlying <see cref="T:System.Net.EndPoint" /> of the current <see cref="T:System.Net.Sockets.TcpListener" />.</span></span></summary>
        <value><span data-ttu-id="e8707-320">繫結至 <see cref="T:System.Net.EndPoint" /> 的 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-320">The <see cref="T:System.Net.EndPoint" /> to which the <see cref="T:System.Net.Sockets.Socket" /> is bound.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-321">您可以使用<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>屬性來識別要用來進行的通訊端連線之後，接聽內送的用戶端連接要求，區域網路介面和連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-321">You can use the <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made.</span></span> <span data-ttu-id="e8707-322">您必須先將此轉型<xref:System.Net.EndPoint>至<xref:System.Net.IPEndPoint>。</span><span class="sxs-lookup"><span data-stu-id="e8707-322">You must first cast this <xref:System.Net.EndPoint> to an <xref:System.Net.IPEndPoint>.</span></span> <span data-ttu-id="e8707-323">您可以接著呼叫<xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType>屬性，以擷取本機的 IP 位址，而<xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType>屬性，以擷取本機連接埠號碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-323">You can then call the <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> property to retrieve the local IP address, and the <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> property to retrieve the local port number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-324">下列程式碼範例顯示在其上的本機 IP 位址和連接埠號碼<xref:System.Net.Sockets.TcpListener>接聽內送連接要求。</span><span class="sxs-lookup"><span data-stu-id="e8707-324">The following code example displays the local IP address and port number on which the <xref:System.Net.Sockets.TcpListener> is listening for incoming connection requests.</span></span>  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Pending">
      <MemberSignature Language="C#" Value="public bool Pending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Pending() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Pending" />
      <MemberSignature Language="VB.NET" Value="Public Function Pending () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Pending();" />
      <MemberSignature Language="F#" Value="member this.Pending : unit -&gt; bool" Usage="tcpListener.Pending " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e8707-325">決定是否有暫止連接要求存在。</span><span class="sxs-lookup"><span data-stu-id="e8707-325">Determines if there are pending connection requests.</span></span></summary>
        <returns><span data-ttu-id="e8707-326">如果連接為暫止，則為 <see langword="true" />，否則為 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-326"><see langword="true" /> if connections are pending; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-327">此非封鎖性的方法會判斷是否有任何暫止連接要求。</span><span class="sxs-lookup"><span data-stu-id="e8707-327">This non-blocking method determines if there are any pending connection requests.</span></span> <span data-ttu-id="e8707-328">因為<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>並<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法會封鎖執行，直到<xref:System.Net.Sockets.TcpListener.Start%2A>方法已排入佇列的連入連線要求，<xref:System.Net.Sockets.TcpListener.Pending%2A>方法可用來判斷連線是否可用，然後再嘗試接受這些條款。</span><span class="sxs-lookup"><span data-stu-id="e8707-328">Because the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> and <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> methods block execution until the <xref:System.Net.Sockets.TcpListener.Start%2A> method has queued an incoming connection request, the <xref:System.Net.Sockets.TcpListener.Pending%2A> method can be used to determine if connections are available before attempting to accept them.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-329">下列程式碼範例會檢查<xref:System.Net.Sockets.TcpListener.Pending%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-329">The following code example checks the <xref:System.Net.Sockets.TcpListener.Pending%2A> method.</span></span> <span data-ttu-id="e8707-330">如果連線要求正在等待被接受，然後呼叫<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-330">If a connection request is waiting to be accepted, then a call to the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is made.</span></span>  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e8707-331">尚未以呼叫 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 來啟動接聽項。</span><span class="sxs-lookup"><span data-stu-id="e8707-331">The listener has not been started with a call to <see cref="M:System.Net.Sockets.TcpListener.Start" />.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Server" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Server { System::Net::Sockets::Socket ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Server : System.Net.Sockets.Socket" Usage="System.Net.Sockets.TcpListener.Server" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8707-332">取得基礎網路 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-332">Gets the underlying network <see cref="T:System.Net.Sockets.Socket" />.</span></span></summary>
        <value><span data-ttu-id="e8707-333">基礎 <see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-333">The underlying <see cref="T:System.Net.Sockets.Socket" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-334"><xref:System.Net.Sockets.TcpListener> 建立<xref:System.Net.Sockets.Socket>來接聽內送的用戶端連接要求。</span><span class="sxs-lookup"><span data-stu-id="e8707-334"><xref:System.Net.Sockets.TcpListener> creates a <xref:System.Net.Sockets.Socket> to listen for incoming client connection requests.</span></span> <span data-ttu-id="e8707-335">類別衍生自<xref:System.Net.Sockets.TcpListener>可以使用這個屬性來取得此<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="e8707-335">Classes deriving from <xref:System.Net.Sockets.TcpListener> can use this property to get this <xref:System.Net.Sockets.Socket>.</span></span> <span data-ttu-id="e8707-336">使用基礎<xref:System.Net.Sockets.Socket>所傳回<xref:System.Net.Sockets.TcpListener.Server%2A>屬性，如果您需要存取超過其<xref:System.Net.Sockets.TcpListener>提供。</span><span class="sxs-lookup"><span data-stu-id="e8707-336">Use the underlying <xref:System.Net.Sockets.Socket> returned by the <xref:System.Net.Sockets.TcpListener.Server%2A> property if you require access beyond that which <xref:System.Net.Sockets.TcpListener> provides.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-337"><xref:System.Net.Sockets.TcpListener.Server%2A>屬性只會傳回<xref:System.Net.Sockets.Socket>用來接聽內送的用戶端連接要求。</span><span class="sxs-lookup"><span data-stu-id="e8707-337">The <xref:System.Net.Sockets.TcpListener.Server%2A> property only returns the <xref:System.Net.Sockets.Socket> used to listen for incoming client connection requests.</span></span> <span data-ttu-id="e8707-338">使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法以接受暫止連接要求，並取得<xref:System.Net.Sockets.Socket>來傳送和接收資料。</span><span class="sxs-lookup"><span data-stu-id="e8707-338">Use the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.Socket> for sending and receiving data.</span></span> <span data-ttu-id="e8707-339">您也可以使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法以接受暫止連接要求，並取得<xref:System.Net.Sockets.TcpClient>來傳送和接收資料。</span><span class="sxs-lookup"><span data-stu-id="e8707-339">You can also use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method to accept a pending connection request and obtain a <xref:System.Net.Sockets.TcpClient> for sending and receiving data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-340">下列程式碼範例示範使用<xref:System.Net.Sockets.TcpListener.Server%2A>屬性。</span><span class="sxs-lookup"><span data-stu-id="e8707-340">The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.Server%2A> property.</span></span> <span data-ttu-id="e8707-341">基礎<xref:System.Net.Sockets.Socket>會擷取並<xref:System.Net.Sockets.SocketOptionName.Linger><xref:System.Net.Sockets.Socket>選項設定的逾時時間在 10 秒後如果資料仍然會保留在的網路緩衝區之後關閉連接。</span><span class="sxs-lookup"><span data-stu-id="e8707-341">The underlying <xref:System.Net.Sockets.Socket> is retrieved and the <xref:System.Net.Sockets.SocketOptionName.Linger><xref:System.Net.Sockets.Socket> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.</span></span>  
  
 [!code-csharp[TcpListenerProtectedMembers1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListenerProtectedMembers1/CS/source.cs#1)]
 [!code-vb[TcpListenerProtectedMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListenerProtectedMembers1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8707-342">啟動對輸入連接要求的接聽。</span><span class="sxs-lookup"><span data-stu-id="e8707-342">Starts listening for incoming connection requests.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="tcpListener.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e8707-343">啟動對輸入連接要求的接聽。</span><span class="sxs-lookup"><span data-stu-id="e8707-343">Starts listening for incoming connection requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-344"><xref:System.Net.Sockets.TcpListener.Start%2A>方法會初始化基礎<xref:System.Net.Sockets.Socket>、 將它的本機端點，繫結和接聽連入連線嘗試。</span><span class="sxs-lookup"><span data-stu-id="e8707-344">The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts.</span></span> <span data-ttu-id="e8707-345">如果收到連線要求，則<xref:System.Net.Sockets.TcpListener.Start%2A>方法會要求排入佇列，並繼續接聽其他要求，直到您呼叫<xref:System.Net.Sockets.TcpListener.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-345">If a connection request is received, the <xref:System.Net.Sockets.TcpListener.Start%2A> method will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method.</span></span> <span data-ttu-id="e8707-346">如果<xref:System.Net.Sockets.TcpListener>收到連接要求它有已排入佇列的連線數目上限之後，就會擲回<xref:System.Net.Sockets.SocketException>用戶端上。</span><span class="sxs-lookup"><span data-stu-id="e8707-346">If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections, it will throw a <xref:System.Net.Sockets.SocketException> on the client.</span></span>  
  
 <span data-ttu-id="e8707-347">若要移除的連入連線佇列中的連線，請使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法或<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-347">To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="e8707-348"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法會從佇列移除的連線，並傳回<xref:System.Net.Sockets.TcpClient>可用來傳送和接收資料。</span><span class="sxs-lookup"><span data-stu-id="e8707-348">The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="e8707-349"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法會傳回<xref:System.Net.Sockets.Socket>可用來執行相同的動作。</span><span class="sxs-lookup"><span data-stu-id="e8707-349">The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same.</span></span> <span data-ttu-id="e8707-350">如果您的應用程式只需要同步 I/O，請使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。</span><span class="sxs-lookup"><span data-stu-id="e8707-350">If your application only requires synchronous I/O, use <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span></span> <span data-ttu-id="e8707-351">如需詳細行為的控制項時，使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。</span><span class="sxs-lookup"><span data-stu-id="e8707-351">For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.</span></span> <span data-ttu-id="e8707-352">這兩種方法會封鎖直到佇列中的連線要求為止。</span><span class="sxs-lookup"><span data-stu-id="e8707-352">Both of these methods block until a connection request is available in the queue.</span></span>  
  
 <span data-ttu-id="e8707-353">使用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法以關閉<xref:System.Net.Sockets.TcpListener>並停止接聽。</span><span class="sxs-lookup"><span data-stu-id="e8707-353">Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening.</span></span> <span data-ttu-id="e8707-354">您必須負責個別關閉已接受的連接。</span><span class="sxs-lookup"><span data-stu-id="e8707-354">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-355">在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-355">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e8707-356">如需詳細資訊，請參閱 < [.NET Framework 中的網路追蹤](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-356">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-357">下列程式碼範例示範如何<xref:System.Net.Sockets.TcpListener.Start%2A>用來接聽內送的用戶端連線嘗試。</span><span class="sxs-lookup"><span data-stu-id="e8707-357">The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="e8707-358">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 屬性取得特定錯誤碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-358">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="e8707-359">一旦取得這個錯誤碼，您就可以參閱 <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets 第 2 版 API 錯誤碼</see>文件，以取得錯誤的詳細描述。</span><span class="sxs-lookup"><span data-stu-id="e8707-359">When you have obtained this code, you can refer to the <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets version 2 API error code</see> documentation for a detailed description of the error.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(int backlog);" />
      <MemberSignature Language="F#" Value="member this.Start : int -&gt; unit" Usage="tcpListener.Start backlog" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="backlog"><span data-ttu-id="e8707-360">暫止連接佇列的最大長度。</span><span class="sxs-lookup"><span data-stu-id="e8707-360">The maximum length of the pending connections queue.</span></span></param>
        <summary><span data-ttu-id="e8707-361">啟動對含有最大數目暫止連接之連入連接要求的接聽。</span><span class="sxs-lookup"><span data-stu-id="e8707-361">Starts listening for incoming connection requests with a maximum number of pending connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-362"><xref:System.Net.Sockets.TcpListener.Start%2A>方法會初始化基礎<xref:System.Net.Sockets.Socket>、 將它的本機端點，繫結和接聽連入連線嘗試。</span><span class="sxs-lookup"><span data-stu-id="e8707-362">The <xref:System.Net.Sockets.TcpListener.Start%2A> method initializes the underlying <xref:System.Net.Sockets.Socket>, binds it to a local endpoint, and listens for incoming connection attempts.</span></span> <span data-ttu-id="e8707-363">如果收到連線要求，則<xref:System.Net.Sockets.TcpListener.Start%2A>將會排入佇列的要求，並繼續接聽其他要求，直到您呼叫<xref:System.Net.Sockets.TcpListener.Stop%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-363">If a connection request is received, <xref:System.Net.Sockets.TcpListener.Start%2A> will queue the request and continue listening for additional requests until you call the <xref:System.Net.Sockets.TcpListener.Stop%2A> method.</span></span> <span data-ttu-id="e8707-364">如果<xref:System.Net.Sockets.TcpListener>收到連接要求時，它有已排入佇列的則會擲回的連線數目上限之後<xref:System.Net.Sockets.SocketException>用戶端上。</span><span class="sxs-lookup"><span data-stu-id="e8707-364">If <xref:System.Net.Sockets.TcpListener> receives a connection request after it has already queued the maximum number of connections it will throw a <xref:System.Net.Sockets.SocketException> on the client.</span></span>  
  
 <span data-ttu-id="e8707-365">若要移除的連入連線佇列中的連線，請使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法或<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-365">To remove a connection from the incoming connection queue, use either the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method or the <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="e8707-366"><xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>方法會從佇列移除的連線，並傳回<xref:System.Net.Sockets.TcpClient>可用來傳送和接收資料。</span><span class="sxs-lookup"><span data-stu-id="e8707-366">The <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method will remove a connection from the queue and return a <xref:System.Net.Sockets.TcpClient> that you can use to send and receive data.</span></span> <span data-ttu-id="e8707-367"><xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法會傳回<xref:System.Net.Sockets.Socket>可用來執行相同的動作。</span><span class="sxs-lookup"><span data-stu-id="e8707-367">The <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method will return a <xref:System.Net.Sockets.Socket> that you can use to do the same.</span></span> <span data-ttu-id="e8707-368">如果您的應用程式只需要同步 I/O，請使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。</span><span class="sxs-lookup"><span data-stu-id="e8707-368">If your application only requires synchronous I/O, use the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>.</span></span> <span data-ttu-id="e8707-369">如需詳細行為的控制項時，使用<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e8707-369">For more detailed behavioral control, use <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> method.</span></span> <span data-ttu-id="e8707-370">這兩種方法會封鎖直到佇列中的連線要求為止。</span><span class="sxs-lookup"><span data-stu-id="e8707-370">Both of these methods block until a connection request is available in the queue.</span></span>  
  
 <span data-ttu-id="e8707-371">使用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法以關閉<xref:System.Net.Sockets.TcpListener>並停止接聽。</span><span class="sxs-lookup"><span data-stu-id="e8707-371">Use the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the <xref:System.Net.Sockets.TcpListener> and stop listening.</span></span> <span data-ttu-id="e8707-372">您必須負責個別關閉已接受的連接。</span><span class="sxs-lookup"><span data-stu-id="e8707-372">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-373">您可以使用 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> 屬性取得特定的錯誤碼，並參閱 [Windows Sockets 第 2 版 API 錯誤碼](/windows/desktop/winsock/windows-sockets-error-codes-2)文件，以取得錯誤的詳細描述。</span><span class="sxs-lookup"><span data-stu-id="e8707-373">Use the <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> property to obtain the specific error code and refer to the [Windows Sockets version 2 API error code](/windows/desktop/winsock/windows-sockets-error-codes-2) documentation for a detailed description of the error.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-374">在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-374">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e8707-375">如需詳細資訊，請參閱 < [.NET Framework 中的網路追蹤](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-375">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-376">下列程式碼範例示範如何<xref:System.Net.Sockets.TcpListener.Start%2A>用來接聽內送的用戶端連線嘗試。</span><span class="sxs-lookup"><span data-stu-id="e8707-376">The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="e8707-377">存取通訊端時發生錯誤。</span><span class="sxs-lookup"><span data-stu-id="e8707-377">An error occurred while accessing the socket.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e8707-378"><paramref name="backlog" /> 參數小於零或超過允許的最大連接數。</span><span class="sxs-lookup"><span data-stu-id="e8707-378">The <paramref name="backlog" /> parameter is less than zero or exceeds the maximum number of permitted connections.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e8707-379">基礎 <see cref="T:System.Net.Sockets.Socket" /> 為 null。</span><span class="sxs-lookup"><span data-stu-id="e8707-379">The underlying <see cref="T:System.Net.Sockets.Socket" /> is null.</span></span></exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="tcpListener.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e8707-380">關閉接聽程式。</span><span class="sxs-lookup"><span data-stu-id="e8707-380">Closes the listener.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8707-381"><xref:System.Net.Sockets.TcpListener.Stop%2A> 關閉接聽程式。</span><span class="sxs-lookup"><span data-stu-id="e8707-381"><xref:System.Net.Sockets.TcpListener.Stop%2A> closes the listener.</span></span> <span data-ttu-id="e8707-382">在佇列中的任何不被接受的連線要求都將遺失。</span><span class="sxs-lookup"><span data-stu-id="e8707-382">Any unaccepted connection requests in the queue will be lost.</span></span> <span data-ttu-id="e8707-383">接受遠端主機等候連接將會擲回<xref:System.Net.Sockets.SocketException>。</span><span class="sxs-lookup"><span data-stu-id="e8707-383">Remote hosts waiting for a connection to be accepted will throw a <xref:System.Net.Sockets.SocketException>.</span></span> <span data-ttu-id="e8707-384">您必須負責個別關閉已接受的連接。</span><span class="sxs-lookup"><span data-stu-id="e8707-384">You are responsible for closing your accepted connections separately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e8707-385">在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。</span><span class="sxs-lookup"><span data-stu-id="e8707-385">This member outputs trace information when you enable network tracing in your application.</span></span> <span data-ttu-id="e8707-386">如需詳細資訊，請參閱 < [.NET Framework 中的網路追蹤](~/docs/framework/network-programming/network-tracing.md)。</span><span class="sxs-lookup"><span data-stu-id="e8707-386">For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8707-387">下列程式碼範例示範如何使用<xref:System.Net.Sockets.TcpListener.Stop%2A>方法以關閉基礎<xref:System.Net.Sockets.Socket>。</span><span class="sxs-lookup"><span data-stu-id="e8707-387">The following code example demonstrates using the <xref:System.Net.Sockets.TcpListener.Stop%2A> method to close the underlying <xref:System.Net.Sockets.Socket>.</span></span>  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException"><span data-ttu-id="e8707-388">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 屬性取得特定錯誤碼。</span><span class="sxs-lookup"><span data-stu-id="e8707-388">Use the <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> property to obtain the specific error code.</span></span> <span data-ttu-id="e8707-389">一旦取得這個錯誤碼，您就可以參閱 <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets 第 2 版 API 錯誤碼</see>文件，以取得錯誤的詳細描述。</span><span class="sxs-lookup"><span data-stu-id="e8707-389">When you have obtained this code, you can refer to the <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">Windows Sockets version 2 API error code</see> documentation for a detailed description of the error.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="e8707-390"><see cref="M:System.Net.Sockets.TcpListener.Stop" />方法也會關閉基礎<see cref="T:System.Net.Sockets.Socket" />，並建立新<see cref="T:System.Net.Sockets.Socket" />如<see cref="T:System.Net.Sockets.TcpListener" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-390">The <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method also closes the underlying <see cref="T:System.Net.Sockets.Socket" />, and creates a new <see cref="T:System.Net.Sockets.Socket" /> for the <see cref="T:System.Net.Sockets.TcpListener" />.</span></span> <span data-ttu-id="e8707-391">如果您設定任何屬性的基礎<see cref="T:System.Net.Sockets.Socket" />之前呼叫<see cref="M:System.Net.Sockets.TcpListener.Stop" />方法，這些屬性將不會延續到新<see cref="T:System.Net.Sockets.Socket" />。</span><span class="sxs-lookup"><span data-stu-id="e8707-391">If you set any properties on the underlying <see cref="T:System.Net.Sockets.Socket" /> prior to calling the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method, those properties will not carry over to the new <see cref="T:System.Net.Sockets.Socket" />.</span></span></para></block>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
  </Members>
</Type>