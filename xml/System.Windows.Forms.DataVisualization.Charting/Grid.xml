<Type Name="Grid" FullName="System.Windows.Forms.DataVisualization.Charting.Grid">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ba81731e6b1cd0e57e2ad047d19b4f6197fe81ea" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30629652" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Grid" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Grid extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataVisualization.Charting.Grid" />
  <TypeSignature Language="VB.NET" Value="Public Class Grid" />
  <TypeSignature Language="C++ CLI" Value="public ref class Grid" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Enabled")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供方法和屬性來管理 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Axis" /> 物件的主要和次要格線。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別圖表上的方格中提供的功能，而且會公開使用<xref:System.Windows.Forms.DataVisualization.Charting.Axis.MajorGrid%2A>和<xref:System.Windows.Forms.DataVisualization.Charting.Axis.MinorGrid%2A>的每個屬性<xref:System.Windows.Forms.DataVisualization.Charting.Axis>物件。  
  
 根據預設，主要格線並沒有其<xref:System.Windows.Forms.DataVisualization.Charting.Grid.Interval%2A>， <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffset%2A>， <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalType%2A>，和<xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffsetType%2A>屬性集。 當未設定這些屬性主要格線時，<xref:System.Windows.Forms.DataVisualization.Charting.Chart>控制項會自動決定適當的格線值。  
  
 軸和其預設的次要格線有其<xref:System.Windows.Forms.DataVisualization.Charting.Grid.Interval%2A>， <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffset%2A>， <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalType%2A>，和<xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffsetType%2A>屬性設定為**自動**(0)。 如果啟用軸標籤或次要格線，而不會修改這些屬性，<xref:System.Windows.Forms.DataVisualization.Charting.Chart>控制項會自動決定通常繪製的次要格線的方式。  
  
 軸的方格：  
  
-   您可以啟用或停用。  
  
-   已決定他們會先繪製位置的起點。  
  
-   顯示您可以將樣式、 寬度和色彩的線。  
  
-   可以有自動間隔或手動設定的間隔。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.Grid.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grid();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Forms.DataVisualization.Charting.Grid" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定旗標，這個旗標決定是否啟用主要或次要格線。</summary>
        <value>
          如果已啟用則為 <see langword="True" />，如果已停用則為 <see langword="false" />。 主要格線物件預設為 <see langword="true" />，而次要格線物件則預設為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 主要和次要格線會顯示啟用時，並停用時不可見。  
  
 如果停用，則不顯示刻度標記。  
  
 您可以藉由設定停用刻度<xref:System.Windows.Forms.DataVisualization.Charting.TickMark.TickMarkStyle%2A>屬性<xref:System.Windows.Forms.DataVisualization.Charting.TickMarkStyle.None>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public double Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Interval { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.AxisElementIntervalValueConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定主要或次要格線之間的間隔。</summary>
        <value>
          <see langword="double" /> 值，表示格線之間的間隔。 根據預設，主要格線不會設定此值 (<see cref="F:System.Double.NaN" />)。 如果是次要格線，預設值為零 (0)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依預設這個屬性未設定軸標籤、 主要刻度和主要格線。 如果未設定 — 是根據預設，明確地使用<xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.NotSet>在設計階段，或將值指派為<xref:System.Double.NaN>在執行階段，取決於這個屬性的實際值<xref:System.Windows.Forms.DataVisualization.Charting.Axis.Interval%2A>屬性<xref:System.Windows.Forms.DataVisualization.Charting.Axis>物件圖表項目，例如格線列或刻度標記，所屬。  
  
 次要刻度和格線的間隔永遠不會受到<xref:System.Windows.Forms.DataVisualization.Charting.Axis.Interval%2A>屬性值。  
  
 間隔為單位來測量的軸，並決定適用的圖表項目繪製的頻率。 例如，假設 直條圖有 1 的 X 軸步驟 （也就是 1、 2、 3、 4 和其他等等）;如果您設定<xref:System.Windows.Forms.DataVisualization.Charting.LabelStyle.Interval%2A>屬性為 2 X 軸，軸標籤將會顯示每個其他資料行。  
  
 同樣適用於所有適用的圖表項目。 換句話說，如果區域中的前一個範例已使用行，與<xref:System.Windows.Forms.DataVisualization.Charting.StripLine.IntervalOffset%2A>為 0.5，及其<xref:System.Windows.Forms.DataVisualization.Charting.StripLine.Interval%2A>屬性是 2、 帶狀線會顯示在 0.5、 2.5、 4.5、 等等。  
  
 如果您將圖表元素`Interval`屬性為零，間隔將會自動決定<xref:System.Windows.Forms.DataVisualization.Charting.Chart>控制項。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalOffset">
      <MemberSignature Language="C#" Value="public double IntervalOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 IntervalOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalOffset As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double IntervalOffset { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataVisualization.Charting.AxisElementIntervalValueConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定格線的位移。</summary>
        <value>表示間隔位移的 <see langword="double" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依預設這個屬性未設定軸標籤、 主要刻度和主要格線。 如果未設定 — 根據預設，明確指定 「 未設定 」 在設計階段，或將其指派的值<xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.NotSet>在執行階段，實際的值，這個屬性由<xref:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalOffset%2A>屬性<xref:System.Windows.Forms.DataVisualization.Charting.Axis>物件圖表項目，例如格線或刻度標記，屬於。  
  
 值永遠不會影響上次要刻度和格線的間隔位移<xref:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalOffset%2A>屬性<xref:System.Windows.Forms.DataVisualization.Charting.Axis>物件。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffsetType%2A>屬性設定會定義位移的度量單位。  
  
 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffset%2A>可以是負數的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalOffsetType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalOffsetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalOffsetType" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalOffsetType As DateTimeIntervalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType IntervalOffsetType { System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType get(); void set(System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定主要和次要格線的間隔位移類型。</summary>
        <value>表示間隔類型的 <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> 列舉值。 根據預設，主要格線不會設定此值。 如果是次要格線，預設值為 <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依預設這個屬性未設定軸標籤、 主要刻度和主要格線。 如果未設定 — 根據預設，明確指定 「 未設定 」 在設計階段，或將其指派的值<xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.NotSet>在執行階段，實際的值，這個屬性由<xref:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalOffsetType%2A>屬性<xref:System.Windows.Forms.DataVisualization.Charting.Axis>物件圖表項目 — 格線或刻度標記，例如，屬於。  
  
 次要刻度和格線的間隔位移的類型永遠不會受到<xref:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalOffsetType%2A>屬性值。  
  
 如果此間隔位移類型會設定為<xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto>、<xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalType%2A>屬性可用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntervalType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType IntervalType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalType" />
      <MemberSignature Language="VB.NET" Value="Public Property IntervalType As DateTimeIntervalType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType IntervalType { System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType get(); void set(System::Windows::Forms::DataVisualization::Charting::DateTimeIntervalType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定主要或次要格線的間隔類型。</summary>
        <value>表示間隔類型的 <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType" /> 列舉值。 根據預設，座標軸標籤、主要刻度標記和主要格線不會設定此值 (透過使用 <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.NotSet" /> 列舉值)。 如果是次要刻度標記和格線，預設值為 <see cref="F:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.Auto" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 依預設這個屬性未設定軸標籤、 主要刻度和主要格線。 如果未設定 — 根據預設，明確使用 「 未設定 」 在設計階段，或將其指派的值<xref:System.Windows.Forms.DataVisualization.Charting.DateTimeIntervalType.NotSet>在執行階段，取決於這個屬性的實際值<xref:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalOffsetType%2A>屬性<xref:System.Windows.Forms.DataVisualization.Charting.Axis>物件圖表元素— 格線或刻度標記，例如，屬於。  
  
 次要刻度和格線的間隔類型永遠不會受到值<xref:System.Windows.Forms.DataVisualization.Charting.Axis.IntervalType%2A>屬性。  
  
 間隔類型可以設定為<xref:System.Web.UI.DataVisualization.Charting.DateTimeIntervalType.Auto>; 間隔的類型就會根據 X 值或 Y 值繪製的<xref:System.Windows.Forms.DataVisualization.Charting.DataPoint>根據哪個座標軸適用的項目屬於的物件。  
  
 設定<xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalType%2A>值軸屬性只會影響資料點的值是否<xref:System.DateTime>或`double`值。 此外，<xref:System.Windows.Forms.DataVisualization.Charting.Series.XValueType%2A>或<xref:System.Windows.Forms.DataVisualization.Charting.Series.YValueType%2A>繪製的屬性<xref:System.Windows.Forms.DataVisualization.Charting.Series>必須設為<xref:System.Windows.Forms.DataVisualization.Charting.ChartValueType.Auto>或<xref:System.Windows.Forms.DataVisualization.Charting.ChartValueType.DateTime>。  
  
 設定<xref:System.Windows.Forms.DataVisualization.Charting.Grid.IntervalType%2A>屬性類別目錄軸只會影響如果<xref:System.Windows.Forms.DataVisualization.Charting.Series.XValueType%2A>屬性 (或<xref:System.Windows.Forms.DataVisualization.Charting.Series.YValueType%2A>屬性，視軸有問題而定) 的繪製<xref:System.Windows.Forms.DataVisualization.Charting.Series>物件正<xref:System.Windows.Forms.DataVisualization.Charting.ChartValueType.Auto>或<xref:System.Windows.Forms.DataVisualization.Charting.ChartValueType.DateTime>.  
  
> [!NOTE]
>  星期日，就會被視為一週的第一天。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LineColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LineColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.LineColor" />
      <MemberSignature Language="VB.NET" Value="Public Property LineColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color LineColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Black")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.DataVisualization.Charting.ChartColorEditor, System.Windows.Forms.DataVisualization.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.ColorConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定格線的線條色彩。</summary>
        <value>
          <see cref="T:System.Drawing.Color" /> 物件。 預設值是 <see cref="P:System.Drawing.Color.Black" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.LineColor%2A>屬性用來指定主要和次要刻度標記或格線的色彩。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineDashStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataVisualization.Charting.ChartDashStyle LineDashStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataVisualization.Charting.ChartDashStyle LineDashStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.LineDashStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property LineDashStyle As ChartDashStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataVisualization::Charting::ChartDashStyle LineDashStyle { System::Windows::Forms::DataVisualization::Charting::ChartDashStyle get(); void set(System::Windows::Forms::DataVisualization::Charting::ChartDashStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataVisualization.Charting.ChartDashStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定格線樣式。</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle" /> 列舉值。 預設值為 <see cref="F:System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.Solid" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.LineDashStyle%2A>屬性可以用來指定主要和次要刻度標記或格線的線條樣式。 可以是實線、 虛線，等等。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineWidth">
      <MemberSignature Language="C#" Value="public int LineWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.Grid.LineWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property LineWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineWidth { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定主要和次要格線的線條寬度。</summary>
        <value>
          <see langword="integer" />，表示單位為像素的線條寬度。 預設值為一 (1)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DataVisualization.Charting.Grid.LineWidth%2A>屬性可用來指定線條寬度，以像素的主要和次要刻度標記或資料格中。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>