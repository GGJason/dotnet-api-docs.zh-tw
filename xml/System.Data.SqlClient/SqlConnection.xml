<Type Name="SqlConnection" FullName="System.Data.SqlClient.SqlConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="13a8805b62cac7e4548ac44737cd6c5c1dc3578c" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34452433" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlConnection : System.Data.Common.DbConnection, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlConnection extends System.Data.Common.DbConnection implements class System.Data.IDbConnection, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlConnection&#xA;Inherits DbConnection&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlConnection sealed : System::Data::Common::DbConnection, ICloneable, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("InfoMessage")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示對 SQL Server 資料庫的連線。 這個類別無法被繼承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Data.SqlClient.SqlConnection>物件表示 SQL Server 資料來源的唯一工作階段。 具有用戶端/伺服器資料庫系統，它相當於伺服器的網路連線。 <xref:System.Data.SqlClient.SqlConnection> 會搭配<xref:System.Data.SqlClient.SqlDataAdapter>和<xref:System.Data.SqlClient.SqlCommand>來連接到 Microsoft SQL Server 資料庫時，提升效能。 所有協力廠商的 SQL Server 產品和其他的 OLE DB 支援的資料來源，請使用<xref:System.Data.OleDb.OleDbConnection>。  
  
 當您建立的執行個體<xref:System.Data.SqlClient.SqlConnection>，所有屬性都設為其初始值。 如需這些值的清單，請參閱<xref:System.Data.SqlClient.SqlConnection>建構函式。  
  
 請參閱<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>中的連接字串關鍵字的清單。  
  
 如果<xref:System.Data.SqlClient.SqlConnection>移出的範圍，它將不會關閉。 因此，您必須明確地關閉此連接呼叫`Close`或`Dispose`。 `Close` 和`Dispose`相同的功能。 如果連接共用值`Pooling`設`true`或`yes`、 基礎連接已傳回到連接集區。 相反地，如果`Pooling`設`false`或`no`，實際上關閉基礎連線到伺服器。  
  
> [!NOTE]
>  從連接集區中擷取連接或將連接傳回連接集區時，系統不會在伺服器上引發登入和登出事件，因為當連接傳回連接集區時，連接實際上並未關閉。 如需詳細資訊，請參閱 [SQL Server 連共用ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md)。  
  
 若要確保永遠關閉的連線，開啟 內部連接`using`區塊，如下列程式碼片段所示。 這樣可以確保程式碼結束該區塊時，自動關閉連線。  
  
```vb  
Using connection As New SqlConnection(connectionString)  
    connection.Open()  
    ' Do work here; connection closed on following line.  
End Using  
  
```  
  
```csharp  
using (SqlConnection connection = new SqlConnection(connectionString))  
    {  
        connection.Open();  
        // Do work here; connection closed on following line.  
    }  
```  
  
> [!NOTE]
>  若要部署高效能應用程式，您必須使用連接共用。 當您使用.NET Framework Data Provider for SQL Server 時，您不必啟用連接共用，因為提供者會自動管理雖然您可以修改某些設定。 如需詳細資訊，請參閱 [SQL Server 連共用ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md)。  
  
 如果<xref:System.Data.SqlClient.SqlException>所執行的方法產生<xref:System.Data.SqlClient.SqlCommand>、<xref:System.Data.SqlClient.SqlConnection>仍保持開啟時的嚴重性層級為 19 或更少。 伺服器的嚴重性層級 20 或以上時，通常會關閉<xref:System.Data.SqlClient.SqlConnection>。 但是，使用者可以再次開啟連線，然後繼續進行。  
  
 建立的執行個體的應用程式<xref:System.Data.SqlClient.SqlConnection>物件可能會要求所有直接和間接呼叫端擁有足夠的權限的程式碼所設定的宣告式或必要的安全性要求。 <xref:System.Data.SqlClient.SqlConnection> 可使用的安全性要求<xref:System.Data.SqlClient.SqlClientPermission>物件。 使用者可以確認他們的程式碼使用具有足夠的權限<xref:System.Data.SqlClient.SqlClientPermissionAttribute>物件。 使用者和系統管理員也可以使用[Caspol.exe （程式碼存取安全性原則工具）](~/docs/framework/tools/caspol-exe-code-access-security-policy-tool.md)修改電腦、 使用者和企業層級的安全性原則。 如需詳細資訊，請參閱[安全性](http://msdn.microsoft.com/library/9a9621d7-8883-4a4f-a874-65e8e09e20a6)。 如需示範如何使用安全性要求的範例，請參閱[程式碼存取安全性和 ADO.NET](~/docs/framework/data/adonet/code-access-security.md)。  
  
 如需處理來自伺服器的警告和告知性訊息的詳細資訊，請參閱[連接事件](~/docs/framework/data/adonet/connection-events.md)。 SQL Server 引擎錯誤與錯誤訊息會記錄在 SQL Server 線上叢書 》 中。  
  
> [!CAUTION]
>  您可以強制 TCP，而非共用的記憶體。 您可以執行此動作 tcp 前面加上： 在連接中的伺服器名稱的字串，或者您可以使用 localhost。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlCommand>和<xref:System.Data.SqlClient.SqlConnection>。 <xref:System.Data.SqlClient.SqlConnection>已開啟，並設定為<xref:System.Data.SqlClient.SqlCommand.Connection%2A>如<xref:System.Data.SqlClient.SqlCommand>。 此範例會接著呼叫<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>。 若要達成此目的，<xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>連接字串和查詢字串傳遞至[!INCLUDE[tsql](~/includes/tsql-md.md)]INSERT 陳述式。 使用的程式碼結束時自動關閉連接區塊。  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.SqlClient.SqlConnection" /> 類別的新執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.SqlClient.SqlConnection" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新執行個體時<xref:System.Data.SqlClient.SqlConnection>建立時，讀取/寫入屬性都設定為下列的起始值，除非它們特別設定使用中其相關聯的關鍵字<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>屬性。  
  
|屬性|Initial value|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|空字串 ("")|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|15|  
|<xref:System.Data.SqlClient.SqlConnection.Database%2A>|空字串 ("")|  
|<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|空字串 ("")|  
  
 您可以變更這些屬性的值只能透過<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>屬性。 <xref:System.Data.SqlClient.SqlConnectionStringBuilder>類別會提供建立和管理的連接字串內容的功能。  
  
   
  
## Examples  
 下列範例會建立並開啟<xref:System.Data.SqlClient.SqlConnection>。  
  
 [!code-csharp[Classic WebData SqlConnection.SqlConnection Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.SqlConnection Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection(System::String ^ connectionString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">開啟 SQL Server 資料庫所使用的連線。</param>
        <summary>指定包含連接字串的字串時，初始化 <see cref="T:System.Data.SqlClient.SqlConnection" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新執行個體時<xref:System.Data.SqlClient.SqlConnection>建立時，讀取/寫入屬性都設定為下列的起始值，除非它們特別設定使用中其相關聯的關鍵字<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>屬性。  
  
|屬性|Initial value|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|`connectionString`|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|15|  
|<xref:System.Data.SqlClient.SqlConnection.Database%2A>|空字串 ("")|  
|<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|空字串 ("")|  
  
 您可以變更這些屬性的值只能透過<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>屬性。 <xref:System.Data.SqlClient.SqlConnection>類別會提供建立和管理的連接字串內容的功能。  
  
   
  
## Examples  
 下列範例會建立並開啟<xref:System.Data.SqlClient.SqlConnection>。  
  
 [!code-csharp[Classic WebData SqlConnection.SqlConnection1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.SqlConnection1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlConnection (string connectionString, System.Data.SqlClient.SqlCredential credential);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, class System.Data.SqlClient.SqlCredential credential) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;xamarinandroid-7.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, credential As SqlCredential)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection(System::String ^ connectionString, System::Data::SqlClient::SqlCredential ^ credential);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public SqlConnection (string connectionString, System.Data.SqlClient.SqlCredential cred);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, class System.Data.SqlClient.SqlCredential cred) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, cred As SqlCredential)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection(System::String ^ connectionString, System::Data::SqlClient::SqlCredential ^ cred);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" Index="0" />
        <Parameter Name="credential" Type="System.Data.SqlClient.SqlCredential" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="cred" Type="System.Data.SqlClient.SqlCredential" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="connectionString">不使用下列任何連接字串關鍵字的連接字串：<see langword="Integrated Security = true" />、<see langword="UserId" /> 或 <see langword="Password" />；或者不使用 <see langword="ContextConnection = true" /> 的連接字串。</param>
        <param name="credential">To be added.</param>
        <param name="cred">To be added.</param>
        <summary>根據不使用 <see langword="Integrated Security = true" /> 的連接字串以及包含使用者 ID 和密碼的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 物件，初始化 <see cref="T:System.Data.SqlClient.SqlCredential" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessToken">
      <MemberSignature Language="C#" Value="public string AccessToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessToken" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.AccessToken" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessToken As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessToken { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定此連接的存取權杖。</summary>
        <value>此連接的存取權杖。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbTransaction ^ BeginDbTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開始資料庫交易。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction () As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>開始資料庫交易。</summary>
        <returns>代表新異動的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令將對應至 SQL Server 實作的 BEGIN TRANSACTION。  
  
 您必須明確地認可或回復交易使用<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>或<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>方法。 若要確定.NET Framework 資料提供者，SQL Server 交易管理模型會正確執行，請避免使用其他的交易管理模式，例如 SQL Server 提供的。  
  
> [!NOTE]
>  如果您不指定隔離等級，則會使用預設隔離等級。 若要指定隔離等級<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>方法，使用的多載，`iso`參數 (<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>)。 設定交易的隔離等級會保存在交易完成之後，直到關閉或處置連接。 隔離層級設定為**快照**中未啟用快照隔離等級的資料庫不會擲回例外狀況。 完成交易使用的預設隔離等級。  
  
> [!CAUTION]
>  如果啟動交易層級 16 或更高的錯誤，就會發生在伺服器上，交易將不會回復直到<xref:System.Data.SqlClient.SqlDataReader.Read%2A>叫用方法。 會擲回任何例外狀況**ExecuteReader**。  
  
> [!CAUTION]
>  當您的查詢傳回大量的資料和呼叫`BeginTransaction`、<xref:System.Data.SqlClient.SqlException>因為 SQL Server 不允許平行交易使用 MARS 時，會擲回。 若要避免這個問題，一律關聯交易命令、 連線，或兩者都開啟任何讀取器之前。  
  
 如需有關 SQL Server 異動的詳細資訊，請參閱《SQL Server 線上叢書》中的「外顯異動」和「撰寫有效率的異動」。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlConnection>和<xref:System.Data.SqlClient.SqlTransaction>。 它也會示範如何使用<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>，和<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>方法。  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">使用 Multiple Active Result Sets (MARS) 時不允許平行交易。</exception>
        <exception cref="T:System.InvalidOperationException">不支援平行交易。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction(valuetype System.Data.IsolationLevel iso) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (iso As IsolationLevel) As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction(System::Data::IsolationLevel iso);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iso" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="iso">應該在其下執行異動的隔離等級。</param>
        <summary>使用指定的隔離等級開始資料庫異動。</summary>
        <returns>代表新異動的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令將對應至 SQL Server 實作的 BEGIN TRANSACTION。  
  
 您必須明確地認可或回復交易使用<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>或<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>方法。 若要確定.NET Framework 資料提供者，SQL Server 交易管理模型會正確執行，請避免使用其他的交易管理模式，例如 SQL Server 提供的。  
  
> [!NOTE]
>  認可或回復交易之後，交易的隔離等級會持續處於自動認可模式 （SQL Server 預設值） 的所有後續命令。 這會產生非預期的結果，例如保存和鎖定的資料列外的其他使用者 REPEATABLE READ 隔離等級。 若要重設預設 （讀取認可） 的隔離等級，執行[!INCLUDE[tsql](~/includes/tsql-md.md)]設定交易隔離等級 READ COMMITTED 陳述式或呼叫<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=nameWithType>立即接著<xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=nameWithType>。 如需有關 SQL Server 隔離層級的詳細資訊，請參閱 < 隔離層級在 Database Engine > SQL Server 線上叢書 》 中。  
  
 如需有關 SQL Server 異動的詳細資訊，請參閱《SQL Server 線上叢書》中的「外顯異動」和「撰寫有效率的異動」。  
  
> [!CAUTION]
>  當您的查詢傳回大量的資料和呼叫`BeginTransaction`、<xref:System.Data.SqlClient.SqlException>因為 SQL Server 不允許平行交易使用 MARS 時，會擲回。 若要避免這個問題，一律關聯交易命令、 連線，或兩者都開啟任何讀取器之前。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlConnection>和<xref:System.Data.SqlClient.SqlTransaction>。 它也會示範如何使用<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>，和<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>方法。  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">使用 Multiple Active Result Sets (MARS) 時不允許平行交易。</exception>
        <exception cref="T:System.InvalidOperationException">不支援平行交易。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction (string transactionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction(string transactionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (transactionName As String) As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction(System::String ^ transactionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionName">異動的名稱。</param>
        <summary>使用指定的交易名稱開始資料庫交易。</summary>
        <returns>代表新異動的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令將對應至 SQL Server 實作的 BEGIN TRANSACTION。  
  
 長度`transactionName`參數必須不能超過 32 個字元，否則會擲回例外狀況。  
  
 中的值`transactionName`參數可以用於稍後呼叫<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>和`savePoint`參數<xref:System.Data.SqlClient.SqlTransaction.Save%2A>方法。  
  
 您必須明確地認可或回復交易使用<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>或<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>方法。 若要確定[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]資料提供者的 SQL Server 交易管理模式執行正確，請避免使用其他的交易管理模式，例如 SQL Server 提供的。  
  
 如需有關 SQL Server 異動的詳細資訊，請參閱《SQL Server 線上叢書》中的「外顯異動」和「撰寫有效率的異動」。  
  
> [!CAUTION]
>  當您的查詢傳回大量的資料和呼叫`BeginTransaction`、<xref:System.Data.SqlClient.SqlException>因為 SQL Server 不允許平行交易使用 MARS 時，會擲回。 若要避免這個問題，一律關聯交易命令、 連線，或兩者都開啟任何讀取器之前。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlConnection>和<xref:System.Data.SqlClient.SqlTransaction>。 它也會示範如何使用<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>，和<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>方法。  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">使用 Multiple Active Result Sets (MARS) 時不允許平行交易。</exception>
        <exception cref="T:System.InvalidOperationException">不支援平行交易。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso, string transactionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction(valuetype System.Data.IsolationLevel iso, string transactionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (iso As IsolationLevel, transactionName As String) As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction(System::Data::IsolationLevel iso, System::String ^ transactionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iso" Type="System.Data.IsolationLevel" />
        <Parameter Name="transactionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="iso">應該在其下執行異動的隔離等級。</param>
        <param name="transactionName">異動的名稱。</param>
        <summary>使用指定的隔離等級和異動名稱開始資料庫異動。</summary>
        <returns>代表新異動的物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令將對應至 SQL Server 實作的 BEGIN TRANSACTION。  
  
 中的值`transactionName`參數可以用於稍後呼叫<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>和`savePoint`參數<xref:System.Data.SqlClient.SqlTransaction.Save%2A>方法。  
  
 您必須明確地認可或回復交易使用<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>或<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>方法。 若要確定 SQL Server 交易管理模型會正確執行，請避免使用其他的交易管理模式，例如 SQL Server 提供的。  
  
> [!NOTE]
>  認可或回復交易之後，交易的隔離等級會持續處於自動認可模式 （SQL Server 預設值） 的所有後續命令。 這會產生非預期的結果，例如保存和鎖定的資料列外的其他使用者 REPEATABLE READ 隔離等級。 若要重設預設 （讀取認可） 的隔離等級，執行[!INCLUDE[tsql](~/includes/tsql-md.md)]設定交易隔離等級 READ COMMITTED 陳述式或呼叫<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=nameWithType>立即接著<xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=nameWithType>。 如需有關 SQL Server 隔離層級的詳細資訊，請參閱 < 隔離層級在 Database Engine > SQL Server 線上叢書 》 中。  
  
 如需有關 SQL Server 異動的詳細資訊，請參閱《SQL Server 線上叢書》中的「外顯異動」和「撰寫有效率的異動」。  
  
> [!CAUTION]
>  當您的查詢傳回大量的資料和呼叫`BeginTransaction`、<xref:System.Data.SqlClient.SqlException>因為 SQL Server 不允許平行交易使用 MARS 時，會擲回。 若要避免這個問題，一律關聯交易命令、 連線，或兩者都開啟任何讀取器之前。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlConnection>和<xref:System.Data.SqlClient.SqlTransaction>。 它也會示範如何使用<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>，和<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>方法。  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">使用 Multiple Active Result Sets (MARS) 時不允許平行交易。</exception>
        <exception cref="T:System.InvalidOperationException">不支援平行交易。</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string database);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string database) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ChangeDatabase (database As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ChangeDatabase(System::String ^ database);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.ChangeDatabase(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="database" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="database">用於代替目前資料庫的資料庫名稱。</param>
        <summary>為開啟的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 變更目前的資料庫。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中提供的值`database`參數必須是有效的資料庫名稱。 `database`參數不能包含 null 值、 空字串或只有空白字元的字串。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlConnection>並顯示其部分唯讀屬性。  
  
 [!code-csharp[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">資料庫名稱無效。</exception>
        <exception cref="T:System.InvalidOperationException">連接未開啟。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">無法變更資料庫。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChangePassword">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>變更 SQL Server 密碼。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChangePassword">
      <MemberSignature Language="C#" Value="public static void ChangePassword (string connectionString, string newPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChangePassword(string connectionString, string newPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ChangePassword (connectionString As String, newPassword As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChangePassword(System::String ^ connectionString, System::String ^ newPassword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="newPassword" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">連接字串，包含的資訊足以連接至您要的伺服器。 連接字串必須包含使用者 ID 和目前的密碼。</param>
        <param name="newPassword">要設定的新密碼。 這個密碼必須符合伺服器上設定的任何密碼安全性原則，包括最小長度、特定字元的需求等。</param>
        <summary>將連接字串中指示的使用者 SQL Server 密碼變更成提供的新密碼。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您使用 SQL Server 在 Windows Server 上時，開發人員可以利用可讓用戶端應用程式，提供目前和新的密碼，才能變更現有密碼的功能。 應用程式可以實作功能，例如初始登入期間提示使用者輸入新密碼，如果舊的密碼已過期，而且可以完成這項作業，而不需系統管理員介入。  
  
 <xref:System.Data.SqlClient.SqlConnection.ChangePassword%2A>方法變更使用者指示中所提供的 SQL Server 密碼`connectionString`參數中提供的值來`newPassword`參數。 如果連接字串會包含整合式安全性的選項 (也就是 「 整合式的安全性 = True"或同等權限)，會擲回例外狀況。  
  
 若要判斷已過期的密碼，呼叫<xref:System.Data.SqlClient.SqlConnection.Open%2A>方法會引發<xref:System.Data.SqlClient.SqlException>。 表示是否包含在連接字串的密碼必須重設，以便<xref:System.Data.SqlClient.SqlException.Number%2A>例外狀況的屬性包含狀態值 18487 或 18488。 第一個值 (18487) 表示的密碼已過期的第二個 (18488) 表示登入之前，必須重設密碼。  
  
 這個方法會開啟它自己的伺服器連接、 要求密碼變更，並關閉連接，因為它已完成。 此連線不擷取，也不會傳回 SQL Server 連接集區。  
  
   
  
## Examples  
 變更密碼的簡單範例如下：  
  
```  
class Program {  
   static void Main(string[] args) {  
      System.Data.SqlClient.SqlConnection.ChangePassword(  
        "Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password",   
       "new_password");  
   }  
}  
  
```  
  
```  
Module Module1  
    Sub Main()  
System.Data.SqlClient.SqlConnection.ChangePassword(  
        "Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password",   
       "new_password")  
    End Sub  
End Module  
  
```  
  
 下列主控台應用程式示範如何變更使用者的密碼，因為目前的密碼已過期的相關問題。  
  
 [!code-csharp[DataWorks SqlConnection.ChangePassword#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlConnection.ChangePassword/CS/source.cs#1)]
 [!code-vb[DataWorks SqlConnection.ChangePassword#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlConnection.ChangePassword/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">連接字串包含使用整合式安全性的選項。  或  <paramref name="newPassword" /> 超過 128 個字元。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="connectionString" /> 或 <paramref name="newPassword" /> 參數為 null。</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangePassword">
      <MemberSignature Language="C#" Value="public static void ChangePassword (string connectionString, System.Data.SqlClient.SqlCredential credential, System.Security.SecureString newSecurePassword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChangePassword(string connectionString, class System.Data.SqlClient.SqlCredential credential, class System.Security.SecureString newSecurePassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ChangePassword (connectionString As String, credential As SqlCredential, newSecurePassword As SecureString)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChangePassword(System::String ^ connectionString, System::Data::SqlClient::SqlCredential ^ credential, System::Security::SecureString ^ newSecurePassword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="credential" Type="System.Data.SqlClient.SqlCredential" />
        <Parameter Name="newSecurePassword" Type="System.Security.SecureString" />
      </Parameters>
      <Docs>
        <param name="connectionString">連接字串，包含的資訊足以連接至伺服器。 連接字串不應使用任何下列的連接字串關鍵字：<see langword="Integrated Security = true" />、<see langword="UserId" /> 或<see langword="Password" />；或者是 <see langword="ContextConnection = true" />。</param>
        <param name="credential">
          <see cref="T:System.Data.SqlClient.SqlCredential" /> 物件。</param>
        <param name="newSecurePassword">新密碼。 <c>newSecurePassword</c> 必須是唯讀。 這個密碼也必須符合伺服器上設定的任何密碼安全性原則 (例如，最小長度和特定字元的需求)。</param>
        <summary>變更 <see cref="T:System.Data.SqlClient.SqlCredential" /> 物件中指定的使用者 SQL Server 密碼。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">1.連接字串包含 <see langword="UserId" />、<see langword="Password" /> 或<see langword="Integrated Security=true" /> 的任何組合。  2.  連接字串包含 <see langword="Context Connection=true" />。  3.  <paramref name="newSecurePassword" /> 大於 128 個字元。  4.  <paramref name="newSecurePassword" /> 不是唯讀的。  5.  <paramref name="newSecurePassword" /> 為空字串。</exception>
        <exception cref="T:System.ArgumentNullException">其中一個參數 (<paramref name="connectionString" />、<paramref name="credential" /> 或 <paramref name="newSecurePassword" />) 為 null。</exception>
      </Docs>
    </Member>
    <Member MemberName="ClearAllPools">
      <MemberSignature Language="C#" Value="public static void ClearAllPools ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearAllPools() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ClearAllPools" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearAllPools ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearAllPools();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清空連接集區。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.ClearAllPools%2A> 重設 （或清空） 連接集區。 如果在呼叫時的使用中的連接，它們會適當地標記將會被捨棄 （而不是傳回至集區） 時<xref:System.Data.SqlClient.SqlConnection.Close%2A>呼叫它們。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearPool">
      <MemberSignature Language="C#" Value="public static void ClearPool (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearPool(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearPool (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearPool(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">要從集區中清除的 <see cref="T:System.Data.SqlClient.SqlConnection" />。</param>
        <summary>清空與特定連接關聯的連接集區。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.ClearPool%2A> 清除連接集區相關聯`connection`。 如果其他連接相關聯`connection`是使用中，在呼叫時，會適當地標記的人員，並會被捨棄 （而不是傳回至集區） 時<xref:System.Data.SqlClient.SqlConnection.Close%2A>呼叫它們。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientConnectionId">
      <MemberSignature Language="C#" Value="public Guid ClientConnectionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ClientConnectionId" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ClientConnectionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientConnectionId As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid ClientConnectionId { Guid get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最近連線的連線 ID，無論連線是否成功。</summary>
        <value>最近連線的連線 ID。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.ClientConnectionId%2A> 連線的伺服器版本為何，都會運作，但擴充的事件記錄檔以及有關連接性信號緩衝錯誤的項目將不會出現在[!INCLUDE[sskatmai_r2](~/includes/sskatmai-r2-md.md)]及更早版本。  
  
 若要查看失敗是否在伺服器上已啟用擴充的事件記錄連接識別碼，是否擴充的事件記錄檔中，您可以找到連接識別碼。 您也可以在連接信號緩衝區中找到的連接識別碼 ([連接 SQL Server 2008 中與連接信號緩衝區疑難排解](http://go.microsoft.com/fwlink/?LinkId=207752)) 針對特定連接錯誤。 如果連接識別碼不在連接信號緩衝區中，您可以假設發生網路錯誤。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>關閉與資料庫的連接。 這是關閉任何開啟連接的慣用方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.Close%2A>方法會回復任何暫止交易。 然後，它會釋放連接集區中，連接或關閉連接，如果連接共用已停用。  
  
> [!NOTE]
>  暫止的交易會使用啟動[!INCLUDE[tsql](~/includes/tsql-md.md)]或<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>啟用連接共用時，會重設連接時自動交易回復。 如果連接共用已關閉，交易會復原之後`SqlConnection.Close`呼叫。 透過啟動交易<xref:System.Transactions>透過控制`System.Transactions`基礎結構，並不會受到`SqlConnection.Close`。  
  
 應用程式可以呼叫<xref:System.Data.SqlClient.SqlConnection.Close%2A>一次以上。 會不產生任何例外狀況。  
  
 如果<xref:System.Data.SqlClient.SqlConnection>移出的範圍，它將不會關閉。 因此，您必須明確地關閉此連接呼叫`Close`或`Dispose`。 `Close` 和`Dispose`相同的功能。 如果連接共用值`Pooling`設`true`或`yes`、 基礎連接已傳回到連接集區。 相反地，如果`Pooling`設`false`或`no`，就會關閉基礎連線到伺服器。  
  
> [!NOTE]
>  從連接集區中擷取連接或將連接傳回連接集區時，系統不會在伺服器上引發登入和登出事件，因為當連接傳回連接集區時，連接實際上並未關閉。 如需詳細資訊，請參閱 [SQL Server 連共用ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md)。  
  
> [!CAUTION]
>  請勿呼叫`Close`或`Dispose`連線、 DataReader 或在任何其他 managed 的物件上`Finalize`類別的方法。 在完成項中，您應該只需釋放類別直接擁有的 unmanaged 的資源。 如果類別未擁有任何 Unmanaged 資源，請不要在類別定義中包含 `Finalize` 方法。 如需詳細資訊，請參閱[回收](~/docs/standard/garbage-collection/index.md)。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlConnection>、 開啟、 顯示的某些屬性。 連線會自動關閉的結尾`using`區塊。  
  
 [!code-csharp[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">開啟連接時發生的連接層級錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionKeyCacheTtl">
      <MemberSignature Language="C#" Value="public static TimeSpan ColumnEncryptionKeyCacheTtl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan ColumnEncryptionKeyCacheTtl" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ColumnEncryptionKeyCacheTtl As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan ColumnEncryptionKeyCacheTtl { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>針對 [Always Encrypted] (/sql/relational-databases/security/encryption/always-encrypted-database-engine) 功能，取得或設定資料行加密金鑰快取中資料行加密金鑰項目的存留時間。 預設值是 2 小時。 0 表示完全沒有快取。</summary>
        <value>時間間隔。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionQueryMetadataCacheEnabled">
      <MemberSignature Language="C#" Value="public static bool ColumnEncryptionQueryMetadataCacheEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool ColumnEncryptionQueryMetadataCacheEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ColumnEncryptionQueryMetadataCacheEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool ColumnEncryptionQueryMetadataCacheEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，指出是否要針對根據已啟用 [Always Encrypted] (/sql/relational-databases/security/encryption/always-encrypted-database-engine) 的資料庫執行的參數化查詢，啟用 (true) 或停用 (false) 查詢中繼資料快取。 預設值為 true。</summary>
        <value>如果已啟用查詢中繼資料快取，即會傳回 true；否則為 false。 true 為預設值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 參數化查詢，SqlClient 會往返到 SQL Server 的參數中繼資料，以查看哪個參數需要加密和方式 （哪些金鑰和演算法應該使用）。 如果應用程式會多次呼叫同一個查詢，額外的往返是對伺服器應用程式的效能會降低每一次。  
  
 與**ColumnEncryptionQueryMetadataCacheEnabled**設定為 true，如果相同的查詢會呼叫多次，往返於伺服器不會進行一次。 快取的不可設定的最大大小參數設為 2000年查詢。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionTrustedMasterKeyPaths">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,System.Collections.Generic.IList&lt;string&gt;&gt; ColumnEncryptionTrustedMasterKeyPaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IDictionary`2&lt;string, class System.Collections.Generic.IList`1&lt;string&gt;&gt; ColumnEncryptionTrustedMasterKeyPaths" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ColumnEncryptionTrustedMasterKeyPaths As IDictionary(Of String, IList(Of String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IDictionary&lt;System::String ^, System::Collections::Generic::IList&lt;System::String ^&gt; ^&gt; ^ ColumnEncryptionTrustedMasterKeyPaths { System::Collections::Generic::IDictionary&lt;System::String ^, System::Collections::Generic::IList&lt;System::String ^&gt; ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Collections.Generic.IList&lt;System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>可讓您為資料庫伺服器設定受信任機碼路徑的清單。 如果在處理應用程式查詢時，驅動程式收到的機碼路徑不在清單上，查詢就會失敗。 這個屬性會提供額外的保護以對抗安全性攻擊，事關受危害的 SQL Server 提供虛構的機碼路徑，這有可能導致金鑰存放區認證洩漏。</summary>
        <value>資料行加密的受信任的主要機碼路徑清單。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.ConnectionString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.SQL.Design.SqlConnectionStringEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定用來開啟 SQL Server 資料庫的字串。</summary>
        <value>連接字串，包含來源資料庫名稱和其他建立初始連接所需要的參數。 預設值為空字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>類似於 OLE DB 連接字串，但並不相同。 不同於 OLE DB 或 ADO，連接字串，則會傳回等同於使用者設定<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>，減去 Persist Security Info 值設定為時的安全性資訊`false`（預設值）。 .NET Framework Data Provider for SQL Server 不會保存或傳回連接字串中的密碼，除非您設定 Persist Security Info `true`。  
  
 您可以使用<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>內容，連接至資料庫。 下列範例說明一般連接字串。  
  
```  
"Persist Security Info=False;Integrated Security=true;Initial Catalog=Northwind;server=(local)"  
```  
  
 使用新<xref:System.Data.SqlClient.SqlConnectionStringBuilder>在執行階段建構有效的連接字串。 如需詳細資訊，請參閱[連接字串產生器](~/docs/framework/data/adonet/connection-string-builders.md)。  
  
 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>連接關閉時，才可以設定屬性。 許多連接字串值都有對應的唯讀屬性。 當連接字串設定時，這些內容更新時，偵測到錯誤時除外。 在此情況下，會更新任何屬性。 <xref:System.Data.SqlClient.SqlConnection> 屬性會傳回中所包含的那些設定<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>。  
  
 若要連接到本機電腦上，指定 「 （本機） 」 伺服器。 如果未指定伺服器名稱，連接將會嘗試在本機電腦上的預設執行個體。  
  
 重設<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>關閉的連接會重設所有連接字串值 （和相關的屬性） 包括密碼。 比方說，如果您設定連接字串，包含 「 資料庫 = AdventureWorks"，然後重設連接字串 」 資料來源 = myserver; 整合式的安全性 = true"，則<xref:System.Data.SqlClient.SqlConnection.Database%2A>屬性不再設定為 「 AdventureWorks 」。  
  
 連接字串會剖析之後立即設定。 如果剖析時，執行階段例外狀況，例如發現語法錯誤<xref:System.ArgumentException>，就會產生。 嘗試開啟連接時，才可以找到其他錯誤。  
  
 連接字串的基本格式包含一系列以分號隔開的關鍵字/值組。 等號 (=) 會連接每個關鍵字和其值。 若要加入包含分號、 單引號字元或雙引號字元的值，值必須括在雙引號中。 如果值包含分號和雙引號字元，該值可括在單引號中。 單一引號也很有用，如果值以雙引號字元開頭的。 相反地，如果值以單引號開始，可以使用雙引號。 如果值包含單引號和雙引號字元，用來括住值的引號字元必須加倍，每次出現的值內。  
  
 若要包含上述或尾端空格的字串值中，值必須括在單引號或雙引號括住。 會忽略任何開頭或尾端空格，整數、 布林值或列舉的值的周圍，即使以引號括住。 不過，在字串常值關鍵字或值的空格會保留。 單引號或雙引號可能使用的連接字串內使用的分隔符號 (例如，資料來源 = my'Server 或資料來源 = 我的 」 伺服器)，除非引號字元是在值中的第一個或最後一個字元。  
  
 關鍵字不區分大小寫。  
  
 下表列出中的關鍵字值的有效名稱<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>。  
  
  下列清單包含連接共用內的值的有效名稱<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>。 如需詳細資訊，請參閱 [SQL Server 連共用ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md)。  
  
-   連線的存留期 （或 Load Balance Timeout）  
  
-   Enlist  
  
-   Max Pool Size  
  
-   Min Pool Size  
  
-   Pooling  
  
 當您要設定關鍵字或連接共用需要布林值的值時，您可以使用 'yes' 而不是 'true' 和 'no' 而不是 'false'。 整數值會表示為字串。  
  
> [!NOTE]
>  .NET Framework Data Provider for SQL Server 會使用自己的通訊協定與 SQL Server 通訊。 因此，它不支援使用 ODBC 資料來源名稱 (DSN) 連接到 SQL Server，因為它不會新增 ODBC 圖層時。  
  
> [!NOTE]
>  .NET Framework Data provider for SQL Server 不支援通用資料連結 (UDL) 檔案。  
  
> [!CAUTION]
>  在此版本中，應用程式只有在建構連接字串，根據使用者輸入 （例如從對話方塊中，並將它附加至連接字串中擷取使用者識別碼和密碼資訊時） 時應謹慎小心。 應用程式應該要確定使用者無法在這些值中內嵌的其他連接字串參數 (例如，輸入密碼做為"validpassword; 資料庫 = somedb"在嘗試附加至不同的資料庫)。 如果您要建構根據使用者輸入的連接字串，請使用新<xref:System.Data.SqlClient.SqlConnectionStringBuilder>，其驗證的連接字串，並且有助於消除這個問題。 請參閱[連接字串產生器](~/docs/framework/data/adonet/connection-string-builders.md)如需詳細資訊。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlConnection>並設定<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>屬性之前開啟連接。  
  
 [!code-csharp[Classic WebData SqlConnection.ConnectionString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.ConnectionString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">已提供無效的連接字串引數，或尚未提供必要的連接字串引數。</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ConnectionTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ConnectionTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ConnectionTimeout { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.ConnectionTimeout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得在終止嘗試並產生錯誤前嘗試建立連接的等待時間。</summary>
        <value>等待連接開啟的時間 (以秒為單位)。 預設值為 15 秒。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您也可以使用的逾時時間設定的連接所等待的時間量`Connect Timeout`或`Connection Timeout`連接字串中的關鍵字。 值為 0 表示無限制，並應避免在<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>因為連線嘗試會無限期等待。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlConnection>並設定`Connection Timeout`為 30 秒的連接字串中。 程式碼會開啟連接，並顯示<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>主控台視窗中的屬性。  
  
 [!code-csharp[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定的值小於 0。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.CreateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ CreateCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立並傳回與 <see cref="T:System.Data.SqlClient.SqlConnection" /> 關聯的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 物件。</summary>
        <returns>
          <see cref="T:System.Data.SqlClient.SqlCommand" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[SqlConnection_CreateCommand#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/sqlconnection_createcommand/cs/source.cs#1)]
 [!code-vb[SqlConnection_CreateCommand#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/sqlconnection_createcommand/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.CreateDbCommand" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbCommand () As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ CreateDbCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Credential">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCredential Credential { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlCredential Credential" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.Credential" />
      <MemberSignature Language="VB.NET" Value="Public Property Credential As SqlCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCredential ^ Credential { System::Data::SqlClient::SqlCredential ^ get(); void set(System::Data::SqlClient::SqlCredential ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定這個連接的 <see cref="T:System.Data.SqlClient.SqlCredential" /> 物件。</summary>
        <value>這個連接的 <see cref="T:System.Data.SqlClient.SqlCredential" /> 物件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Persist Security Info = true` 取得值，才能<xref:System.Data.SqlClient.SqlCredential>物件<xref:System.Data.SqlClient.SqlConnection.Credential%2A>。  
  
 預設值<xref:System.Data.SqlClient.SqlConnection.Credential%2A>為 null。  
  
 <xref:System.InvalidOperationException>會引發例外狀況：  
  
-   如果<xref:System.Data.SqlClient.SqlConnection.Credential%2A>開啟的連接上設定。  
  
-   如果<xref:System.Data.SqlClient.SqlConnection.Credential%2A>時，會設定`Context Connection=true`。  
  
-   如果<xref:System.Data.SqlClient.SqlConnection.Credential%2A>時，會設定`Integrated Security = true`。  
  
-   如果<xref:System.Data.SqlClient.SqlConnection.Credential%2A>設定當連接字串使用`Password`。  
  
-   如果<xref:System.Data.SqlClient.SqlConnection.Credential%2A>設定當連接字串使用`UserID`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCredential Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlCredential Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Property Credentials As SqlCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCredential ^ Credentials { System::Data::SqlClient::SqlCredential ^ get(); void set(System::Data::SqlClient::SqlCredential ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.Database" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Database As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Database { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.Database</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前資料庫或要在連接開啟之後使用的資料庫名稱。</summary>
        <value>目前資料庫的名稱或連接開啟後要使用之資料庫的名稱。 預設值為空字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.Database%2A>屬性會動態更新。 如果您變更目前的資料庫使用[!INCLUDE[tsql](~/includes/tsql-md.md)]陳述式或<xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>方法，會傳送參考用訊息，並自動更新的屬性。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlConnection>並顯示其部分唯讀屬性。  
  
 [!code-csharp[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DataSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataSource { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得要連線的 SQL Server 執行個體名稱。</summary>
        <value>要連接的 SQL Server 執行個體的名稱。 預設值為空字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Data.SqlClient.SqlConnection.DataSource%2A>屬性會傳回`null`的連接字串如果<xref:System.Data.SqlClient.SqlConnection>是 「 內容連接 = true"。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlConnection>並顯示其部分唯讀屬性。  
  
 [!code-csharp[Classic WebData SqlConnection.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbProviderFactory">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbProviderFactory DbProviderFactory" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.DbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbProviderFactory As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbProviderFactory ^ DbProviderFactory { System::Data::Common::DbProviderFactory ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistDistributedTransaction">
      <MemberSignature Language="C#" Value="public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnlistDistributedTransaction(class System.EnterpriseServices.ITransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnlistDistributedTransaction (transaction As ITransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnlistDistributedTransaction(System::EnterpriseServices::ITransaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.EnterpriseServices.ITransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">要登記之現有 <see cref="T:System.EnterpriseServices.ITransaction" /> 的參考。</param>
        <summary>將指定的異動登記為分散式異動。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A>編列到分散式交易中的方法。 因為它在登錄中的連接<xref:System.Transactions.Transaction>執行個體， **EnlistTransaction**利用中的可用功能<xref:System.Transactions>命名空間來管理分散式交易，因此最好**EnlistDistributedTransaction**針對此目的。 如需詳細資訊，請參閱[分散式交易](~/docs/framework/data/adonet/distributed-transactions.md)。  
  
 您可以繼續登記在現有的分散式的交易使用**EnlistDistributedTransaction**方法如果停用了自動登記。 在現有的分散式交易中登記可確保，如果認可或回復交易，在資料來源的程式碼所做的修改也認可或回復的。  
  
 `EnlistDistributedTransaction` 如果傳回的例外狀況<xref:System.Data.SqlClient.SqlConnection>已經開始交易使用<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>。 不過，如果交易是在資料來源上啟動本機交易 (例如，藉由明確執行 BEGIN TRANSACTION 陳述式使用<xref:System.Data.SqlClient.SqlCommand>物件)， **EnlistDistributedTransaction**回復本機交易，並要求在現有的分散式交易中編列。 您不會收到通知，本機交易已回復，而且負責管理任何本機交易不使用啟動<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EnlistTransaction(System::Transactions::Transaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">要登記之現有 <see cref="T:System.Transactions.Transaction" /> 的參考。</param>
        <summary>將指定的異動登記為分散式異動。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用<xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A>編列到分散式交易中的方法。 因為它在登錄中的連接<xref:System.Transactions.Transaction>執行個體， **EnlistTransaction**利用中的可用功能<xref:System.Transactions>命名空間來管理分散式交易，因此最好**EnlistDistributedTransaction**，它會使用**System.EnterpriseServices.ITransaction**物件。 它也會有稍微不同的語意： 在交易上明確地登記連接之後, 無法取消登錄或另一個交易中登記，直到第一筆交易完成為止。 如需有關分散式交易的詳細資訊，請參閱[分散式交易](~/docs/framework/data/adonet/distributed-transactions.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FireInfoMessageEventOnUserErrors">
      <MemberSignature Language="C#" Value="public bool FireInfoMessageEventOnUserErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FireInfoMessageEventOnUserErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property FireInfoMessageEventOnUserErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FireInfoMessageEventOnUserErrors { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> 屬性。</summary>
        <value>如果 <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> 屬性已經設定，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當您將<xref:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors%2A>至`true`，先前視為例外狀況現在會做為處理的錯誤<xref:System.Data.SqlClient.SqlConnection.InfoMessage>事件。 會立即引發和處理事件處理常式的所有事件。 如果是<xref:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors%2A>設`false`，然後<xref:System.Data.SqlClient.SqlConnection.InfoMessage>事件處理程序的結尾。  
  
> [!NOTE]
>  錯誤嚴重性層級 17 或以上，會使伺服器停止處理該命令必須當做例外狀況處理。 在此情況下會擲回例外狀況，而不理會<xref:System.Data.SqlClient.SqlConnection.InfoMessage> 事件中如何處理錯誤。  
  
 如需處理事件的詳細資訊，請參閱[連接事件](~/docs/framework/data/adonet/connection-events.md)。 如需有關 SQL Server 引擎所產生的錯誤的詳細資訊，請參閱 SQL Server 線上叢書 》。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回這個 <see cref="T:System.Data.SqlClient.SqlConnection" /> 之資料來源的結構描述資訊。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您嘗試擷取多個版本設定的預存程序的結構描述資訊時，最新的結構描述只會傳回。 如需有關版本設定的預存程序的詳細資訊，請參閱 SQL Server 線上叢書 》。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.GetSchema" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回這個 <see cref="T:System.Data.SqlClient.SqlConnection" /> 之資料來源的結構描述資訊。 如需結構描述的詳細資訊，請參閱 [SQL Server 結構描述集合] (http://msdn.microsoft.com/library/ms254969.aspx)。</summary>
        <returns>
          <see cref="T:System.Data.DataTable" />，包含結構描述資訊。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.GetSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema (collectionName As String) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema(System::String ^ collectionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="collectionName">指定要傳回之結構描述的名稱。</param>
        <summary>使用結構描述名稱的特定字串，傳回這個 <see cref="T:System.Data.SqlClient.SqlConnection" /> 之資料來源的結構描述資訊。</summary>
        <returns>
          <see cref="T:System.Data.DataTable" />，包含結構描述資訊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可能需要資料庫、 資料表或資料行的結構描述的資訊。 這個範例：  
  
-   使用 GetSchema 來取得結構描述資訊。  
  
-   使用結構描述限制來取得指定的資訊。  
  
-   取得結構描述資訊的資料庫、 資料表和某些資料行。  
  
 執行範例之前，您需要建立範例資料庫中，使用下列[!INCLUDE[tsql](~/includes/tsql-md.md)]:  
  
```  
USE [master]  
GO  
  
CREATE DATABASE [MySchool]   
  
GO  
  
USE [MySchool]  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Course]([CourseID] [nvarchar](10) NOT NULL,  
[Year] [smallint] NOT NULL,  
[Title] [nvarchar](100) NOT NULL,  
[Credits] [int] NOT NULL,  
[DepartmentID] [int] NOT NULL,  
 CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   
(  
[CourseID] ASC,  
[Year] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Department]([DepartmentID] [int] IDENTITY(1,1) NOT NULL,  
[Name] [nvarchar](50) NOT NULL,  
[Budget] [money] NOT NULL,  
[StartDate] [datetime] NOT NULL,  
[Administrator] [int] NULL,  
 CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   
(  
[DepartmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  
  
SET IDENTITY_INSERT [dbo].[Department] ON   
  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  
SET IDENTITY_INSERT [dbo].[Department] OFF  
  
ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  
REFERENCES [dbo].[Department] ([DepartmentID])  
GO  
ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  
GO  
```  
  
 [如何從資料庫取得結構描述資訊](https://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2)具有 Visual Studio 專案中的此程式碼範例的 C# 和 Visual Basic 版本。  
  
```  
using System;  
using System.Data;  
using System.Data.SqlClient;  
  
class Program {  
   static void Main(string[] args) {  
  
      using (SqlConnection conn = new SqlConnection("Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;")) {  
         conn.Open();  
  
         // Get the Meta Data for Supported Schema Collections  
         DataTable metaDataTable = conn.GetSchema("MetaDataCollections");  
  
         Console.WriteLine("Meta Data for Supported Schema Collections:");  
         ShowDataTable(metaDataTable, 25);  
         Console.WriteLine();  
  
         // Get the schema information of Databases in your instance  
         DataTable databasesSchemaTable = conn.GetSchema("Databases");  
  
         Console.WriteLine("Schema Information of Databases:");  
         ShowDataTable(databasesSchemaTable, 25);  
         Console.WriteLine();  
  
         // First, get schema information of all the tables in current database;  
         DataTable allTablesSchemaTable = conn.GetSchema("Tables");  
  
         Console.WriteLine("Schema Information of All Tables:");  
         ShowDataTable(allTablesSchemaTable, 20);  
         Console.WriteLine();  
  
         // You can specify the Catalog, Schema, Table Name, Table Type to get   
         // the specified table(s).  
         // You can use four restrictions for Table, so you should create a 4 members array.  
         String[] tableRestrictions = new String[4];  
  
         // For the array, 0-member represents Catalog; 1-member represents Schema;   
         // 2-member represents Table Name; 3-member represents Table Type.   
         // Now we specify the Table Name of the table what we want to get schema information.  
         tableRestrictions[2] = "Course";  
  
         DataTable courseTableSchemaTable = conn.GetSchema("Tables", tableRestrictions);  
  
         Console.WriteLine("Schema Information of Course Tables:");  
         ShowDataTable(courseTableSchemaTable, 20);  
         Console.WriteLine();  
  
         // First, get schema information of all the columns in current database.  
         DataTable allColumnsSchemaTable = conn.GetSchema("Columns");  
  
         Console.WriteLine("Schema Information of All Columns:");  
         ShowColumns(allColumnsSchemaTable);  
         Console.WriteLine();  
  
         // You can specify the Catalog, Schema, Table Name, Column Name to get the specified column(s).  
         // You can use four restrictions for Column, so you should create a 4 members array.  
         String[] columnRestrictions = new String[4];  
  
         // For the array, 0-member represents Catalog; 1-member represents Schema;   
         // 2-member represents Table Name; 3-member represents Column Name.   
         // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.  
         columnRestrictions[2] = "Course";  
         columnRestrictions[3] = "DepartmentID";  
  
         DataTable departmentIDSchemaTable = conn.GetSchema("Columns", columnRestrictions);  
  
         Console.WriteLine("Schema Information of DepartmentID Column in Course Table:");  
         ShowColumns(departmentIDSchemaTable);  
         Console.WriteLine();  
  
         // First, get schema information of all the IndexColumns in current database  
         DataTable allIndexColumnsSchemaTable = conn.GetSchema("IndexColumns");  
  
         Console.WriteLine("Schema Information of All IndexColumns:");  
         ShowIndexColumns(allIndexColumnsSchemaTable);  
         Console.WriteLine();  
  
         // You can specify the Catalog, Schema, Table Name, Constraint Name, Column Name to   
         // get the specified column(s).  
         // You can use five restrictions for Column, so you should create a 5 members array.  
         String[] indexColumnsRestrictions = new String[5];  
  
         // For the array, 0-member represents Catalog; 1-member represents Schema;   
         // 2-member represents Table Name; 3-member represents Constraint Name;4-member represents Column Name.   
         // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.  
         indexColumnsRestrictions[2] = "Course";  
         indexColumnsRestrictions[4] = "CourseID";  
  
         DataTable courseIdIndexSchemaTable = conn.GetSchema("IndexColumns", indexColumnsRestrictions);  
  
         Console.WriteLine("Index Schema Information of CourseID Column in Course Table:");  
         ShowIndexColumns(courseIdIndexSchemaTable);  
         Console.WriteLine();  
      }  
  
      Console.WriteLine("Please press any key to exit...");  
      Console.ReadKey();  
   }  
  
   private static void ShowDataTable(DataTable table, Int32 length) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-" + length + "}", col.ColumnName);  
      }  
      Console.WriteLine();  
  
      foreach (DataRow row in table.Rows) {  
         foreach (DataColumn col in table.Columns) {  
            if (col.DataType.Equals(typeof(DateTime)))  
               Console.Write("{0,-" + length + ":d}", row[col]);  
            else if (col.DataType.Equals(typeof(Decimal)))  
               Console.Write("{0,-" + length + ":C}", row[col]);  
            else  
               Console.Write("{0,-" + length + "}", row[col]);  
         }  
         Console.WriteLine();  
      }  
   }  
  
   private static void ShowDataTable(DataTable table) {  
      ShowDataTable(table, 14);  
   }  
  
   private static void ShowColumns(DataTable columnsTable) {  
      var selectedRows = from info in columnsTable.AsEnumerable()  
                         select new {  
                            TableCatalog = info["TABLE_CATALOG"],  
                            TableSchema = info["TABLE_SCHEMA"],  
                            TableName = info["TABLE_NAME"],  
                            ColumnName = info["COLUMN_NAME"],  
                            DataType = info["DATA_TYPE"]  
                         };  
  
      Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "TableCatalog", "TABLE_SCHEMA",  
          "TABLE_NAME", "COLUMN_NAME", "DATA_TYPE");  
      foreach (var row in selectedRows) {  
         Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", row.TableCatalog,  
             row.TableSchema, row.TableName, row.ColumnName, row.DataType);  
      }  
   }  
  
   private static void ShowIndexColumns(DataTable indexColumnsTable) {  
      var selectedRows = from info in indexColumnsTable.AsEnumerable()  
                         select new {  
                            TableSchema = info["table_schema"],  
                            TableName = info["table_name"],  
                            ColumnName = info["column_name"],  
                            ConstraintSchema = info["constraint_schema"],  
                            ConstraintName = info["constraint_name"],  
                            KeyType = info["KeyType"]  
                         };  
  
      Console.WriteLine("{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}", "table_schema", "table_name", "column_name", "constraint_schema", "constraint_name", "KeyType");  
      foreach (var row in selectedRows) {  
         Console.WriteLine("{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}", row.TableSchema,  
             row.TableName, row.ColumnName, row.ConstraintSchema, row.ConstraintName, row.KeyType);  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="collectionName" /> 指定為 null。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName, string[] restrictionValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema (collectionName As String, restrictionValues As String()) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema(System::String ^ collectionName, cli::array &lt;System::String ^&gt; ^ restrictionValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
        <Parameter Name="restrictionValues" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="collectionName">指定要傳回之結構描述的名稱。</param>
        <param name="restrictionValues">所要求之結構描述的限制值集合。</param>
        <summary>使用結構描述名稱的特定字串和限制值的特定字串陣列，傳回這個 <see cref="T:System.Data.SqlClient.SqlConnection" /> 之資料來源的結構描述資訊。</summary>
        <returns>
          <see cref="T:System.Data.DataTable" />，包含結構描述資訊。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `restrictionValues`參數可以提供*n*深度的限制集合的特定集合所指定的值。 若要設定值，指定的限制，而且未設定其他限制的值，您必須設前述限制`null`，然後放置在您想要指定的值限制為適當值。  
  
 這個範例是"Tables"集合。 如果"Tables"集合的三個限制資料庫、 擁有者，而且資料表名稱，而您想要取回只有擁有者 「 卡爾"相關聯的資料表，您需要將下列值： null、"Carl"。 如果未傳入限制值，預設值會使用該限制。 這是相同的對應與傳入`null`，不同於傳遞的參數值為空字串。 在此情況下，則為空字串 ("") 會被視為指定參數的值。  
  
 程式碼範例示範<xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>，請參閱<xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="collectionName" /> 指定為 null。</exception>
        <altmember cref="M:System.Data.SqlClient.SqlConnection.GetSchema" />
      </Docs>
    </Member>
    <Member MemberName="InfoMessage">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlConnection.InfoMessage" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event InfoMessage As SqlInfoMessageEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlInfoMessageEventHandler ^ InfoMessage;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlInfoMessageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>發生於 SQL Server 傳回警告或告知性訊息時。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要處理警告或資訊訊息伺服器所傳送的用戶端應該建立<xref:System.Data.SqlClient.SqlInfoMessageEventHandler>委託以接聽此事件。  
  
 <xref:System.Data.SqlClient.SqlConnection.InfoMessage>嚴重性為 10 的訊息時，就會發生事件或更少由 SQL Server。 嚴重性 11 到 20 之間的訊息會引發錯誤，而對嚴重性 20 原因連接關閉訊息。 如需有關 SQL Server 錯誤層級的詳細資訊，請參閱"Database Engine 錯誤嚴重性"SQL Server 線上叢書 》 中。  
  
 如需詳細資訊和範例，請參閱[連接事件](~/docs/framework/data/adonet/connection-events.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.Open" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Open();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.Open</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用 <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" /> 所指定的屬性設定，開啟資料庫連接。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection>繪製從連接集區的開啟連接，如果有的話。 否則，它會建立新的 SQL Server 執行個體的連接。  
  
> [!NOTE]
>  如果<xref:System.Data.SqlClient.SqlConnection>移出的範圍，它不封閉。 因此，您必須明確地關閉此連接呼叫<xref:System.Data.SqlClient.SqlConnection.Close%2A>。  
  
> [!NOTE]
>  如果您指定當您嘗試連接到 SQL Server 和使用 TCP/IP，以外的通訊協定的執行個體的 1433年以外的通訊埠編號<xref:System.Data.SqlClient.SqlConnection.Open%2A>方法失敗。 若要指定連接埠號碼 1433年以外，包含"server = machinename、 連接埠號碼 」 中的連接字串和使用 TCP/IP 通訊協定。  
  
> [!NOTE]
>  .NET Framework Data Provider for SQL Server 需要使用 「 允許呼叫 unmanaged 組件 」 啟用的安全性權限 (<xref:System.Security.Permissions.SecurityPermission>與<xref:System.Security.Permissions.SecurityPermissionFlag>設`UnmanagedCode`) 若要開啟<xref:System.Data.SqlClient.SqlConnection>啟用 SQL 偵錯。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlConnection>，隨即開啟，並顯示其部分屬性。 連線會自動關閉的結尾`using`區塊。  
  
 [!code-csharp[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">無法在未指定資料來源或伺服器的情況下開啟連接。  或  連線已經開啟。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">開啟連接時發生連接層級的錯誤。 如果 <see cref="P:System.Data.SqlClient.SqlException.Number" /> 屬性包含值 18487 或 18488，這就表示指定的密碼已過期或必須重設。 如需詳細資訊，請參閱 <see cref="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" /> 方法。  app.config 檔案中的 <see langword="&lt;system.data.localdb&gt;" /> 標記有無效或未知的項目。</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">在 <see langword="&lt;localdbinstances&gt;" /> 區段中有兩個項目同名。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task OpenAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ OpenAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">取消指令。</param>
        <summary>非同步版本的 <see cref="M:System.Data.SqlClient.SqlConnection.Open" />，這個版本會透過 <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" /> 所指定的屬性設定開啟資料庫連接。 取消語彙基元可用於要求在連線逾時之前捨棄作業。  例外狀況將經由傳回的工作傳播。 如果超過連接逾時期限而未順利連線，傳回的工作會標示為失敗並發生例外狀況。 實作會傳回一項工作，而不需針對集區和非集區的連接封鎖呼叫的執行緒。</summary>
        <returns>表示非同步作業的工作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在呼叫<xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>，<xref:System.Data.SqlClient.SqlConnection.State%2A>必須傳回<xref:System.Data.ConnectionState.Connecting>直到傳回<xref:System.Threading.Tasks.Task>完成。 然後，如果連接成功，<xref:System.Data.SqlClient.SqlConnection.State%2A>必須傳回<xref:System.Data.ConnectionState.Open>。 如果連接失敗，<xref:System.Data.SqlClient.SqlConnection.State%2A>必須傳回<xref:System.Data.ConnectionState.Closed>。  
  
 呼叫<xref:System.Data.SqlClient.SqlConnection.Close%2A>會嘗試取消，或關閉對應<xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>呼叫。  
  
 如需在.NET Framework Data Provider for SQL Server 的非同步程式設計的詳細資訊，請參閱[進行非同步程式設計](~/docs/framework/data/adonet/asynchronous-programming.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在工作完成前，對同一個執行個體呼叫 <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" /> 不止一次。  
  
 在連接字串中指定了 <see langword="Context Connection=true" />。  在連接逾時前，無法從連接集區取得連接。</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">開啟連線時所發生並由 SQL Server 傳回的任何錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="PacketSize">
      <MemberSignature Language="C#" Value="public int PacketSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PacketSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.PacketSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PacketSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PacketSize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用來與 SQL Server 執行個體通訊的網路封包大小 (位元組)。</summary>
        <value>網路封包的大小 (位元組)。 預設值為 8000。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果應用程式執行大量複製作業，或傳送或接收大量的 text 或 image 的資料，則大於預設值可能會改善效率，因為這會導致較少的網路封包讀取和寫入作業。 如果應用程式傳送與接收資訊的資訊量很少，您可以設定封包大小為 512 位元組 (使用中的封包大小值<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>)，即足以應付大部分的資料傳輸作業。 對於大部分的應用程式，預設封包大小是最佳的。  
  
 <xref:System.Data.SqlClient.SqlConnection.PacketSize%2A> 可能的 512 到 32767 之間的位元組範圍內的值。 如果值是在這個範圍之外，會產生例外狀況。  
  
 將設定預設值為一個數字大於 8000 會導致多頁配置器使用的 SQL Server 執行個體，而不是最有效率的 SinglePage 配置器，減少整體延展性的 SQL Server 上的封包。 如需有關 SQL Server 如何使用記憶體的詳細資訊，請參閱[記憶體架構](http://go.microsoft.com/fwlink/?LinkId=143705)SQL Server 線上叢書 》 中。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlConnection>，包括設定`Packet Size`為 512，連接字串中。 它會顯示<xref:System.Data.SqlClient.SqlConnection.PacketSize%2A>和<xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A>主控台視窗中的屬性。  
  
 [!code-csharp[Classic WebData SqlConnection.PacketSize Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.PacketSize Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.PacketSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.PacketSize Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterColumnEncryptionKeyStoreProviders">
      <MemberSignature Language="C#" Value="public static void RegisterColumnEncryptionKeyStoreProviders (System.Collections.Generic.IDictionary&lt;string,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider&gt; customProviders);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterColumnEncryptionKeyStoreProviders(class System.Collections.Generic.IDictionary`2&lt;string, class System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider&gt; customProviders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterColumnEncryptionKeyStoreProviders (customProviders As IDictionary(Of String, SqlColumnEncryptionKeyStoreProvider))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterColumnEncryptionKeyStoreProviders(System::Collections::Generic::IDictionary&lt;System::String ^, System::Data::SqlClient::SqlColumnEncryptionKeyStoreProvider ^&gt; ^ customProviders);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customProviders" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider&gt;" />
      </Parameters>
      <Docs>
        <param name="customProviders">自訂提供者</param>
        <summary>註冊資料行加密金鑰存放區提供者。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetStatistics">
      <MemberSignature Language="C#" Value="public void ResetStatistics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetStatistics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ResetStatistics" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetStatistics ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetStatistics();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果啟用統計資料蒐集，則所有值都會重設為零。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未啟用統計資料蒐集，會呼叫這個方法會擲不回任何錯誤。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveStatistics">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary RetrieveStatistics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IDictionary RetrieveStatistics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.RetrieveStatistics" />
      <MemberSignature Language="VB.NET" Value="Public Function RetrieveStatistics () As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IDictionary ^ RetrieveStatistics();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>呼叫方法時，傳回統計資料的名稱值配對集合。</summary>
        <returns>傳回 <see cref="T:System.Collections.DictionaryEntry" /> 項目之 <see cref="T:System.Collections.IDictionary" /> 類型的參考。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼叫這個方法時，擷取的值是在目前點的時間。 如果您繼續使用的連接，這些值不正確。 您要重新執行方法，以取得最新的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ServerVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ServerVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ServerVersion { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得字串，其中包含用戶端連線的 SQL Server 執行個體版本。</summary>
        <value>SQL Server 執行個體版本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 版本是表單的 *# #。 # #。 # # #*，其中前兩個數字的主要版本、 下面兩個的數字是否為次要版本，而且最後四位數字的發行版本。 字串為形式*major.minor.build*，其中主要及次要剛好兩位數，且組建是剛好四位數。  
  
 傳回的工作未完成時即已呼叫 <xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A>，而且在呼叫 <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A> 之後未開啟連接。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlConnection>並顯示<xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A>屬性。  
  
 [!code-csharp[Classic WebData ISqlConnection.ServerVersion Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData ISqlConnection.ServerVersion Example/CS/source.cs#1)]
 [!code-vb[Classic WebData ISqlConnection.ServerVersion Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData ISqlConnection.ServerVersion Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">連接關閉。  
  
 傳回的工作未完成時即已呼叫 <see cref="P:System.Data.SqlClient.SqlConnection.ServerVersion" />，而且在呼叫 <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" /> 之後未開啟連接。</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As ConnectionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::ConnectionState State { System::Data::ConnectionState get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.State</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指出在連接上執行最近一次網路作業期間的 <see cref="T:System.Data.SqlClient.SqlConnection" /> 狀態。</summary>
        <value>
          <see cref="T:System.Data.ConnectionState" /> 列舉。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 傳回<xref:System.Data.ConnectionState>指示狀態的列舉<xref:System.Data.SqlClient.SqlConnection>。 關閉並重新開啟連接會重新整理的值<xref:System.Data.SqlClient.SqlConnection.State%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatisticsEnabled">
      <MemberSignature Language="C#" Value="public bool StatisticsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StatisticsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.StatisticsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property StatisticsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StatisticsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>設定為 <see langword="true" /> 時，啟用目前連接的統計資料蒐集。</summary>
        <value>如果啟用統計資料蒐集，則傳回 <see langword="true" />，否則傳回 <see langword="false" />。 <see langword="false" /> 是預設值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 啟用統計資料蒐集有次要、 但明顯影響效能，因此應該啟用只在需要時。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>建立目前執行個體複本的新物件。</summary>
        <returns>這個執行個體複本的新物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個成員是明確介面成員實作， 只有在 <xref:System.Data.SqlClient.SqlConnection> 執行個體轉換成 <xref:System.ICloneable> 介面時，才能使用這個成員。  
  
 .NET Compact Framework 才支援這個成員。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkstationId">
      <MemberSignature Language="C#" Value="public string WorkstationId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WorkstationId" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.WorkstationId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkstationId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ WorkstationId { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得識別資料庫用戶端的字串。</summary>
        <value>識別資料庫用戶端的字串。 如果沒有指定，則為用戶端電腦的名稱。 如果都沒有指定，則該值為空字串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 字串通常包含用戶端的網路名稱。 <xref:System.Data.SqlClient.SqlConnection.WorkstationId%2A>屬性會對應至`Workstation ID`連接字串屬性。  
  
   
  
## Examples  
 下列範例會建立<xref:System.Data.SqlClient.SqlConnection>並顯示<xref:System.Data.SqlClient.SqlConnection.WorkstationId%2A>屬性。  
  
 [!code-csharp[Classic WebData SqlConnection.WorkstationId Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.WorkstationId Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.WorkstationId Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.WorkstationId Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>