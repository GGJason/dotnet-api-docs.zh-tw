<Type Name="SpellCheck" FullName="System.Windows.Controls.SpellCheck">
  <Metadata><Meta Name="ms.openlocfilehash" Value="911b5f562321df231edcf6b89e82bd8981861fad" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51893280" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpellCheck" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpellCheck extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.SpellCheck" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpellCheck" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpellCheck sealed" />
  <TypeSignature Language="F#" Value="type SpellCheck = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供文字編輯控制項的即時拼字檢查功能 (例如 <see cref="T:System.Windows.Controls.TextBox" /> 和 <see cref="T:System.Windows.Controls.RichTextBox" />)。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要啟用拼字檢查程式，將<xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType>屬性設`true`文字編輯控制項上。 啟用此拼字檢查程式時，拼錯的單字會加上底線使用紅色的波浪線，如下圖所示。 只有在 WPF 提供一個預設字典時，才支援拼字檢查程式。 在  [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，WPF 提供的英文、 法文、 德文和西班牙文的字典。  
  
 ![具有拼字的 Textbox&#45;檢查](~/add/media/editing-textbox-with-spellchecking.png "具有拼字檢查的 Textbox")  
  
 若要加入自訂字典，加入 lexicon 檔案位置<xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A>集合。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CustomDictionaries">
      <MemberSignature Language="C#" Value="public System.Collections.IList CustomDictionaries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList CustomDictionaries" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomDictionaries As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ CustomDictionaries { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomDictionaries : System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得用於自訂拼字檢查之 Lexicon 檔案位置的集合。</summary>
        <value>Lexicon 檔案位置的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自訂字典使用 lexicon 檔案，也就是使用.lex 副檔名的文字檔。 Lexicon 檔案的每一行包含接受為合法的拼字檢查的單一字組。 檔案的第一行可以指定字典適用於地區設定識別碼 (LCID)。 如果未指定地區設定，字典適用於所有語言。 如需詳細資訊，請參閱 <<c0> [ 地區設定識別碼](https://go.microsoft.com/fwlink/?LinkId=165561)。 下列範例會顯示英文語言 lexicon 檔案的前幾行。  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 若要指定一或多個自訂字典<xref:System.Windows.Controls.TextBox>或任何類別都衍生自<xref:System.Windows.Controls.Primitives.TextBoxBase>，藉由新增至檔案的 URI 中指定的 lexicon 檔案位置<xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A>集合。  
  
> [!NOTE]
>  使用<xref:System.Collections.IList.Insert%2A>若要將檔案新增至<xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A>收集會導致例外狀況。 請改用<xref:System.Collections.IList.Add%2A>和<xref:System.Collections.IList.Remove%2A>更新集合。  
  
 Lexicon 檔案可以包含在應用程式安裝在本機電腦上的內容檔案的形式，或做為資源檔編譯成本機參考的組件。 您可以使用 pack Uri 來參考檔案。 如需詳細資訊，請參閱 [WPF 中的 Pack URI](~/docs/framework/wpf/app-development/pack-uris-in-wpf.md)。  
  
 若要啟用拼字檢查程式，將<xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType>屬性，以`true`上<xref:System.Windows.Controls.TextBox>或任何衍生自的類別上<xref:System.Windows.Controls.Primitives.TextBoxBase>。 所有的自訂字典，該<xref:System.Windows.Controls.TextBox>除了預設的拼字檢查程式會使用。 如需拼字檢查程式的詳細資訊，請參閱<xref:System.Windows.Controls.SpellCheck>。  
  
   
  
## Examples  
 下列範例示範如何新增兩個自訂字典，以便<xref:System.Windows.Controls.RichTextBox>。 XAML 會加入第一個自訂字典 (customwords.lex)。 檔案是包含在應用程式中當成內容檔案，複製到輸出目錄。 若要使用<xref:System.Uri>項目，您必須包含 System 命名空間。  
  
 `xmlns:sys="clr-namespace:System;assembly=System"`  
  
 在中新增第二個自訂字典 (customwords2.lex)<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件處理常式。 檔案會包含做為資源檔，並編譯成應用程式組件是名為 WPFCustomDictionary。  
  
 [!code-xaml[WpfCustomDictionary#1](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml#1)]  
  
 [!code-csharp[WpfCustomDictionary#2](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml.cs#2)]
 [!code-vb[WpfCustomDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/wpfcustomdictionary/vb/mainwindow.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
        <altmember cref="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      </Docs>
    </Member>
    <Member MemberName="CustomDictionariesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomDictionariesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomDictionariesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomDictionariesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomDictionariesProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomDictionariesProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" /> 相依性屬性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDictionaries">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetCustomDictionaries (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetCustomDictionaries(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetCustomDictionaries(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetCustomDictionaries : System.Windows.Controls.Primitives.TextBoxBase -&gt; System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.GetCustomDictionaries textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">要擷取 Lexicon 檔案集合的文字編輯控制項。</param>
        <summary>取得 Lexicon 檔案位置的集合，這些檔案位置用於自訂指定之文字編輯控制項上的拼字檢查程式。</summary>
        <returns>Lexicon 檔案位置的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自訂字典使用 lexicon 檔案，也就是副檔名為.lex 的簡單文字檔。 Lexicon 檔案的每一行包含接受為合法的拼字檢查的單一字組。 檔案的第一行可以指定字典適用於地區設定識別碼 (LCID)。 如果未指定地區設定，字典適用於所有語言。 如需詳細資訊，請參閱 <<c0> [ 地區設定識別碼](https://go.microsoft.com/fwlink/?LinkId=165561)。 下列範例會顯示英文語言 lexicon 檔案的前幾行。  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 若要指定一或多個自訂字典<xref:System.Windows.Controls.TextBox>或任何類別都衍生自<xref:System.Windows.Controls.Primitives.TextBoxBase>，藉由新增至檔案的 URI 中指定的 lexicon 檔案位置<xref:System.Collections.IList>所傳回<xref:System.Windows.Controls.SpellCheck.GetCustomDictionaries%2A>方法。  
  
 若要啟用拼字檢查程式，將<xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType>屬性，以`true`上<xref:System.Windows.Controls.TextBox>或任何衍生自的類別上<xref:System.Windows.Controls.Primitives.TextBoxBase>。 所有的自訂字典，該<xref:System.Windows.Controls.TextBox>除了預設的拼字檢查程式會使用。 如需拼字檢查程式的詳細資訊，請參閱<xref:System.Windows.Controls.SpellCheck>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textBoxBase" /> 為 <see langword="null" />。</exception>
        <altmember cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
      </Docs>
    </Member>
    <Member MemberName="GetIsEnabled">
      <MemberSignature Language="C#" Value="public static bool GetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase -&gt; bool" Usage="System.Windows.Controls.SpellCheck.GetIsEnabled textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">要檢查的文字編輯控制項。 範例控制項包括 <see cref="T:System.Windows.Controls.TextBox" /> 和 <see cref="T:System.Windows.Controls.RichTextBox" />。</param>
        <summary>傳回值，這個值表示指定的文字編輯控制項上是否已啟用拼字檢查程式。</summary>
        <returns>如果文字編輯控制項上已啟用拼字檢查程式則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textBoxBase" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，決定是否在這個文字編輯控制項上啟用拼字檢查程式，例如 <see cref="T:System.Windows.Controls.TextBox" /> 或 <see cref="T:System.Windows.Controls.RichTextBox" />。</summary>
        <value>如果控制項上啟用拼字檢查程式，則為 <see langword="true" />；否則為 <see langword="false" />。 預設值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個相依性屬性也會有特殊的僅限寫入附加的屬性使用方式。 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]來設定屬性的語法`<` *textBoxBaseClass* **SpellCheck.IsEnabled**`="`*boolValue* `" .../>`，其中*textBoxBaseClass*是衍生自類別的物件項目<xref:System.Windows.Controls.Primitives.TextBoxBase>，並*boolValue*是`true`或`false`（案例不區分大小寫）。 若要設定此屬性為附加屬性在程式碼中，請參閱<xref:System.Windows.Controls.SpellCheck.SetIsEnabled%2A>方法。 沒有相符`GetIsEnabled`存取子。 若要取得值，取得目前<xref:System.Windows.Controls.SpellCheck>物件從<xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType>屬性，然後取得的值<xref:System.Windows.Controls.SpellCheck.IsEnabled%2A>屬性，從<xref:System.Windows.Controls.SpellCheck>。  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>相依性屬性資訊  
  
|||  
|-|-|  
|識別項欄位|<xref:System.Windows.Controls.SpellCheck.IsEnabledProperty>|  
|若要設定的中繼資料屬性 `true`|無|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Controls.SpellCheck.IsEnabled" /> 相依性屬性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsEnabled">
      <MemberSignature Language="C#" Value="public static void SetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, bool value);" />
      <MemberSignature Language="F#" Value="static member SetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase * bool -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetIsEnabled (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">要啟用或停用拼字檢查程式的文字編輯控制項。 範例控制項包括 <see cref="T:System.Windows.Controls.TextBox" /> 和 <see cref="T:System.Windows.Controls.RichTextBox" />。</param>
        <param name="value">布林值，指定是否在文字編輯控制項上啟用拼字檢查程式。</param>
        <summary>在指定的文字編輯控制項上 (例如 <see cref="T:System.Windows.Controls.TextBox" /> 或 <see cref="T:System.Windows.Controls.RichTextBox" />)，啟用或停用拼字檢查程式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可讓針對附加的屬性使用方式<xref:System.Windows.Controls.SpellCheck.IsEnabled%2A>屬性中的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。 下列範例所示[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]使用量。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpellingReform">
      <MemberSignature Language="C#" Value="public static void SetSpellingReform (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, System.Windows.Controls.SpellingReform value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSpellingReform(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, valuetype System.Windows.Controls.SpellingReform value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetSpellingReform(System.Windows.Controls.Primitives.TextBoxBase,System.Windows.Controls.SpellingReform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSpellingReform(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, System::Windows::Controls::SpellingReform value);" />
      <MemberSignature Language="F#" Value="static member SetSpellingReform : System.Windows.Controls.Primitives.TextBoxBase * System.Windows.Controls.SpellingReform -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetSpellingReform (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Windows.Controls.SpellingReform" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">要套用拼字檢查程式的文字編輯控制項。 範例控制項包括 <see cref="T:System.Windows.Controls.TextBox" /> 和 <see cref="T:System.Windows.Controls.RichTextBox" />。</param>
        <param name="value"><see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> 值，決定拼字修訂規則。</param>
        <summary>決定拼字檢查程式所使用的拼字修訂規則。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法所存取的拼字修訂規則是指 1990 年法文及德文的拼字修訂。 它使用與任何其他語言時，這個方法沒有任何作用。  
  
 這個方法可讓針對附加的屬性使用方式<xref:System.Windows.Controls.SpellCheck.SpellingReform%2A>屬性中的[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReform">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SpellingReform SpellingReform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.SpellingReform SpellingReform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberSignature Language="VB.NET" Value="Public Property SpellingReform As SpellingReform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::SpellingReform SpellingReform { System::Windows::Controls::SpellingReform get(); void set(System::Windows::Controls::SpellingReform value); };" />
      <MemberSignature Language="F#" Value="member this.SpellingReform : System.Windows.Controls.SpellingReform with get, set" Usage="System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SpellingReform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定拼字檢查程式所使用的拼字修訂規則。</summary>
        <value>拼字檢查程式所使用的拼字修訂規則。 法文的預設值為 <see cref="F:System.Windows.Controls.SpellingReform.PreAndPostreform" />，德文的預設值為 <see cref="F:System.Windows.Controls.SpellingReform.Postreform" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 法文與德文的拼字修訂是指取決於此屬性的拼字修訂規則。 它使用與任何其他語言時，這個屬性沒有任何作用。  
  
 這個相依性屬性也會有特殊的僅限寫入附加的屬性使用方式。 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]來設定屬性的語法`<` *textBoxBaseClass* **SpellCheck.SpellingReform**`="`*enumValue* `" .../>`，其中*textBoxBaseClass*是衍生自類別的物件項目<xref:System.Windows.Controls.Primitives.TextBoxBase>，並*enumValue*是值的字串名稱<xref:System.Windows.Controls.SpellingReform>列舉型別。 若要設定此屬性為附加屬性在程式碼中，請參閱<xref:System.Windows.Controls.SpellCheck.SetSpellingReform%2A>方法。 沒有相符`GetSpellingReform`存取子。 若要取得值，取得目前<xref:System.Windows.Controls.SpellCheck>物件從<xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType>屬性，然後取得的值<xref:System.Windows.Controls.SpellCheck.SpellingReform%2A>屬性，從<xref:System.Windows.Controls.SpellCheck>。  
  
<a name="dependencyPropertyInfo_SpellingReform"></a>   
## <a name="dependency-property-information"></a>相依性屬性資訊  
  
|||  
|-|-|  
|識別項欄位|<xref:System.Windows.Controls.SpellCheck.SpellingReformProperty>|  
|若要設定的中繼資料屬性 `true`|無|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SpellingReformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SpellingReformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SpellingReformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SpellingReformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SpellingReformProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> 相依性屬性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>