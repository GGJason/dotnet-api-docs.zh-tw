<Type Name="Label" FullName="System.Windows.Controls.Label">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8e2c2703d49f4ce15e4bbc5a90c2dc8ca5b87073" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30618692" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Label : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Label extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Label" />
  <TypeSignature Language="VB.NET" Value="Public Class Label&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Label : System::Windows::Controls::ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Label)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>代表控制項的文字標籤，並支援便捷鍵。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別會提供存取金鑰 （也稱為助憶鍵） 的功能和視覺支援。 它經常會用來啟用快速鍵盤存取控制項，例如<xref:System.Windows.Controls.TextBox>。 若要指派<xref:System.Windows.Controls.Label>至<xref:System.Windows.Controls.Control>，將<xref:System.Windows.Controls.Label.Target%2A>控制項取得焦點時使用者按下便捷鍵的屬性。 設定目標也原因[!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)]做為目標的控制項名稱中使用的標籤文字。 如需詳細資訊，請參閱[協助工具](~/docs/framework/ui-automation/index.md)。  
  
 若要設定的存取金鑰之前, 加上底線的字元，應該是存取金鑰。 如果您的內容有多個底線字元，只有第一個會轉換成便捷鍵。其他底線會顯示為一般文字。 如果您想要轉換為存取金鑰的底線字元不是第一個底線，使用兩個連續底線的任何之前，您想要轉換的底線。 例如，下列程式碼包含的存取金鑰並將顯示為 _Hello**W**ogw:  
  
```  
<Label>__Hello_World</Label>   
```  
  
 因為雙底線前面 H 即 W 鍵會註冊為存取金鑰。  
  
 標籤不是可設定焦點，而且不定位停駐點。 如需詳細資訊，請參閱[焦點概觀](~/docs/framework/wpf/advanced/focus-overview.md)。  
  
 A<xref:System.Windows.Controls.Label>是<xref:System.Windows.Controls.ContentControl>，這表示它可以包含單一物件的任何類型 （例如字串、 影像或工作面板）。 如需詳細資訊，請參閱 <xref:System.Windows.Controls.ContentControl> 類別。  
  
## <a name="customizing-the-label-control"></a>自訂標籤控制項  
 若要套用至多個相同的屬性設定<xref:System.Windows.Controls.Label>控制項，可使用<xref:System.Windows.FrameworkElement.Style%2A>屬性。 您可以修改預設<xref:System.Windows.Controls.ControlTemplate>來提供獨特的外觀的控制項。 如需有關建立<xref:System.Windows.Controls.ControlTemplate>，請參閱[自訂現有控制項的外觀，藉由建立 ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  若要查看的組件和所特有狀態<xref:System.Windows.Controls.Label>，請參閱[標籤樣式和範本](~/docs/framework/wpf/controls/label-styles-and-templates.md)。  
  
 對這個控制項的相依性屬性可能會設定控制項的預設樣式。  如果屬性設定為預設樣式，屬性可能會變更其預設值時該控制項會出現在應用程式中。 預設樣式是由決定由哪個桌面主題時，會使用應用程式正在執行。  如需詳細資訊，請參閱[預設 WPF 佈景主題](http://go.microsoft.com/fwlink/?LinkID=158252)。  
  
> [!NOTE]
>  設定視覺化屬性只會影響該屬性是否存在於這兩<xref:System.Windows.Controls.Label>控制項的預設範本，並且使用設定的。 您可以找到的視覺屬性清單中的 「 變更 Visual 結構的控制項 」 一節中[自訂現有控制項的外觀，藉由建立 ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  
  
   
  
## Examples  
 下列範例示範如何建立<xref:System.Windows.Controls.Label>設定目標使用的繫結。  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 下列範例示範如何建立<xref:System.Windows.Controls.Label>，具有存取金鑰，並支援文字換行。  
  
 [!code-xaml[LabelSnippet#4](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Label();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.Label" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>提供這個控制項的適當 <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> 實作，做為 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 基礎結構的一部分。</summary>
        <returns>因型別而異的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 實作。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public System.Windows.UIElement Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement Target" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Label.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As UIElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::UIElement ^ Target { System::Windows::UIElement ^ get(); void set(System::Windows::UIElement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.NameReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定可在使用者按下標籤便捷鍵時接收焦點的項目。</summary>
        <value>當使用者按下便捷鍵時，會接收焦點的 <see cref="T:System.Windows.UIElement" />。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以提供鍵盤快速鍵以不支援所提供的便捷鍵的項目<xref:System.Windows.Controls.Label>存取金鑰和設定這個屬性。 指派到某個標籤便捷鍵放置底線字元做為存取金鑰正前方。 便捷鍵可以指定在<xref:System.Windows.Controls.ContentControl.Content%2A>屬性或藉由設定<xref:System.Windows.Controls.ContentControl.Content%2A>至<xref:System.Windows.Controls.AccessText>物件。  
  
 您無法使用這個屬性來定義<xref:System.Windows.UIElement>。 例如，下列編譯，但沒有作用： `<object.Target><UIElement../></object.Target>`。 這個屬性會提供您的應用程式中已定義的項目參考。  
  
<a name="dependencyPropertyInfo_Target"></a>   
## <a name="dependency-property-information"></a>相依性屬性資訊  
  
|||  
|-|-|  
|識別項欄位|<xref:System.Windows.Controls.Label.TargetProperty>|  
|中繼資料屬性設定為 `true`|無|  
  
<a name="xamlAttributeUsage_Target"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<Label Target=" nameOfExistingElement"/>  
  
```  
  
<a name="xamlPropertyElementUsage_Target"></a>   
## <a name="xaml-property-element-usage"></a>XAML 屬性項目用法  
  
<a name="xamlValues_Target"></a>   
## <a name="xaml-values"></a>XAML 值  
 `nameOfExistingElement`  
 名稱<xref:System.Windows.UIElement>按下便捷鍵時接收焦點。  
  
   
  
## Examples  
 下列範例將示範如何設定 <xref:System.Windows.Controls.Label.Target%2A> 的<xref:System.Windows.Controls.Label> 屬性。  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Label.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Controls.Label.Target" /> 相依性屬性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>