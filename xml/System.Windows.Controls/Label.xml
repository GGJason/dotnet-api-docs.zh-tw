<Type Name="Label" FullName="System.Windows.Controls.Label">
  <Metadata><Meta Name="ms.openlocfilehash" Value="404d387e6f18874b34985ba1963c198340389db4" /><Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/29/2018" /><Meta Name="ms.locfileid" Value="52615278" /></Metadata><TypeSignature Language="C#" Value="public class Label : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Label extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Label" />
  <TypeSignature Language="VB.NET" Value="Public Class Label&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Label : System::Windows::Controls::ContentControl" />
  <TypeSignature Language="F#" Value="type Label = class&#xA;    inherit ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Label)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>代表控制項的文字標籤，並支援便捷鍵。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別提供存取金鑰 （也就是助憶鍵） 的功能和視覺的支援。 它經常會用來啟用控制項的鍵盤快速存取，例如<xref:System.Windows.Controls.TextBox>。 若要將指派<xref:System.Windows.Controls.Label>要<xref:System.Windows.Controls.Control>，將<xref:System.Windows.Controls.Label.Target%2A>應該在使用者按下便捷鍵時取得焦點之控制項的屬性。 設定也會導致目標[!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)]將標籤的文字作為目標控制項的名稱。 如需詳細資訊，請參閱 <<c0> [ 協助工具](~/docs/framework/ui-automation/index.md)。  
  
 若要設定的存取金鑰之前, 加上底線的字元，應該是存取金鑰。 如果您的內容有多個底線字元，只有第一個會轉換成便捷鍵;其他底線會顯示為一般文字。 如果您想要轉換成的存取金鑰的底線字元不是第一個底線，用於任何底線前面的您想要轉換的兩個連續底線。 例如，下列程式碼包含的存取金鑰並將顯示為 _Hello**W**ogw:  
  
```  
<Label>__Hello_World</Label>   
```  
  
 由於前面 H 底線是雙精度浮點數，W 鍵會註冊為便捷鍵。  
  
 標籤不是可設定焦點，並不是定位停駐點。 如需詳細資訊，請參閱 <<c0> [ 焦點概觀](~/docs/framework/wpf/advanced/focus-overview.md)。  
  
 A<xref:System.Windows.Controls.Label>是<xref:System.Windows.Controls.ContentControl>，這表示它可以包含任何類型 （例如字串、 影像或工作面板） 的單一物件。 如需詳細資訊，請參閱 <xref:System.Windows.Controls.ContentControl> 類別。  
  
## <a name="customizing-the-label-control"></a>自訂標籤控制項  
 若要將相同的屬性設定套用至多個<xref:System.Windows.Controls.Label>控制項，可使用<xref:System.Windows.FrameworkElement.Style%2A>屬性。 您可以修改預設<xref:System.Windows.Controls.ControlTemplate>，讓控制項的獨特的外觀。 如需有關建立<xref:System.Windows.Controls.ControlTemplate>，請參閱 <<c2> [ 透過建立 ControlTemplate 自訂現有控制項的外觀](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  若要查看的組件和狀態所特有<xref:System.Windows.Controls.Label>，請參閱 < [Label 樣式和範本](~/docs/framework/wpf/controls/label-styles-and-templates.md)。  
  
 此控制項的相依性屬性可能會設定控制項的預設樣式。  如果屬性設定為預設樣式，屬性可能會變更其預設值，當控制項出現在應用程式。 預設樣式會決定由哪一個桌面佈景主題時，會使用應用程式正在執行。  如需詳細資訊，請參閱 <<c0> [ 預設 WPF 佈景主題](https://go.microsoft.com/fwlink/?LinkID=158252)。  
  
> [!NOTE]
>  設定視覺化屬性只能影響該屬性是否都存在於<xref:System.Windows.Controls.Label>控制項的預設範本，並設定使用。 您可以找到的視覺化屬性清單中的 「 變更視覺結構的控制項 」 一節[透過建立 ControlTemplate 自訂現有控制項的外觀](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  
  
   
  
## Examples  
 下列範例示範如何建立<xref:System.Windows.Controls.Label>使用繫結來設定目標。  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 下列範例示範如何建立<xref:System.Windows.Controls.Label>，具有便捷鍵，並支援文字換行。  
  
 [!code-xaml[LabelSnippet#4](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#4)]   
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms752101(v=vs.90)">如何： 設定標籤的目標屬性</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Label();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.Label" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="label.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>提供這個控制項的適當 <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> 實作，做為 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 基礎結構的一部分。</summary>
        <returns>因型別而異的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 實作。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public System.Windows.UIElement Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement Target" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Label.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As UIElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::UIElement ^ Target { System::Windows::UIElement ^ get(); void set(System::Windows::UIElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Target : System.Windows.UIElement with get, set" Usage="System.Windows.Controls.Label.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.NameReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定可在使用者按下標籤便捷鍵時接收焦點的項目。</summary>
        <value><see cref="T:System.Windows.UIElement" /> 會在使用者按下便捷鍵時接收焦點。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以提供項目不支援所提供的存取金鑰的鍵盤快速鍵<xref:System.Windows.Controls.Label>便捷鍵和設定這個屬性。 指派到某個標籤便捷鍵加上底線做為便捷鍵字元正前方。 可以在中指定的存取金鑰<xref:System.Windows.Controls.ContentControl.Content%2A>屬性或藉由設定<xref:System.Windows.Controls.ContentControl.Content%2A>到<xref:System.Windows.Controls.AccessText>物件。  
  
 您無法使用這個屬性來定義<xref:System.Windows.UIElement>。 例如，下列是編譯，但正常運作： `<object.Target><UIElement../></object.Target>`。 這個屬性會提供您的應用程式中已定義的項目參考。  
  
<a name="dependencyPropertyInfo_Target"></a>   
## <a name="dependency-property-information"></a>相依性屬性資訊  
  
|||  
|-|-|  
|識別項欄位|<xref:System.Windows.Controls.Label.TargetProperty>|  
|若要設定的中繼資料屬性 `true`|無|  
  
<a name="xamlAttributeUsage_Target"></a>   
## <a name="xaml-attribute-usage"></a>XAML Attribute Usage  
  
```  
<Label Target=" nameOfExistingElement"/>  
  
```  
  
<a name="xamlPropertyElementUsage_Target"></a>   
## <a name="xaml-property-element-usage"></a>XAML 屬性項目用法  
  
<a name="xamlValues_Target"></a>   
## <a name="xaml-values"></a>XAML 值  
 `nameOfExistingElement`  
 名稱<xref:System.Windows.UIElement>在按下便捷鍵時接收焦點。  
  
   
  
## Examples  
 下列範例將示範如何設定 <xref:System.Windows.Controls.Label.Target%2A> 的<xref:System.Windows.Controls.Label> 屬性。  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms752101(v=vs.90)">如何： 設定標籤的目標屬性</related>
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Label.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.Label.TargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>識別 <see cref="P:System.Windows.Controls.Label.Target" /> 相依性屬性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>