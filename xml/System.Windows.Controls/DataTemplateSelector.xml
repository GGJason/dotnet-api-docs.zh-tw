<Type Name="DataTemplateSelector" FullName="System.Windows.Controls.DataTemplateSelector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a3663eceb4ab3e938c1acd62509f27bbdb293649" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37524127" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataTemplateSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplateSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.DataTemplateSelector" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplateSelector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplateSelector" />
  <TypeSignature Language="F#" Value="type DataTemplateSelector = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>根據資料物件和資料繫結項目，提供方法來選擇 <see cref="T:System.Windows.DataTemplate" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，您會建立<xref:System.Windows.Controls.DataTemplateSelector>有一個以上<xref:System.Windows.DataTemplate>相同類型的物件，而且您想要提供您自己的邏輯，來選擇<xref:System.Windows.DataTemplate>將根據每個資料物件的屬性。 請注意，如果您有不同的物件型別可以設定<xref:System.Windows.DataTemplate.DataType%2A>屬性上的<xref:System.Windows.DataTemplate>。 如果您這麼做，則不需要建立<xref:System.Windows.Controls.DataTemplateSelector>。 此外，如果您有物件型別相同，但有不同的屬性，您也可以考慮使用<xref:System.Windows.DataTrigger>或資料轉換子。 如需詳細資訊，請參閱 [資料範本化概觀](~/docs/framework/wpf/data/data-templating-overview.md)。  
  
 若要建立的範本選取器，請建立繼承自類別<xref:System.Windows.Controls.DataTemplateSelector>，並覆寫<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法。 一旦您的類別定義您可以指派至您的項目範本選取器屬性的類別的執行個體。  
  
   
  
## Examples  
 在此範例中，繫結來源是一份`Task`物件。 屬性之一`Task`物件是`Priority`。 有兩個定義的資料範本`myTaskTemplate`和`importantTaskTemplate`。  
  
 若要提供邏輯以選擇哪些<xref:System.Windows.DataTemplate>使用根據`Priority`值的資料物件，建立的子類別<xref:System.Windows.Controls.DataTemplateSelector>，並覆寫<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法。 在下列範例中，<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法會提供邏輯，以傳回適當的值為基礎的範本`Priority`屬性。 要傳回範本的資源封套中找到<xref:System.Windows.Window>項目。  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 然後，就可以宣告`TaskListDataTemplateSelector` 為資源：  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 若要使用的範本選取器資源，將它指派給<xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A>屬性<xref:System.Windows.Controls.ListBox>。 <xref:System.Windows.Controls.ListBox>呼叫<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法`TaskListDataTemplateSelector`針對每個基礎集合中的項目。 該呼叫會將資料物件當做項目參數傳遞。 <xref:System.Windows.DataTemplate>時所傳回的方法適用於該資料物件。  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 如需完整範例，請參閱[資料範本化範例簡介](http://go.microsoft.com/fwlink/?LinkID=160009)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplateSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplateSelector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.DataTemplateSelector" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DataTemplate SelectTemplate(object item, class System.Windows.DependencyObject container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SelectTemplate (item As Object, container As DependencyObject) As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DataTemplate ^ SelectTemplate(System::Object ^ item, System::Windows::DependencyObject ^ container);" />
      <MemberSignature Language="F#" Value="abstract member SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate&#xA;override this.SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate" Usage="dataTemplateSelector.SelectTemplate (item, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="container" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="item">要選取範本的資料物件。</param>
        <param name="container">資料繫結物件。</param>
        <summary>在衍生類別中覆寫時，根據自訂邏輯傳回 <see cref="T:System.Windows.DataTemplate" />。</summary>
        <returns>傳回 <see cref="T:System.Windows.DataTemplate" /> 或 <see langword="null" />。 預設值是 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一般而言，您使用的範本選取器，當您有多個相同類型的物件定義的資料範本。 比方說，如果繫結來源清單學生物件清單和您想要將特定的範本套用到兼職的學生。 您可以藉由建立繼承自類別<xref:System.Windows.Controls.DataTemplateSelector>，並覆寫<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法。 一旦您的類別定義您可以指派至您的項目範本選取器屬性的類別的執行個體。  
  
   
  
## Examples  
 在此範例中，繫結來源是一份`Task`物件。 屬性之一`Task`物件是`Priority`。 有兩個定義的資料範本`myTaskTemplate`和`importantTaskTemplate`。  
  
 若要提供邏輯以選擇哪些<xref:System.Windows.DataTemplate>使用根據`Priority`值的資料物件，建立的子類別<xref:System.Windows.Controls.DataTemplateSelector>，並覆寫<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法。 在下列範例中，<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法會提供邏輯，以傳回適當的值為基礎的範本`Priority`屬性。 要傳回範本的資源封套中找到<xref:System.Windows.Window>項目。  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 然後，就可以宣告`TaskListDataTemplateSelector` 為資源：  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 若要使用的範本選取器資源，將它指派給<xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A>屬性<xref:System.Windows.Controls.ListBox>。 <xref:System.Windows.Controls.ListBox>呼叫<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法`TaskListDataTemplateSelector`針對每個基礎集合中的項目。 該呼叫會將資料物件當做項目參數傳遞。 <xref:System.Windows.DataTemplate>時所傳回的方法適用於該資料物件。  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 如需完整範例，請參閱[資料範本化範例簡介](http://go.microsoft.com/fwlink/?LinkID=160009)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>