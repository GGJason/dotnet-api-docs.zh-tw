<Type Name="XslCompiledTransform" FullName="System.Xml.Xsl.XslCompiledTransform">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7da4c4cd35d82cbd8b960cb0d17ad2c0a94afd6c" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52598157" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XslCompiledTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XslCompiledTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslCompiledTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslCompiledTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslCompiledTransform sealed" />
  <TypeSignature Language="F#" Value="type XslCompiledTransform = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>使用 XSLT 樣式表轉換 XML 資料。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform>類別是支援 XSLT 1.0 語法的 XSLT 處理器。 它是新的實作，並包含的效能提升相較於過時<xref:System.Xml.Xsl.XslTransform>類別。 結構<xref:System.Xml.Xsl.XslCompiledTransform>類別是非常類似於<xref:System.Xml.Xsl.XslTransform>類別。 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法載入並編譯樣式表，同時<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法執行 XSLT 轉換。  
  
 Xslt 支援`document()`函式和內嵌指令碼區塊預設會停用。 可以啟用這些功能，藉由建立<xref:System.Xml.Xsl.XsltSettings>物件，並將其傳遞至<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法。  
  
 如需詳細資訊，請參閱 <<c0> [ 使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)並[從 XslTransform 類別移轉](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
## <a name="security-considerations"></a>安全性考量  
 建立使用 <xref:System.Xml.Xsl.XslCompiledTransform> 類別的應用程式時，您應留意下列項目及其含意：  
  
-   依預設會停用 XSLT 指令碼。 僅當需要指令碼支援且在完全受信任的環境中運作時，才應啟用 XSLT 指令碼。  
  
-   依預設會停用 XSLT `document()` 函式。 如果您啟用 `document()` 函式，則藉由傳遞 <xref:System.Xml.XmlSecureResolver> 物件至 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法，限制可存取的資源。  
  
-   依預設會啟用擴充物件。 如果將包含擴充物件的 <xref:System.Xml.Xsl.XsltArgumentList> 物件傳遞到 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法，則會加以利用。  
  
-   XSLT 樣式表可以包含其他檔案及內嵌指令碼區塊的參考。 居心不良的使用者會利用這一點，藉由提供您資料或樣式表，使您因執行他們而導致系統持續處理，直到電腦資源不足，來進行攻擊。  
  
-   在混合的信任環境中執行的 XSLT 應用程式，會產生用於詐騙的樣式表。 例如，居心不良的使用者可載入含有害樣式表的物件，然後將其傳遞給另一使用者，該使用者隨後會呼叫 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法並執行轉換。  
  
 不啟用指令碼或 `document()` 函式 (除非樣式表來自信任的來源)，不接受來自不受信任來源的 <xref:System.Xml.Xsl.XslCompiledTransform> 物件、XSLT 樣式表或 XML 來源資料，可減輕這些安全性問題。  
  
   
  
## Examples  
 下列範例會執行轉換，並輸出至檔案。  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 此範例會使用下列兩個輸入的檔案：  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <see cref="T:System.Xml.Xsl.XslCompiledTransform" />載入之後，物件是安全執行緒。 換句話說，在後<see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" />順利完成方法時，<see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" />可以同時呼叫方法，從多個執行緒。  
  
如果<see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" />方法時的一個執行緒中呼叫一次<see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" />方法呼叫另一個執行緒，<see cref="T:System.Xml.Xsl.XslCompiledTransform" />物件完成執行<see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" />呼叫繼續使用舊的狀態。 會使用新的狀態時<see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" />方法成功完成。  
  
 <block subset="none" type="note"><para><see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" />方法不是從多個執行緒同時呼叫時的安全執行緒。  
  
</para></block></threadsafe>
    <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
    <altmember cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />
    <altmember cref="N:System.Xml" />
    <related type="Article" href="https://msdn.microsoft.com/library/202f8820-224c-494f-b61e-cd127eac6e03">XSLT 轉換</related>
    <related type="Article" href="https://msdn.microsoft.com/library/e695047f-3c0f-4045-8708-5baea91cc380">XML 文件和資料</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 類別的新執行個體。</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform (bool enableDebug);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableDebug) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableDebug As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform(bool enableDebug);" />
      <MemberSignature Language="F#" Value="new System.Xml.Xsl.XslCompiledTransform : bool -&gt; System.Xml.Xsl.XslCompiledTransform" Usage="new System.Xml.Xsl.XslCompiledTransform enableDebug" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="enableDebug" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableDebug">
          <see langword="true" /> 表示產生偵錯資訊，否則為 <see langword="false" />。 將它設為 <see langword="true" />，可讓您用 Microsoft Visual Studio 偵錯工具對樣式表進行偵錯。</param>
        <summary>使用指定的偵錯設定，初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要逐步執行程式碼和偵錯樣式表，就必須符合下列條件：  
  
-   `enableDebug` 參數設定為 `true`。  
  
-   樣式表傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法，做為 URI 或實作<xref:System.Xml.XmlReader>可實作類別<xref:System.Xml.IXmlLineInfo>介面。 <xref:System.Xml.IXmlLineInfo>介面的實作上所有的文字剖析<xref:System.Xml.XmlReader>物件。  
  
     換句話說，如果使用來載入樣式表<xref:System.Xml.XPath.IXPathNavigable>物件，例如<xref:System.Xml.XmlDocument>或<xref:System.Xml.XPath.XPathDocument>，或有<xref:System.Xml.XmlReader>未實作的實作<xref:System.Xml.IXmlLineInfo>介面，您無法偵錯樣式表。  
  
-   <xref:System.Xml.XmlResolver>用來載入樣式表是以檔案為基礎<xref:System.Xml.XmlResolver>，例如<xref:System.Xml.XmlUrlResolver>(這是預設<xref:System.Xml.XmlResolver>供<xref:System.Xml.Xsl.XslCompiledTransform>類別)。  
  
-   樣式表位於本機電腦上或內部網路上。  
  
   
  
## Examples  
 下列範例示範如何啟用 XSLT 偵錯。  
  
 [!code-csharp[XslCompiledTransform.Load#10](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#10)]
 [!code-vb[XslCompiledTransform.Load#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="CompileToType">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerErrorCollection CompileToType (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver, bool debug, System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerErrorCollection CompileToType(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver, bool debug, class System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerErrorCollection ^ CompileToType(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver, bool debug, System::Reflection::Emit::TypeBuilder ^ typeBuilder, System::String ^ scriptAssemblyPath);" />
      <MemberSignature Language="F#" Value="static member CompileToType : System.Xml.XmlReader * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver * bool * System.Reflection.Emit.TypeBuilder * string -&gt; System.CodeDom.Compiler.CompilerErrorCollection" Usage="System.Xml.Xsl.XslCompiledTransform.CompileToType (stylesheet, settings, stylesheetResolver, debug, typeBuilder, scriptAssemblyPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerErrorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="debug" Type="System.Boolean" />
        <Parameter Name="typeBuilder" Type="System.Reflection.Emit.TypeBuilder" />
        <Parameter Name="scriptAssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XmlReader" />，位於要編譯的樣式表開頭。</param>
        <param name="settings">要套用至樣式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果它是 <see langword="null" />，則會套用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" />。</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> 會用來解析 <see langword="xsl:import" /> 和 <see langword="xsl:include" /> 項目中所參考的樣式表模組。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。</param>
        <param name="debug">將它設定為 <see langword="true" />，可讓您用偵錯工具對樣式表進行偵錯。</param>
        <param name="typeBuilder">用於樣式表編譯的 <see cref="T:System.Reflection.Emit.TypeBuilder" />。 所提供的 TypeBuilder 用於產生結果類型。</param>
        <param name="scriptAssemblyPath">為 <see langword="msxsl:script" /> 項目所產生組件的基底路徑。 如果只產生一個指令碼組件，這個參數會指定該組件的路徑。 在多個指令碼組件的情況下，相異後置字元會附加至檔案名稱，確保組件名稱唯一性。</param>
        <summary>將 XSLT 樣式表編譯為指定的類型。</summary>
        <returns>
          <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 物件，包含表示編譯結果的編譯器錯誤和警告。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `xsltc.exe`工具是一個包裝函式<xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A>方法。 編譯樣式表與`xsltc.exe`會符合運用使用已編譯的樣式表的大部分應用程式的需求。 <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A>建置自訂的編譯工具時，就應該使用方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>編譯樣式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 雖然 <xref:System.Xml.Xsl.XslCompiledTransform> 類別的整體效能優於 <xref:System.Xml.Xsl.XslTransform> 類別，但是在轉換時第一次呼叫 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 類別的 <xref:System.Xml.Xsl.XslCompiledTransform> 方法之執行速度可能會比 <xref:System.Xml.Xsl.XslTransform.Load%2A> 類別的 <xref:System.Xml.Xsl.XslTransform> 方法慢許多。 這是因為在載入之前必須先編譯 XSLT 檔案。 如需詳細資訊，請參閱下列部落格文章：[XslCompiledTransform 比 XslTransform 還慢嗎？](https://go.microsoft.com/fwlink/?LinkId=130590) (英文)  
  
> [!NOTE]
>  在偵錯模式中編譯的 XSLT 與在發行模式中編譯的 XSLT 之間有一些差異。 在某些情況下，偵測模式中編譯的樣式表在 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 期間將不會擲回錯誤，但是稍後會在 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 期間失敗。 在發行模式中編譯的相同樣式表在 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 期間將會失敗。 這類行為範例的情況是在將非節點集型別的變數指派給需要節點集的運算式時。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="xslCompiledTransform.Load stylesheetUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">樣式表的 URI。</param>
        <summary>載入並編譯位於指定之 URI 的樣式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform>類別支援 XSLT 1.0 語法。 XSLT 樣式表必須使用`http://www.w3.org/1999/XSL/Transform`命名空間。  
  
 這個方法有下列行為：  
  
-   <xref:System.Xml.XmlUrlResolver>不需要使用者的認證用來解析樣式表 URI，並處理任何`xsl:import`或`xsl:include`項目。  
  
-   <xref:System.Xml.XmlReader>預設設定用來載入樣式表。 在停用 DTD 處理<xref:System.Xml.XmlReader>。 如果您需要 DTD 處理，建立<xref:System.Xml.XmlReader>透過這項功能已啟用，並將它傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法。  
  
-   `document()`函式會停用。  
  
-   不支援內嵌指令碼。  
  
 您可以使用<xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.String%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29>多載來指定<xref:System.Xml.XmlResolver>使用必要的驗證認證，或指定不同的 XSLT 設定。  
  
   
  
## Examples  
 下列範例會執行轉換，並輸出至檔案。  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheetUri" /> 值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">此樣式表包含錯誤。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到樣式表。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="stylesheetUri" /> 值包含找不到的檔案名稱或目錄。</exception>
        <exception cref="T:System.Net.WebException">無法保留 <paramref name="stylesheetUri" /> 值。  
  
-或- 
處理這個要求時發生錯誤。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="stylesheetUri" /> 不是有效的 URI。</exception>
        <exception cref="T:System.Xml.XmlException">載入樣式表時，發生剖析錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (Type compiledStylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Type compiledStylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (compiledStylesheet As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(Type ^ compiledStylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : Type -&gt; unit" Usage="xslCompiledTransform.Load compiledStylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compiledStylesheet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="compiledStylesheet">包含已編譯樣式表的類別名稱。  
  
這通常是樣式表名稱。 除非另有指定，否則 xsltc.exe 工具會將樣式表名稱使用於類別和組件名稱。</param>
        <summary>載入已編譯的樣式表，此樣式表是使用 <see href="https://docs.microsoft.com/dotnet/standard/data/xml/xslt-compiler-xsltc-exe">XSLT 編譯器 (xsltc.exe)</see>所建立的。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Xsltc.exe 工具用來編譯樣式表，並從樣式表產生組件。 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法會從組件載入已編譯的樣式表。  
  
> [!NOTE]
>  您也必須在您的應用程式中包含 XSLT 組件，做為參考。  
  
   
  
## Examples  
 下列範例會示範如何從 XSLT 組件載入已編譯的樣式表。 此範例假設 xsltc.exe 工具用來建立名為類別，名為 bookOrders bookOrders.dll 組件。  
  
> [!NOTE]
>  您不必編譯程式碼時，參考 XSLT 組件。 例如，`csc /r:system.dll;system.xml.dll;bookOrders.dll myCode.cs`。  
  
```csharp  
// Load the type of the class.  
XslCompiledTransform xslt = new XslCompiledTransform();  
xslt.Load(typeof(bookOrders));  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/672a5ac8-8305-4d28-ba10-11089c2c0924">XSLT 組件工具 (xsltc.exe)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/76ee440b-d134-4f8f-8262-b917ad6dcbf6">如何： 執行 XSLT 轉換使用組件</related>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="xslCompiledTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含樣式表的 <see cref="T:System.Xml.XmlReader" />。</param>
        <summary>編譯包含在 <see cref="T:System.Xml.XmlReader" /> 中的樣式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform>類別支援 XSLT 1.0 語法。 XSLT 樣式表必須使用`http://www.w3.org/1999/XSL/Transform`命名空間。  
  
 從目前節點載入樣式表<xref:System.Xml.XmlReader>透過其所有子系。 這可讓您使用做為樣式表的文件的一部分。 之後<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法完成，<xref:System.Xml.XmlReader>位於樣式表的結尾之後的下一個節點。 如果到達文件結尾，則 <xref:System.Xml.XmlReader> 會定位於檔案結尾 (EOF)。  
  
 這個方法有下列行為：  
  
-   <xref:System.Xml.XmlUrlResolver>不需要使用者的認證用來處理任何`xsl:import`或`xsl:include`項目。  
  
-   `document()`函式會停用。  
  
-   不支援內嵌指令碼。  
  
 您可以使用<xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29>多載來指定<xref:System.Xml.XmlResolver>使用必要的驗證認證，或指定不同的 XSLT 設定。  
  
   
  
## Examples  
 下列範例會載入樣式表中所包含<xref:System.Xml.XmlReader>物件。  
  
 [!code-csharp[XslCompiledTransform.Load#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Load#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheet" /> 值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">此樣式表包含錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable -&gt; unit" Usage="xslCompiledTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或包含樣式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <summary>編譯包含在 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件中的樣式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform>類別支援 XSLT 1.0 語法。 XSLT 樣式表必須使用`http://www.w3.org/1999/XSL/Transform`命名空間。  
  
 這個方法有下列行為：  
  
-   <xref:System.Xml.XmlUrlResolver>不需要使用者的認證用來處理任何`xsl:import`或`xsl:include`項目。  
  
-   `document()`函式會停用。  
  
-   不支援內嵌指令碼。  
  
 您可以使用<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>多載來指定<xref:System.Xml.XmlResolver>使用必要的驗證認證，或指定不同的 XSLT 設定。  
  
   
  
## Examples  
 下列範例會載入樣式表中所包含<xref:System.Xml.XPath.XPathDocument>物件。  
  
 [!code-csharp[XslCompiledTransform.Load#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Load#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheet" /> 值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">此樣式表包含錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Reflection.MethodInfo executeMethod, byte[] queryData, Type[] earlyBoundTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Reflection.MethodInfo executeMethod, unsigned int8[] queryData, class System.Type[] earlyBoundTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (executeMethod As MethodInfo, queryData As Byte(), earlyBoundTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Reflection::MethodInfo ^ executeMethod, cli::array &lt;System::Byte&gt; ^ queryData, cli::array &lt;Type ^&gt; ^ earlyBoundTypes);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Reflection.MethodInfo * byte[] * Type[] -&gt; unit" Usage="xslCompiledTransform.Load (executeMethod, queryData, earlyBoundTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executeMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="queryData" Type="System.Byte[]" />
        <Parameter Name="earlyBoundTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="executeMethod">
          <see cref="T:System.Reflection.MethodInfo" /> 物件，表示已編譯樣式表之編譯器產生的 <c>execute</c> 方法。</param>
        <param name="queryData">
          <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> 方法產生的已編譯樣式表中，<c>staticData</c> 欄位中序列化資料結構的位元組陣列。</param>
        <param name="earlyBoundTypes">類型陣列，儲存在已編譯樣式表之編譯器產生的 <c>ebTypes</c> 欄位中。</param>
        <summary>從使用 <see langword="XSLTC.exe" /> 公用程式編譯的樣式表中載入方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法可接受的表單中的已編譯的樣式表<xref:System.Reflection.MethodInfo>物件、 位元組陣列和型別陣列。 <xref:System.Reflection.Emit.DynamicMethod> 物件可用來允許已編譯的樣式表方法都是捨棄時<xref:System.Xml.Xsl.XslCompiledTransform>收回物件。  
  
   
  
## Examples  
 下列程式碼範例會使用<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>載入已編譯的樣式表。 轉換可減少的值`Price`百分之 10 的項目。  
  
 [!code-csharp[XsltDynamicMethodLoad#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltDynamicMethodLoad/CS/XsltDynamicMethodLoad.cs#1)]
 [!code-vb[XsltDynamicMethodLoad#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltDynamicMethodLoad/VB/XsltDynamicMethodLoad.vb#1)]  
  
> [!NOTE]
>  建置此範例中使用 [轉換] 組件時使用 xsltc.exe 公用程式。 如需使用這個命令列工具的詳細資訊，請參閱 <<c0> [ 如何： 使用組件執行 XSLT 轉換](~/docs/standard/data/xml/how-to-perform-an-xslt-transformation-by-using-an-assembly.md)。  
  
 上述程式碼範例會使用下列轉換：  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"  
  xmlns:msxsl="urn:schemas-microsoft-com:xslt"  
  xmlns:user="urn:my-scripts">  
  <msxsl:script language="C#" implements-prefix="user">  
    <![CDATA[  
  public double modifyPrice(double price){  
    price*=0.9;  
    return price;  
  }  
  ]]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : string * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheetUri, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">樣式表的 URI。</param>
        <param name="settings">套用至樣式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果這是 <see langword="null" />，則會套用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定。</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來解析樣式表 URI 和 XSLT <c>import</c> 與 <c>include</c> 元素中參考的任何樣式表。</param>
        <summary>載入並編譯 URI 所指定的 XSLT 樣式表。 <see cref="T:System.Xml.XmlResolver" /> 會解析所有 XSLT <c>import</c> 或 <c>include</c> 元素，且 XSLT 設定會決定樣式表的權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform>類別支援 XSLT 1.0 語法。 XSLT 樣式表必須使用`http://www.w3.org/1999/XSL/Transform`命名空間。  
  
 <xref:System.Xml.XmlReader>預設設定用來載入樣式表。 在停用 DTD 處理<xref:System.Xml.XmlReader>。 如果您需要 DTD 處理，建立<xref:System.Xml.XmlReader>透過這項功能已啟用，並將它傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法。  
  
   
  
## Examples  
 下列範例會載入樣式表儲存在網路資源。 <xref:System.Xml.XmlSecureResolver> 物件指定存取樣式表所需的認證。  
  
 [!code-csharp[XslCompiledTransform.Load#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Load#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheetUri" /> 或 <paramref name="stylesheetResolver" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">此樣式表包含錯誤。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到樣式表。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="stylesheetUri" /> 值包含找不到的檔案名稱或目錄。</exception>
        <exception cref="T:System.Net.WebException">無法保留 <paramref name="stylesheetUri" /> 值。  
  
-或- 
處理這個要求時發生錯誤。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="stylesheetUri" /> 不是有效的 URI。</exception>
        <exception cref="T:System.Xml.XmlException">載入樣式表時，發生剖析錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheet, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含樣式表的 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="settings">套用至樣式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果這是 <see langword="null" />，則會套用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定。</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>import</c> 和 <c>include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。</param>
        <summary>編譯包含在 <see cref="T:System.Xml.XmlReader" /> 中的 XSLT 樣式表。 <see cref="T:System.Xml.XmlResolver" /> 會解析所有 XSLT <c>import</c> 或 <c>include</c> 元素，且 XSLT 設定會決定樣式表的權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform>類別支援 XSLT 1.0 語法。 XSLT 樣式表必須使用`http://www.w3.org/1999/XSL/Transform`命名空間。  
  
 從目前節點載入樣式表<xref:System.Xml.XmlReader>透過其所有子系。 這可讓您使用做為樣式表的文件的一部分。 之後<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法完成，<xref:System.Xml.XmlReader>位於樣式表的結尾之後的下一個節點。 如果到達文件結尾，則 <xref:System.Xml.XmlReader> 會定位於檔案結尾 (EOF)。  
  
   
  
## Examples  
 下列範例會載入樣式表，並啟用 XSLT 指令碼的支援。  
  
 [!code-csharp[XslCompiledTransform.Load#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Load#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheet" /> 值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">此樣式表包含錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheet, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或包含樣式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="settings">套用至樣式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果這是 <see langword="null" />，則會套用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定。</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>import</c> 和 <c>include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。</param>
        <summary>編譯包含在 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XSLT 樣式表。 <see cref="T:System.Xml.XmlResolver" /> 會解析所有 XSLT <c>import</c> 或 <c>include</c> 元素，且 XSLT 設定會決定樣式表的權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform>類別支援 XSLT 1.0 語法。 XSLT 樣式表必須使用`http://www.w3.org/1999/XSL/Transform`命名空間。  
  
   
  
## Examples  
 下列範例會載入樣式表。 <xref:System.Xml.XmlSecureResolver>物件包含存取任何所需的認證`import`或`include`樣式表中找到的項目。  
  
 [!code-csharp[XslCompiledTransform.Load#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Load#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stylesheet" /> 值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">此樣式表包含錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="OutputSettings">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings OutputSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings OutputSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputSettings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlWriterSettings ^ OutputSettings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputSettings : System.Xml.XmlWriterSettings" Usage="System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.Xml.XmlWriterSettings" /> 物件，其中包含衍生自樣式表之 <c>xsl:output</c> 元素的輸出資訊。</summary>
        <value>唯讀<see cref="T:System.Xml.XmlWriterSettings" />物件，其中包含輸出資訊衍生自<c>xsl: output</c>樣式表的項目。 這個值可以是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在成功呼叫之後填入這個屬性<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法。 它包含資訊衍生自`xsl:output`已編譯的樣式表的項目。 這<xref:System.Xml.XmlWriterSettings>物件可以傳遞給<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>方法，以建立<xref:System.Xml.XmlWriter>您要輸出的物件。  
  
   
  
## Examples  
 下列範例示範如何使用<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A>屬性，以建立<xref:System.Xml.XmlWriter>將文字寫入至主控台的物件。  
  
 [!code-csharp[XslCompiledTransform.OutputSettings#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.OutputSettings/CS/xslt_OutputSettings.cs#1)]
 [!code-vb[XslCompiledTransform.OutputSettings#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.OutputSettings/VB/xslt_OutputSettings.vb#1)]  
  
 此範例會使用`books.xml`和`outputConsole.xsl`檔案做為輸入。  
  
 `books.xml`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#2](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/books.xml#2)]  
  
 `outputConsole.xsl`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#3](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/outputConsole.xsl#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="TemporaryFiles">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.TempFileCollection TemporaryFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.TempFileCollection TemporaryFiles" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemporaryFiles As TempFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::TempFileCollection ^ TemporaryFiles { System::CodeDom::Compiler::TempFileCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemporaryFiles : System.CodeDom.Compiler.TempFileCollection" Usage="System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.TempFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，包含成功呼叫 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> 方法後，在磁碟上產生的暫存檔案。</summary>
        <value>
          <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，包含磁碟上產生的暫存檔案。 如果尚未成功呼叫 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> 方法，或尚未啟用偵錯，則這個值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個屬性會識別 XSLT 期間所產生的檔案處理。 檔案會放在暫存目錄 （%TEMP%環境變數所指定） 您可以刪除這些檔案在 XSLT 處理完成後。  
  
   
  
## Examples  
 下列範例會將暫存檔的名稱寫入主控台。  
  
> [!NOTE]
>  只有在與載入樣式表時，才會建立暫存檔案\<msxsl: script > 區塊。  
  
 [!code-csharp[XslCompiledTransform.Transform#8](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#8)]
 [!code-vb[XslCompiledTransform.Transform#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>執行 XSLT 轉換。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  在偵錯模式中編譯的 XSLT 與在發行模式中編譯的 XSLT 之間有一些差異。 在某些情況下，偵測模式中編譯的樣式表在 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 期間將不會擲回錯誤，但是稍後會在 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 期間失敗。 在發行模式中編譯的相同樣式表在 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 期間將會失敗。 這類行為範例的情況是在將非節點集型別的變數指派給需要節點集的運算式時。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, string resultsFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, string resultsFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, resultsFile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::String ^ resultsFile);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, resultsFile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="resultsFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputUri">輸入文件的 URI。</param>
        <param name="resultsFile">輸出檔案的 URI。</param>
        <summary>使用 URI 所指定的輸入文件執行轉換，並將結果輸出至檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用預設值<xref:System.Xml.XmlUrlResolver>與不具使用者認證，若要解決的輸入和輸出文件。 如果任何這些資源位於網路資源需要驗證，請使用採用的多載<xref:System.Xml.XmlResolver>為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 <xref:System.Xml.XmlReader>與預設設定用來載入輸入文件。 在停用 DTD 處理<xref:System.Xml.XmlReader>。 如果您需要 DTD 處理，建立<xref:System.Xml.XmlReader>透過這項功能已啟用，並將它傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。  
  
   
  
## Examples  
 下列範例會執行轉換，並輸出至檔案。  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 此範例會使用下列兩個輸入的檔案：  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
        <exception cref="T:System.IO.FileNotFoundException">找不到輸入文件。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值包含找不到的檔案名稱或目錄。</exception>
        <exception cref="T:System.Net.WebException">無法解析 <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值。  
  
-或- 
處理要求時發生錯誤</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 不是有效的 URI。</exception>
        <exception cref="T:System.Xml.XmlException">載入輸入文件時，發生剖析錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">輸入文件的 URI。</param>
        <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
        <summary>使用 URI 所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用預設值<xref:System.Xml.XmlUrlResolver>解析的輸入文件和 XSLT 的任何執行個體不具使用者認證與`document()`樣式表中找到的函式。 如果任何這些資源位於網路資源需要驗證，請使用採用的多載<xref:System.Xml.XmlResolver>為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 <xref:System.Xml.XmlReader>與預設設定用來載入輸入文件。 在停用 DTD 處理<xref:System.Xml.XmlReader>。 如果您需要 DTD 處理，建立<xref:System.Xml.XmlReader>透過這項功能已啟用，並將它傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。  
  
 此方法不支援`xsl:strip-space`項目。 如果您已編譯的樣式表包含`xsl:strip-space`項目，您必須使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>多載，這個方法會接受<xref:System.Xml.XmlReader>做為輸入引數。  
  
   
  
## Examples  
 下列範例會執行 XSLT 轉換，並將輸出至<xref:System.Xml.XmlWriter>物件。  
  
 [!code-csharp[XslCompiledTransform.Transform#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Transform#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputUri" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">找不到 <paramref name="inputUri" /> 值所包含的檔案名稱或目錄。</exception>
        <exception cref="T:System.Net.WebException">無法保留 <paramref name="inputUri" /> 值。  
  
-或- 
處理這個要求時發生錯誤。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> 不是有效的 URI。</exception>
        <exception cref="T:System.Xml.XmlException">載入輸入文件時，發生剖析錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
        <summary>使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 XSLT`document()`啟用函式時，就會解析使用<xref:System.Xml.XmlUrlResolver>使用沒有使用者認證。 如果在需要驗證的網路資源位於外部的資源，請使用採用的多載<xref:System.Xml.XmlResolver>為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
   
  
## Examples  
 下列範例會將轉換 books.xml 檔的第一本書。  
  
 [!code-csharp[XslCompiledTransform.Transform#7](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#7)]
 [!code-vb[XslCompiledTransform.Transform#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或是包含要轉換的資料的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
        <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 XSLT`document()`啟用函式時，就會解析使用<xref:System.Xml.XmlUrlResolver>使用沒有使用者認證。 如果在需要驗證的網路資源位於外部的資源，請使用採用的多載<xref:System.Xml.XmlResolver>為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 此方法不支援`xsl:strip-space`項目。 如果您已編譯的樣式表包含`xsl:strip-space`項目，您必須使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>多載，這個方法會接受<xref:System.Xml.XmlReader>做為輸入引數。  
  
 <xref:System.Xml.XPath.IXPathNavigable> 介面是在 <xref:System.Xml.XmlNode> 及 <xref:System.Xml.XPath.XPathDocument> 類別中實作的。 這些類別代表 XML 資料的記憶體中快取。  
  
-   <xref:System.Xml.XmlNode> 類別是以 W3C 文件物件模型 (DOM) 為基礎，並包含編輯功能。  
  
-   <xref:System.Xml.XPath.XPathDocument> 類別是以 XPath 資料模型為基礎的唯讀資料存放區。 <xref:System.Xml.XPath.XPathDocument> 是建議用於 XSLT 處理的類別。 與 <xref:System.Xml.XmlNode> 類別相比，它可提供更高的效能。  
  
 轉換是指套用到整個文件。 換言之，如果您要傳入的節點不是文件的根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立只包含節點片段的物件，並將該物件傳遞至 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法。 如需詳細資訊，請參閱[如何：轉換節點片段](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md)。  
  
   
  
## Examples  
 下列範例會執行 XSLT 轉換，並將輸出至<xref:System.Xml.XmlWriter>物件。  
  
 [!code-csharp[XslCompiledTransform.Transform#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Transform#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inputUri">輸入文件的 URI。</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
        <param name="results">要輸出至的資料流。</param>
        <summary>使用 URI 所指定的輸入文件執行轉換，並將結果輸出至資料流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用預設值<xref:System.Xml.XmlUrlResolver>解析的輸入文件和 XSLT 的任何執行個體不具使用者認證與`document()`樣式表中找到的函式。 如果任何這些資源位於網路資源需要驗證，請使用採用的多載<xref:System.Xml.XmlResolver>為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 <xref:System.Xml.XmlReader>與預設設定用來載入輸入文件。 在停用 DTD 處理<xref:System.Xml.XmlReader>。 如果您需要 DTD 處理，建立<xref:System.Xml.XmlReader>透過這項功能已啟用，並將它傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputUri" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">找不到 <paramref name="inputUri" /> 值所包含的檔案名稱或目錄。</exception>
        <exception cref="T:System.Net.WebException">無法保留 <paramref name="inputUri" /> 值。  
  
-或- 
處理要求時發生錯誤</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> 不是有效的 URI。</exception>
        <exception cref="T:System.Xml.XmlException">載入輸入文件時，發生剖析錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">輸入文件的 URI。</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
        <param name="results">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用 URI 所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用預設值<xref:System.Xml.XmlUrlResolver>解析的輸入文件和 XSLT 的任何執行個體不具使用者認證與`document()`樣式表中找到的函式。 如果任何這些資源位於網路資源需要驗證，請使用採用的多載<xref:System.Xml.XmlResolver>為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 <xref:System.Xml.XmlReader>與預設設定用來載入輸入文件。 在停用 DTD 處理<xref:System.Xml.XmlReader>。 如果您需要 DTD 處理，建立<xref:System.Xml.XmlReader>透過這項功能已啟用，並將它傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。  
  
   
  
## Examples  
 下列範例會執行 XSLT 轉換，並將輸出字串。  
  
 [!code-csharp[XslCompiledTransform.Transform#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Transform#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputUri" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">找不到 <paramref name="inputUri" /> 值所包含的檔案名稱或目錄。</exception>
        <exception cref="T:System.Net.WebException">無法保留 <paramref name="inputUri" /> 值。  
  
-或- 
處理要求時發生錯誤</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> 不是有效的 URI。</exception>
        <exception cref="T:System.Xml.XmlException">載入輸入文件時，發生剖析錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">輸入文件的 URI。</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
        <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
        <summary>使用 URI 所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會使用預設值<xref:System.Xml.XmlUrlResolver>解析的輸入文件和 XSLT 的任何執行個體不具使用者認證與`document()`樣式表中找到的函式。 如果任何這些資源位於網路資源需要驗證，請使用採用的多載<xref:System.Xml.XmlResolver>為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 <xref:System.Xml.XmlReader>與預設設定用來載入輸入文件。 在停用 DTD 處理<xref:System.Xml.XmlReader>。 如果您需要 DTD 處理，建立<xref:System.Xml.XmlReader>透過這項功能已啟用，並將它傳遞給<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。  
  
   
  
## Examples  
 下列範例會使用<xref:System.Xml.Xsl.XsltArgumentList>物件來建立參數，代表目前的日期和時間。  
  
 [!code-csharp[XsltArgumentList.AddParam#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltArgumentList.AddParam/CS/addparam.cs#1)]
 [!code-vb[XsltArgumentList.AddParam#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltArgumentList.AddParam/VB/addparam.vb#1)]  
  
 此範例會使用下列的兩個資料檔案，做為輸入。  
  
 order.xml  
  
 [!code-xml[XsltArgumentList.AddParam#2](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xml#2)]  
  
 order.xsl  
  
 [!code-xml[XsltArgumentList.AddParam#3](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputUri" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">找不到 <paramref name="inputtUri" /> 值所包含的檔案名稱或目錄。</exception>
        <exception cref="T:System.Net.WebException">無法保留 <paramref name="inputUri" /> 值。  
  
-或- 
處理這個要求時發生錯誤。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> 不是有效的 URI。</exception>
        <exception cref="T:System.Xml.XmlException">載入輸入文件時，發生剖析錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
        <param name="results">要輸出至的資料流。</param>
        <summary>使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至資料流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果樣式表包含 XSLT`document()`函式，它已解決使用<xref:System.Xml.XmlUrlResolver>使用沒有使用者認證。 如果在需要驗證的網路資源位於外部的資源，請使用採用的多載<xref:System.Xml.XmlResolver>為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
        <param name="results">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果樣式表包含 XSLT`document()`函式，它已解決使用<xref:System.Xml.XmlUrlResolver>使用沒有使用者認證。 如果在需要驗證的網路資源位於外部的資源，請使用採用的多載<xref:System.Xml.XmlResolver>為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
        <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
        <summary>使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果樣式表包含 XSLT`document()`函式，它已解決使用<xref:System.Xml.XmlUrlResolver>使用沒有使用者認證。 如果在需要驗證的網路資源位於外部的資源，請使用採用的多載<xref:System.Xml.XmlResolver>為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或是包含要轉換的資料的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
        <param name="results">要輸出至的資料流。</param>
        <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至資料流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 XSLT`document()`啟用函式時，就會解析使用<xref:System.Xml.XmlUrlResolver>使用沒有使用者認證。 如果在需要驗證的網路資源位於外部的資源，請使用採用的多載<xref:System.Xml.XmlResolver>為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 此方法不支援`xsl:strip-space`項目。 如果您已編譯的樣式表包含`xsl:strip-space`項目，您必須使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>多載，這個方法會接受<xref:System.Xml.XmlReader>做為輸入引數。  
  
 <xref:System.Xml.XPath.IXPathNavigable> 介面是在 <xref:System.Xml.XmlNode> 及 <xref:System.Xml.XPath.XPathDocument> 類別中實作的。 這些類別代表 XML 資料的記憶體中快取。  
  
-   <xref:System.Xml.XmlNode> 類別是以 W3C 文件物件模型 (DOM) 為基礎，並包含編輯功能。  
  
-   <xref:System.Xml.XPath.XPathDocument> 類別是以 XPath 資料模型為基礎的唯讀資料存放區。 <xref:System.Xml.XPath.XPathDocument> 是建議用於 XSLT 處理的類別。 與 <xref:System.Xml.XmlNode> 類別相比，它可提供更高的效能。  
  
 轉換是指套用到整個文件。 換言之，如果您要傳入的節點不是文件的根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立只包含節點片段的物件，並將該物件傳遞至 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法。 如需詳細資訊，請參閱[如何：轉換節點片段](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md)。  
  
   
  
## Examples  
 下列範例會執行 XSLT 轉換，並將輸出至<xref:System.IO.FileStream>。  
  
 [!code-csharp[XslCompiledTransform.Transform#6](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#6)]
 [!code-vb[XslCompiledTransform.Transform#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或是包含要轉換的資料的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
        <param name="results">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 XSLT`document()`啟用函式時，就會解析使用<xref:System.Xml.XmlUrlResolver>使用沒有使用者認證。 如果在需要驗證的網路資源位於外部的資源，請使用採用的多載<xref:System.Xml.XmlResolver>為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 此方法不支援`xsl:strip-space`項目。 如果您已編譯的樣式表包含`xsl:strip-space`項目，您必須使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>多載，這個方法會接受<xref:System.Xml.XmlReader>做為輸入引數。  
  
 <xref:System.Xml.XPath.IXPathNavigable> 介面是在 <xref:System.Xml.XmlNode> 及 <xref:System.Xml.XPath.XPathDocument> 類別中實作的。 這些類別代表 XML 資料的記憶體中快取。  
  
-   <xref:System.Xml.XmlNode> 類別是以 W3C 文件物件模型 (DOM) 為基礎，並包含編輯功能。  
  
-   <xref:System.Xml.XPath.XPathDocument> 類別是以 XPath 資料模型為基礎的唯讀資料存放區。 <xref:System.Xml.XPath.XPathDocument> 是建議用於 XSLT 處理的類別。 與 <xref:System.Xml.XmlNode> 類別相比，它可提供更高的效能。  
  
 轉換是指套用到整個文件。 換言之，如果您要傳入的節點不是文件的根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立只包含節點片段的物件，並將該物件傳遞至 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法。 如需詳細資訊，請參閱[如何：轉換節點片段](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或是包含要轉換的資料的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
        <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
        <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 XSLT`document()`啟用函式時，就會解析使用<xref:System.Xml.XmlUrlResolver>使用沒有使用者認證。 如果在需要驗證的網路資源位於外部的資源，請使用採用的多載<xref:System.Xml.XmlResolver>為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 此方法不支援`xsl:strip-space`項目。 如果您已編譯的樣式表包含`xsl:strip-space`項目，您必須使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>多載，這個方法會接受<xref:System.Xml.XmlReader>做為輸入引數。  
  
 <xref:System.Xml.XPath.IXPathNavigable> 介面是在 <xref:System.Xml.XmlNode> 及 <xref:System.Xml.XPath.XPathDocument> 類別中實作的。 這些類別代表 XML 資料的記憶體中快取。  
  
-   <xref:System.Xml.XmlNode> 類別是以 W3C 文件物件模型 (DOM) 為基礎，並包含編輯功能。  
  
-   <xref:System.Xml.XPath.XPathDocument> 類別是以 XPath 資料模型為基礎的唯讀資料存放區。 <xref:System.Xml.XPath.XPathDocument> 是建議用於 XSLT 處理的類別。 與 <xref:System.Xml.XmlNode> 類別相比，它可提供更高的效能。  
  
 轉換是指套用到整個文件。 換言之，如果您要傳入的節點不是文件的根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立只包含節點片段的物件，並將該物件傳遞至 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法。 如需詳細資訊，請參閱[如何：轉換節點片段](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results, documentResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
        <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
        <param name="documentResolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。</param>
        <summary>使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數，且 XmlResolver 會解析 XSLT <c>document()</c> 函式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列範例會使用<xref:System.Xml.XmlSecureResolver>解析 XSLT`document()`函式。  
  
 [!code-csharp[XslCompiledTransform.Transform#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Transform#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">執行 XSLT 轉換時發生錯誤。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9b074f6-d6f4-49dd-a093-df510bf0cf7b">使用 XslCompiledTransform 類別</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results, documentResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件指定要轉換的文件。</param>
        <param name="arguments">做為 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 的引數清單。</param>
        <param name="results">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <see langword="xsl:output" /> 項目，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
        <param name="documentResolver">
          <see cref="T:System.Xml.XmlResolver" />，用於解析 XSLT <see langword="document()" /> 函式。 如果值為 <see langword="null" />，則不會解析 <see langword="document()" /> 函式。</param>
        <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數，且 <see cref="T:System.Xml.XmlResolver" /> 會解析 XSLT <see langword="document()" /> 函式。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>