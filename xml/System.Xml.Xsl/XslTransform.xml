<Type Name="XslTransform" FullName="System.Xml.Xsl.XslTransform">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9fffe3df74f84922396e53ccd8afb19f9699356f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30721422" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XslTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XslTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslTransform sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>使用可延伸樣式表語言轉換 (XSLT) 樣式表，轉換 XML 資料。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是在 Microsoft.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須使用命名空間`http://www.w3.org/1999/XSL/Transform`。  
  
 其他引數也可以加入至樣式表使用<xref:System.Xml.Xsl.XsltArgumentList>類別。 這個類別包含可從樣式表呼叫的樣式表和擴充物件的輸入的參數。  
  
 將 XML 資料的轉換：  
  
1.  建立<xref:System.Xml.Xsl.XslTransform>物件。  
  
2.  使用<xref:System.Xml.Xsl.XslTransform.Load%2A>方法來載入樣式表的轉換。 此方法有數個多載，可以載入樣式表使用<xref:System.Xml.XmlReader>， <xref:System.Xml.XPath.XPathNavigator>， <xref:System.Xml.XPath.IXPathNavigable>，或使用檔案的位置的 URL。  
  
3.  使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>來轉換 XML 資料的方法。 這個方法有數個多載，而且可以處理不同類型的輸入和輸出。 您也可以指定<xref:System.Xml.Xsl.XsltArgumentList>包含要在轉換期間使用做為輸入的其他引數。  
  
 **安全性考量**  
  
 建立使用 <xref:System.Xml.Xsl.XslTransform> 類別的應用程式時，您應留意下列項目及其含意：  
  
-   依預設會啟用擴充物件。 如果將包含擴充物件的 <xref:System.Xml.Xsl.XsltArgumentList> 物件傳遞到 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法，則會加以利用。  
  
-   XSLT 樣式表可以包含其他檔案及內嵌指令碼區塊的參考。 惡意使用者可以利用這一點，藉由提供您資料或樣式表執行時將會導致您的系統處理，直到電腦資源不足。  
  
-   在混合的信任環境中執行的 XSLT 應用程式，會產生用於詐騙的樣式表。 例如，居心不良的使用者可載入含有害樣式表的物件，然後將其傳遞給另一使用者，該使用者隨後會呼叫 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法並執行轉換。  
  
 可減輕這些安全性問題不接受<xref:System.Xml.Xsl.XslTransform>物件、 XSLT 樣式表或來自不受信任來源的 XML 來源資料。  
  
 **指令碼支援**  
  
 這個類別支援使用內嵌指令碼`msxsl:script`項目。  
  
 在 1.1 版的.NET framework，樣式表的辨識項會決定哪些權限會指派給 內嵌指令碼。  
  
-   如果樣式表載入從統一資源識別元 (URI)，URI 用來建立辨識項。 此辨識項會包含 URI 以及與其網站和區域。  
  
-   如果使用其他來源載入樣式表，您可以藉由傳遞提供辨識項<xref:System.Security.Policy.Evidence?displayProperty=nameWithType>物件<xref:System.Xml.Xsl.XslTransform.Load%2A>方法。 否則，指令碼組件具有完全信任。  
  
 非完全信任呼叫端：`UnmanagedCode`權限，才能編譯內嵌指令碼。 `ControlEvidence` 權限，才能提供<xref:System.Security.Policy.Evidence>至<xref:System.Xml.Xsl.XslTransform.Load%2A>方法。 A<xref:System.Security.SecurityException>如果呼叫端沒有必要的權限，會擲回。 如需詳細資訊，請參閱 <xref:System.Security.Permissions.SecurityPermission?displayProperty=nameWithType> 和 <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=nameWithType>。  
  
 `msxsl:script`項目具有下列需求：  
  
-   `msxsl:script`元素屬於`urn:schemas-microsoft-com:xslt`命名空間。 樣式表必須包含命名空間宣告`xmlns:msxsl=urn:schemas-microsoft-com:xslt`。  
  
-   `msxsl:script`元素可以包含`language`屬性來指定要使用的指令碼語言。 值`language`屬性必須是下列其中之一： C#、 CSharp、 VB、 VisualBasic、 JScript、 或 JavaScript。 語言名稱不區分大小寫，因為 JavaScript 和 javascript 都有效。 如果`language`未指定屬性，則預設為 JScript。  
  
-   `msxsl:script`元素必須包含`implements-prefix`屬性，其中包含代表指令碼區塊相關聯的命名空間的前置詞。 此命名空間必須定義樣式表中。 樣式表可以包含多個命名空間所分組的指令碼區塊。 您不能有相同的命名空間內的多種語言的指令碼區塊。 提供指令碼區塊會位於相同的命名空間，指令碼區塊可以呼叫另一個的指令碼區塊中定義的函式。 根據規則和語法的指令碼語言來剖析的指令碼區塊的內容 (由提供`language`屬性)。 例如，如果您在 C# 指令碼區塊，註解會加上`//`字元。 註解必須是有效的 XML 內容。  
  
 `Note` 建議您將指令碼區塊包裝在 CDATA 區段。  
  
```  
<msxsl:script implements-prefix='xy' language='C#'>  
  <![CDATA[  
  // Add code here.  
  ]]]><![CDATA[]>  
</msxsl:script>  
```  
  
 函式可在 `msxsl:script` 項目內進行宣告。 下表顯示根據預設所支援的命名空間。  
  
|支援的命名空間|描述|  
|--------------------------|-----------------|  
|`System`|系統類別。|  
|`System.Collection`|集合類別。|  
|`System.Text`|文字處理類別。|  
|`System.Xml`|核心 XML 類別。|  
|`System.Xml.Xsl`|XSLT 類別。|  
|`System.Xml.XPath`|XML 路徑語言 (XPath) 類別。|  
  
 提供的引數和傳回指令碼函式所定義的值必須是其中一個下面所列的 World Wide Web Consortium (W3C) 型別。 下表詳細說明 W3C 型別、 XPath 或 XSLT 之間的對應和對應的.NET Framework 類別。  
  
|W3C 型別|對等的.NET 類別|  
|--------------|---------------------------|  
|字串 (XPath)|`System.String`|  
|布林值 (XPath)|`System.Boolean`|  
|數字 (XPath)|`System.Double`|  
|Result Tree Fragment (XSLT)|`System.Xml.XPath.XPathNavigator`|  
|節點集 (XPath)|`System.Xml.XPath.XPathNodeIterator`|  
  
 如果指令碼函式會利用其中下列數字型別： Int16、 UInt16、 Int32、 UInt32、 Int64、 UInt64、 單一、 或 Decimal，這些類型會強制轉成 Double，其對應至 W3C XPath 型別數值。  
  
 擲回例外狀況時呼叫的函式不能將引數結果轉換成其中一個必要的型別。  
  
> [!NOTE]
>  `msxsl:script` 和`msxsl:node-list`都是唯一的函式，從`urn:schemas-microsoft-com:xslt`所支援的命名空間<xref:System.Xml.Xsl.XslTransform>類別。  
  
 <xref:System.Xml.Xsl.XslTransform> 能夠利用 common language runtime (CLR) 程式碼，做為副檔名的機制。 這是藉由傳遞至類別的執行個體<xref:System.Xml.Xsl.XslTransform>類別並呼叫它的 XSLT 樣式表中的公用方法。 方法所定義的`params`關鍵字，以允許未指定要傳遞的參數數目，無法在此案例中正常運作。 請參閱[params](~/docs/csharp/language-reference/keywords/params.md)如需詳細資訊。  
  
 如需詳細資訊，請參閱[使用 XslTransform 類別進行 XSLT 轉換](~/docs/standard/data/xml/xslt-transformations-with-the-xsltransform-class.md)。  
  
   
  
## Examples  
 下列範例會轉換指定的 XML 文件，並將結果輸出至主控台。  
  
 [!code-csharp[Classic WebData XslTransform Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <see cref="T:System.Xml.Xsl.XslTransform" /> 物件是用於轉換作業的唯一執行緒安全。 其他作業並非都是安全執行緒。 您必須確定沒有其他方法，會在載入作業期間在物件上呼叫。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Xsl.XslTransform" /> 類別的新執行個體。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>載入 XSLT 樣式表，包括 <see langword="xsl:include" /> 和 <see langword="xsl:import" /> 項目中參考的樣式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">URL，指定要載入的 XSLT 樣式表。</param>
        <summary>載入 URL 指定的 XSLT 樣式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl="http://www.w3.org/1999/XSL/Transform"`。  
  
 這個方法會載入 XSLT 樣式表，包括任何參考中的樣式表`xsl:include`和`xsl:import`項目。 使用解析外部資源<xref:System.Xml.XmlUrlResolver>不具使用者認證。 如果樣式表位於需要驗證的網路資源，使用的多載，<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 樣式表的 URI 用來建立套用至組件辨識項。 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在http://support.microsoft.com。  
  
> [!NOTE]
>  如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。 如需詳細資訊，請參閱 <xref:System.Security.Permissions.SecurityPermission> 和 <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例會將 XML 文件轉換成 HTML 文件。 它會在資料表中顯示 ISBN、 標題和每本書的價格。  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 範例會使用下列兩個輸入檔案。  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">載入的資源不是有效的樣式表。</exception>
        <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XmlReader" /> 物件，包含 XSLT 樣式表。</param>
        <summary>載入 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 樣式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 這個方法會載入 XSLT 樣式表，包括任何參考中的樣式表`xsl:include`和`xsl:import`項目。 使用解析外部資源<xref:System.Xml.XmlUrlResolver>不具使用者認證。 如果樣式表位於需要驗證的網路資源，使用的多載，<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 從目前節點載入樣式表<xref:System.Xml.XmlReader>透過所有子系。 這可讓您使用做為樣式表的文件的一部分。 之後<xref:System.Xml.Xsl.XslTransform.Load%2A>方法傳回時，<xref:System.Xml.XmlReader>位於樣式表結尾之後的下一個節點。 如果到達文件結尾，則 <xref:System.Xml.XmlReader> 會定位於檔案結尾 (EOF)。  
  
 如果樣式表包含實體，您應該指定<xref:System.Xml.XmlReader>，可以解析實體 (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType>傳回`true`)。 在此情況下，<xref:System.Xml.XmlValidatingReader>可用。  
  
 如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 組件具有完全信任。 建議的作法是要提供辨識項使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在http://support.microsoft.com。  
  
> [!NOTE]
>  如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。 如需詳細資訊，請參閱 <xref:System.Security.Permissions.SecurityPermission> 和 <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例會轉換為 XML 檔案，依標題排序所有書籍。  
  
 [!code-cpp[XslTransform.Load3#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load3/CPP/trans3.cpp#1)]
 [!code-csharp[XslTransform.Load3#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load3/CS/trans3.cs#1)]
 [!code-vb[XslTransform.Load3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load3/VB/trans3.vb#1)]  
  
 這個範例會使用下列的資料檔案，做為輸入。  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load3#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/books.xml#2)]  
  
 `titles.xsl`  
  
 [!code-xml[XslTransform.Load3#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/titles.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">目前的節點不符合有效的樣式表。</exception>
        <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />) 或包含 XSLT 樣式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <summary>載入 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 樣式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 這個方法會載入 XSLT 樣式表，包括任何參考中的樣式表`xsl:include`和`xsl:import`項目。 使用解析外部資源<xref:System.Xml.XmlUrlResolver>不具使用者認證。 如果樣式表位於需要驗證的網路資源，使用的多載，<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 組件具有完全信任。 建議的作法是要提供辨識項使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在http://support.microsoft.com。  
  
> [!NOTE]
>  如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。 如需詳細資訊，請參閱 <xref:System.Security.Permissions.SecurityPermission> 和 <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">載入的資源不是有效的樣式表。</exception>
        <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，包含 XSLT 樣式表。</param>
        <summary>載入 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 樣式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 這個方法會載入 XSLT 樣式表，包括任何參考中的樣式表`xsl:include`和`xsl:import`項目。 使用解析外部資源<xref:System.Xml.XmlUrlResolver>不具使用者認證。 如果樣式表位於需要驗證的網路資源，使用的多載，<xref:System.Xml.XmlResolver>做為其中一個引數，並指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 從目前的位置載入樣式表<xref:System.Xml.XPath.XPathNavigator>。 若要載入之文件部分為樣式表，瀏覽至樣式表的開頭對應的節點。 之後<xref:System.Xml.Xsl.XslTransform.Load%2A>方法傳回時，<xref:System.Xml.XPath.XPathNavigator>定位於樣式表的開頭 (上`xsl:style sheet`節點)。  
  
 如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 組件具有完全信任。 建議的作法是要提供辨識項使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在http://support.microsoft.com。  
  
> [!NOTE]
>  如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。 如需詳細資訊，請參閱 <xref:System.Security.Permissions.SecurityPermission> 和 <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">目前的節點不符合有效的樣式表。</exception>
        <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="url">URL，指定要載入的 XSLT 樣式表。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來載入樣式表和 <c>xsl:import</c> 與 <c>xsl:include</c> 元素中參考的任何樣式表。  
  
 如果值為 <see langword="null" />，則會使用不具有使用者認證的預設 <see cref="T:System.Xml.XmlUrlResolver" />，開啟樣式表。 因為沒有使用預設的 <see cref="T:System.Xml.XmlUrlResolver" /> 解析樣式表中的任何外部資源，所以不會解析 <c>xsl:import</c> 和 <c>xsl:include</c> 元素。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
        <summary>載入 URL 指定的 XSLT 樣式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 樣式表的 URI 用來建立套用至組件辨識項。 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在http://support.microsoft.com。  
  
> [!NOTE]
>  如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。 如需詳細資訊，請參閱 <xref:System.Security.Permissions.SecurityPermission> 和 <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下列範例會將 XML 文件轉換成 HTML 文件。 此範例會載入 XSLT 樣式表包含`xsl:include`參考另一個樣式表的項目。 <xref:System.Xml.XmlUrlResolver>傳遞至<xref:System.Xml.Xsl.XslTransform.Load%2A>設定的認證存取網路資源，內含的樣式表的所需的方法。  
  
 [!code-csharp[XslTransform.Load2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load2/CS/trans2.cs#1)]
 [!code-vb[XslTransform.Load2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load2/VB/trans2.vb#1)]  
  
 這個範例會使用下列的資料檔案，做為輸入。  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load2#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/books.xml#2)]  
  
 `sort.xsl`  
  
 [!code-xml[XslTransform.Load2#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/sort.xsl#3)]  
  
 `includefile.xsl`  
  
 [!code-xml[XslTransform.Load2#4](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/includefile.xsl#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">載入的資源不是有效的樣式表。</exception>
        <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XmlReader" /> 物件，包含 XSLT 樣式表。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來載入 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
        <summary>載入 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 樣式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 這個方法會載入 XSLT 樣式表，包括任何參考中的樣式表`xsl:include`和`xsl:import`項目。 從目前節點載入樣式表<xref:System.Xml.XmlReader>透過所有子系。 這可讓您使用做為樣式表的文件的一部分。  
  
 之後<xref:System.Xml.Xsl.XslTransform.Load%2A>方法傳回時，<xref:System.Xml.XmlReader>位於樣式表結尾之後的下一個節點。 如果到達文件結尾，則 <xref:System.Xml.XmlReader> 會定位於檔案結尾 (EOF)。  
  
 如果樣式表包含實體，您應該指定<xref:System.Xml.XmlReader>，可以解析實體 (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType>傳回`true`)。 在此情況下，<xref:System.Xml.XmlValidatingReader>可用。  
  
 如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 組件具有完全信任。 建議的作法是要提供辨識項使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>內嵌指令碼的方法與樣式表，請參閱 Q316755 在 Microsoft 知識庫文件在http://support.microsoft.com。  
  
> [!NOTE]
>  如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。 如需詳細資訊，請參閱 <xref:System.Security.Permissions.SecurityPermission> 和 <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">目前的節點不符合有效的樣式表。</exception>
        <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />) 或包含 XSLT 樣式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來載入 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> 方法完成後不會加以快取。</param>
        <summary>載入 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 樣式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 組件具有完全信任。 建議的作法是要提供辨識項使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>方法。 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在http://support.microsoft.com。  
  
> [!NOTE]
>  如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。 如需詳細資訊，請參閱 <xref:System.Security.Permissions.SecurityPermission> 和 <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">載入的資源不是有效的樣式表。</exception>
        <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，包含 XSLT 樣式表。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來載入 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> 方法完成後不會加以快取。</param>
        <summary>載入 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 樣式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 從目前的位置載入樣式表<xref:System.Xml.XPath.XPathNavigator>。 若要載入之文件的部分為樣式表，瀏覽至樣式表的開頭對應的節點。 之後<xref:System.Xml.Xsl.XslTransform.Load%2A>方法傳回時，<xref:System.Xml.XPath.XPathNavigator>定位於樣式表的開頭 (上`xsl:style sheet`節點)。  
  
 如果樣式表包含內嵌指令碼，指令碼會編譯至組件。 組件具有完全信任。 建議的作法是要提供辨識項使用<xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29>。 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在http://support.microsoft.com。  
  
> [!NOTE]
>  如果呼叫端沒有`UnmanagedCode`權限，內嵌指令碼不會編譯和<xref:System.Security.SecurityException>就會擲回。 如需詳細資訊，請參閱 <xref:System.Security.Permissions.SecurityPermission> 和 <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">目前的節點不符合有效的樣式表。</exception>
        <exception cref="T:System.Security.SecurityException">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XmlReader" /> 物件，包含要載入的樣式表。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來載入 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> 方法完成後不會加以快取。</param>
        <param name="evidence">
          <see cref="T:System.Security.Policy.Evidence" />，設定在 XSLT 樣式表中針對指令碼區塊所產生的組件上。  
  
 如果此為 <see langword="null" />則不會處理指令碼區塊、不支援 XSLT <c>document()</c> 函式，且不允許特殊權限的擴充物件。  
  
 為了提供指令碼組件的辨識項，呼叫端必須擁有 <see langword="ControlEvidence" /> 使用權限。 非完全信任呼叫端可以設定這個參數為 <see langword="null" />。</param>
        <summary>載入 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 樣式表。 這個方法可讓您指定辨識項，限制樣式表的使用權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 這個方法會載入 XSLT 樣式表，包括任何參考中的樣式表`xsl:include`和`xsl:import`項目。 從目前節點載入樣式表<xref:System.Xml.XmlReader>透過所有子系。 這可讓您使用做為樣式表的文件的一部分。  
  
 之後<xref:System.Xml.Xsl.XslTransform.Load%2A>方法傳回時，<xref:System.Xml.XmlReader>位於樣式表結尾之後的下一個節點。 如果到達文件結尾，則 <xref:System.Xml.XmlReader> 會定位於檔案結尾 (EOF)。  
  
 如果樣式表包含實體，您應該指定<xref:System.Xml.XmlReader>，可以解析實體 (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType>傳回`true`)。 在此情況下，<xref:System.Xml.XmlValidatingReader>可用。  
  
 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在http://support.microsoft.com。  
  
 有不同的方式提供的辨識項。 下表描述何種辨識項，以便提供一般使用者案例。  
  
    
  
## Examples  
 下列範例會將 XSLT 轉換其中`xsltReader`是<xref:System.Xml.XmlReader>包含樣式表和`secureURL`是受信任的 URL，可以用來建立<xref:System.Security.Policy.Evidence>。 <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A?displayProperty=nameWithType>方法用來建立<xref:System.Security.Policy.Evidence>套用的樣式表。  
  
 [!code-cpp[XslTransform.Load4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load4/CPP/trans_ev.cpp#1)]
 [!code-csharp[XslTransform.Load4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load4/CS/trans_ev.cs#1)]
 [!code-vb[XslTransform.Load4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load4/VB/trans_ev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">目前的節點不符合有效的樣式表。</exception>
        <exception cref="T:System.Security.SecurityException">參考的樣式表需要功能，而提供的辨識項不允許此功能。  
  
 呼叫端嘗試提供辨識項，但沒有 <see langword="ControlEvidence" /> 使用權限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供的辨識項。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="stylesheet">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />) 或包含 XSLT 樣式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來載入 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> 方法完成後不會加以快取。</param>
        <param name="evidence">
          <see cref="T:System.Security.Policy.Evidence" />，設定在 XSLT 樣式表中針對指令碼區塊所產生的組件上。  
  
 如果此為 <see langword="null" />則不會處理指令碼區塊、不支援 XSLT <c>document()</c> 函式，且不允許特殊權限的擴充物件。  
  
 為了提供指令碼組件的辨識項，呼叫端必須擁有 <see langword="ControlEvidence" /> 使用權限。 非完全信任呼叫端可以設定這個參數為 <see langword="null" />。</param>
        <summary>載入 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 樣式表。 這個方法可讓您指定辨識項，限制樣式表的使用權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在http://support.microsoft.com。  
  
 有不同的方式提供的辨識項。 下表描述何種辨識項，以便提供一般使用者案例。  
  
  ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">載入的資源不是有效的樣式表。</exception>
        <exception cref="T:System.Security.SecurityException">參考的樣式表需要功能，而提供的辨識項不允許此功能。  
  
 呼叫端嘗試提供辨識項，但沒有 <see langword="ControlEvidence" /> 使用權限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供的辨識項。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，包含要載入的樣式表。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來載入 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> 方法完成後不會加以快取。</param>
        <param name="evidence">
          <see cref="T:System.Security.Policy.Evidence" />，設定在 XSLT 樣式表中針對指令碼區塊所產生的組件上。  
  
 如果此為 <see langword="null" />則不會處理指令碼區塊、不支援 XSLT <c>document()</c> 函式，且不允許特殊權限的擴充物件。  
  
 為了提供指令碼組件的辨識項，呼叫端必須擁有 <see langword="ControlEvidence" /> 使用權限。 非完全信任呼叫端可以設定這個參數為 <see langword="null" />。</param>
        <summary>載入 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 樣式表。 這個方法可讓您指定辨識項，限制樣式表的使用權限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 從目前的位置載入樣式表<xref:System.Xml.XPath.XPathNavigator>。 若要載入之文件的部分為樣式表，瀏覽至樣式表的開頭對應的節點。 之後<xref:System.Xml.Xsl.XslTransform.Load%2A>方法傳回時，<xref:System.Xml.XPath.XPathNavigator>定位於樣式表的開頭 (上`xsl:style sheet`節點)。  
  
 與相關的問題<xref:System.Xml.Xsl.XslTransform.Load%2A>方法和樣式表，內嵌指令碼，請參閱 Q316755 在 Microsoft 知識庫文件在http://support.microsoft.com。  
  
 有不同的方式提供的辨識項。 下表描述何種辨識項，以便提供一般使用者案例。  
  
    
  
## Examples  
 下列範例會執行 XSLT 轉換使用的樣式表來自外部來源。 樣式表來自受信任的來源，因為`resolver`和`evidence`參數已設為`null`。  
  
 [!code-csharp[XslTransform.Load5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load5/CS/trans_noev.cs#1)]
 [!code-vb[XslTransform.Load5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load5/VB/trans_noev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">目前的節點不符合有效的樣式表。</exception>
        <exception cref="T:System.Security.SecurityException">參考的樣式表需要功能，而提供的辨識項不允許此功能。  
  
 呼叫端嘗試提供辨識項，但沒有 <see langword="ControlEvidence" /> 使用權限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">提供的辨識項。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></permission>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用載入的 XSLT 樣式表轉換 XML 資料。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputfile">要轉換之來源文件的 URL。</param>
        <param name="outputfile">輸出檔案的 URL。</param>
        <summary>在輸入檔案中轉換 XML 資料，並將結果輸出至輸出檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
> [!NOTE]
>  這個方法是.NET Framework 1.1 版中已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。  
  
   
  
## Examples  
 下列範例會轉換`books.xml`檔案使用`output.xsl`樣式表並將結果輸出至`books.html`檔案。  
  
 [!code-cpp[XslTransform.Transform3#1](~/samples/snippets/cpp/VS_Snippets_Data/xsltransform.transform3/CPP/trans_snip2.cpp#1)]
 [!code-csharp[XslTransform.Transform3#1](~/samples/snippets/csharp/VS_Snippets_Data/xsltransform.transform3/CS/trans_snip2.cs#1)]
 [!code-vb[XslTransform.Transform3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/xsltransform.transform3/VB/trans_snip2.vb#1)]  
  
 此範例會使用下列兩個輸入的檔案：  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlReader" />。</summary>
        <returns>包含轉換結果的 <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
> [!NOTE]
>  此方法現在已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。 `xsl:output`輸出至時，不支援項目<xref:System.Xml.XmlReader>(`xsl:output`便會忽略元素)。 請參閱[XslTransform 的輸出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)如需詳細資訊。  
  
 這個方法可讓您執行非同步轉換的來源文件。  
  
 轉換是指套用到整個文件。 換言之，如果您要傳入的節點不是文件的根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>至<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 下列範例會執行轉換節點片段。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlReader" />。</summary>
        <returns>包含轉換結果的 <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。 這表示節點，這是目前轉換程序之前，會維持目前的節點之後<xref:System.Xml.Xsl.XslTransform.Transform%2A>呼叫方法。  
  
 因為<xref:System.Xml.XmlReader>提供唯讀的輸出，`xsl:output`項目會被忽略。 請參閱[XslTransform 的輸出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)如需詳細資訊。  
  
 這個方法可讓您執行非同步轉換的來源文件。  
  
> [!NOTE]
>  這個方法已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定 XSLT document （） 函式的解決方式。 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
  
 注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="inputfile">要轉換之來源文件的 URL。</param>
        <param name="outputfile">輸出檔案的 URL。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> 方法完成後不會加以快取。</param>
        <summary>在輸入檔案中轉換 XML 資料，並將結果輸出至輸出檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
   
  
## Examples  
 下列範例會執行 XSLT 轉換，並輸出至檔案。 <xref:System.Xml.XmlUrlResolver>會使用預設認證的外部資源解析。 如需詳細資訊，請參閱<xref:System.Net.CredentialCache.DefaultCredentials%2A>。  
  
 [!code-cpp[XslTransform.Transform7#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTRansform.Transform7/CPP/trans_snip4.cpp#1)]
 [!code-csharp[XslTransform.Transform7#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTRansform.Transform7/CS/trans_snip4.cs#1)]
 [!code-vb[XslTransform.Transform7#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTRansform.Transform7/VB/trans_snip4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <param name="output">要輸出至的資料流。</param>
        <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.Stream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
> [!NOTE]
>  此方法現在已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。  
  
 轉換是指套用到整個文件。 換言之，如果您要傳入的節點不是文件的根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>至<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 下列範例會執行轉換節點片段。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
  
 注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <param name="output">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
> [!NOTE]
>  此方法現在已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。  
  
 上的編碼屬性`xsl:output`輸出至時，不支援項目<xref:System.IO.TextWriter>。 請參閱[XslTransform 的輸出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)針對所在特性`xsl:output`支援屬性。  
  
 轉換是指套用到整個文件。 換言之，如果您要傳入的節點不是文件的根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>至<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 下列範例會執行轉換節點片段。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
  
 注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
        <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlReader" />。</summary>
        <returns>包含轉換結果的 <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。 `xsl:output`輸出至時，不支援項目<xref:System.Xml.XmlReader>(`xsl:output`便會忽略元素)。 請參閱[XslTransform 的輸出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)如需詳細資訊。  
  
 這個方法可讓您執行非同步轉換的來源文件。  
  
 轉換是指套用到整個文件。 換言之，如果您要傳入的節點不是文件的根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>至<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 下列範例會執行轉換節點片段。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
   
  
## Examples  
 下列範例會將轉換 XML 文件，並將結果輸出至`XmlReader`。 <xref:System.Xml.XmlUrlResolver>所需的認證用來處理任何 XSLT`document()`函式。  
  
 [!code-cpp[XslTransform.Transform4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform4/CPP/trans_snip3.cpp#1)]
 [!code-csharp[XslTransform.Transform4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform4/CS/trans_snip3.cs#1)]
 [!code-vb[XslTransform.Transform4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform4/VB/trans_snip3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <param name="output">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
        <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
> [!NOTE]
>  此方法現在已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。 `xsl:output`輸出至時，不支援項目<xref:System.Xml.XmlWriter>(`xsl:output`會被忽略)。 請參閱[XslTransform 的輸出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)如需詳細資訊。  
  
 轉換是指套用到整個文件。 換言之，如果您要傳入的節點不是文件的根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>至<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 下列範例會執行轉換節點片段。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
  
 注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <param name="output">要輸出至的資料流。</param>
        <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.Stream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。 這表示節點，這是目前轉換程序之前，會維持目前的節點之後<xref:System.Xml.Xsl.XslTransform.Transform%2A>呼叫方法。  
  
 請參閱[XslTransform 的輸出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)針對所在特性`xsl:output`支援屬性。  
  
> [!NOTE]
>  此方法現在已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
  
 注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <param name="output">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。 這表示節點，這是目前轉換程序之前，會維持目前的節點之後<xref:System.Xml.Xsl.XslTransform.Transform%2A>呼叫方法。  
  
 上的編碼屬性`xsl:output`輸出至時，不支援項目<xref:System.IO.TextWriter>。 請參閱[XslTransform 的輸出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)針對所在特性`xsl:output`支援屬性。  
  
> [!NOTE]
>  此方法現在已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
  
 注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
        <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlReader" />。</summary>
        <returns>包含轉換結果的 <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。 這表示節點，這是目前轉換程序之前，會維持目前的節點之後<xref:System.Xml.Xsl.XslTransform.Transform%2A>呼叫方法。  
  
 因為<xref:System.Xml.XmlReader>提供唯讀的輸出，`xsl:output`項目會被忽略。 請參閱[XslTransform 的輸出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)如需詳細資訊。  
  
 這個方法可讓您執行非同步轉換的來源文件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
  
 注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <param name="output">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
        <summary>使用指定的引數來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。 這表示的節點是最新的轉換程序之前，會維持目前的節點之後<xref:System.Xml.Xsl.XslTransform.Transform%2A>呼叫方法。  
  
 `xsl:output`輸出至時，不支援項目<xref:System.Xml.XmlWriter>(`xsl:output`會被忽略)。 請參閱[XslTransform 的輸出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)如需詳細資訊。  
  
> [!NOTE]
>  此方法現在已過時。 設定<xref:System.Xml.Xsl.XslTransform.XmlResolver%2A>屬性會決定如何 XSLT`document()`函式已解決。 建議的作法是使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法會採用<xref:System.Xml.XmlResolver>物件做為其中一個引數。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
  
 注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <param name="output">要輸出至的資料流。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> 方法完成後不會加以快取。</param>
        <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.Stream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。  
  
 轉換是指套用到整個文件。 換言之，如果您要傳入的節點不是文件的根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>至<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 下列範例會執行轉換節點片段。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
   
  
## Examples  
 下列範例會執行 ASP.NET 頁面內的轉換。  
  
 [!code-aspx-csharp[XslTransform.Transform5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform5/CS/transcs.aspx#1)]
 [!code-aspx-vb[XslTransform.Transform5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform5/VB/transvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
  
 注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <param name="output">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
        <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。  
  
 上的編碼屬性`xsl:output`輸出至時，不支援項目<xref:System.IO.TextWriter>。 請參閱[XslTransform 的輸出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)針對所在特性`xsl:output`支援屬性。  
  
 轉換是指套用到整個文件。 換言之，如果您要傳入的節點不是文件的根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>至<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 下列範例會執行轉換節點片段。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
   
  
## Examples  
 下列範例會轉換為 XML 檔案，並輸出 HTML 字串。 <xref:System.IO.StringReader>和<xref:System.IO.StringWriter>類別可用來讀取和寫入的字串。  
  
 [!code-csharp[XslTransform.Transform6#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform6/CS/transstring.cs#1)]
 [!code-vb[XslTransform.Transform6#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform6/VB/transstring.vb#1)]  
  
 該範例使用 `books.xml` 檔案做為輸入。  
  
 [!code-xml[XslTransform.Transform6#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Transform6/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
  
 注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <param name="output">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
        <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。 `xsl:output`輸出至時，不支援項目<xref:System.Xml.XmlWriter>(`xsl:output`會被忽略)。 請參閱[XslTransform 的輸出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)如需詳細資訊。  
  
 轉換是指套用到整個文件。 換言之，如果您要傳入的節點不是文件的根節點，則不會阻止轉換程序取得已載入文件中的所有節點。 若要轉換節點片段，您必須建立<xref:System.Xml.XmlDocument>包含僅節點片段，並將其傳遞<xref:System.Xml.XmlDocument>至<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法。  
  
 下列範例會執行轉換節點片段。  
  
```  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 此範例會使用`library.xml`和`print_root.xsl`檔案做為輸入，並輸出至主控台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```  
<style sheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</style sheet>  
```  
  
   
  
## Examples  
 下列範例會將 XML 文件轉換成 HTML 文件。 它會在資料表中顯示 ISBN、 標題和每本書的價格。  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 範例會使用下列兩個輸入檔案。  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
  
 注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <param name="output">要輸出至的資料流。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
        <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.Stream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。 這表示節點，這是目前轉換程序之前，會維持目前的節點之後<xref:System.Xml.Xsl.XslTransform.Transform%2A>呼叫方法。  
  
 請參閱[XslTransform 的輸出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)針對所在特性`xsl:output`支援屬性。  
  
   
  
## Examples  
 下列範例會載入至 customer 資料表<xref:System.Xml.XmlDataDocument>和執行 XSLT 轉換，將客戶資料提取到 HTML 表格。 此範例會使用 Microsoft SQL Server 2000 的 Northwind 資料庫。  
  
 [!code-csharp[XmlDataDocument.CreateNavigator#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDataDocument.CreateNavigator/CS/dataset_trans.cs#1)]
 [!code-vb[XmlDataDocument.CreateNavigator#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDataDocument.CreateNavigator/VB/dataset_trans.vb#1)]  
  
 該範例使用 `customers.xsl` 檔案做為輸入。  
  
 [!code-xml[XmlDataDocument.CreateNavigator#2](~/samples/snippets/xml/VS_Snippets_Data/XmlDataDocument.CreateNavigator/XML/customers.xsl#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
  
 注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <param name="output">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
        <summary>使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。 這表示節點，這是目前轉換程序之前，會維持目前的節點之後<xref:System.Xml.Xsl.XslTransform.Transform%2A>呼叫方法。  
  
 上的編碼屬性`xsl:output`輸出至時，不支援項目<xref:System.IO.TextWriter>。 請參閱[XslTransform 的輸出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)針對所在特性`xsl:output`支援屬性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
  
 注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="args">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
        <param name="output">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="resolver">
          <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
 <see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
        <summary>使用指定的引數來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支援 XSLT 1.0 語法。 XSLT 樣式表必須包含命名空間宣告`xmlns:xsl= http://www.w3.org/1999/XSL/Transform`。  
  
 `args`與進行比對`xsl:param`樣式表中定義的項目。 整體套用至文件轉換範圍。 換句話說，如果目前節點不是文件根節點的節點樹狀結構上設定，則不會阻止轉換程序取得已載入文件中的所有節點。 在執行轉換之後，<xref:System.Xml.XPath.XPathNavigator>會保留在其原始狀態。 這表示的節點是最新的轉換程序之前，會維持目前的節點之後<xref:System.Xml.Xsl.XslTransform.Transform%2A>呼叫方法。  
  
 `xsl:output`輸出至時，不支援項目<xref:System.Xml.XmlWriter>(`xsl:output`會被忽略)。 請參閱[XslTransform 的輸出](~/docs/standard/data/xml/outputs-from-an-xsltransform.md)如需詳細資訊。  
  
   
  
## Examples  
 下列範例會載入並執行 XSLT 轉換之前先編輯 XML 文件。  
  
 [!code-cpp[XslTransform.Transform2#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform2/CPP/trans_snip.cpp#1)]
 [!code-csharp[XslTransform.Transform2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform2/CS/trans_snip.cs#1)]
 [!code-vb[XslTransform.Transform2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform2/VB/trans_snip.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">處理 XSLT 轉換時發生錯誤。  
  
 注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslTransform.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>呼叫 <see cref="T:System.Xml.XmlResolver" /> 方法時，設定用來解析外部資源的 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />。</summary>
        <value>轉換期間所使用的 <see cref="T:System.Xml.XmlResolver" />。 如果設定為<see langword="null" />，XSLT <c>document （)</c>函式仍未解決。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>類別是.NET Framework 2.0 版中已過時。 <xref:System.Xml.Xsl.XslCompiledTransform>類別是新的 XSLT 處理器。 如需詳細資訊，請參閱[使用 XslCompiledTransform 類別](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md)和[移轉從 XslTransform 類別](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md)。  
  
 在 1.1 版的.NET framework，應用程式的信任層級會決定預設的行為：  
  
 `Fully trusted code:` 預設值<xref:System.Xml.XmlUrlResolver>沒有使用者認證用來解析`document()`函式。 如果需要驗證存取外部資源，使用這個屬性來指定<xref:System.Xml.XmlResolver>具有必要認證。  
  
 `Semi-trusted code:` 屬性設定為`null`，這表示`document()`函式仍未解決。 由於完全信任，才能指定<xref:System.Xml.XmlResolver>，這個屬性也無法設定。  
  
 使用這個解析程式時 XSLT`document()`函式會叫用。 它不用來解析`xsl:import`和`xsl:include`樣式表中所參考的項目。 若要指定<xref:System.Xml.XmlResolver>要用來解析`xsl:import`和`xsl:include`樣式表中所參考的項目使用<xref:System.Xml.Xsl.XslTransform.Load%2A>多載，這個方法會接受<xref:System.Xml.XmlResolver>做為其中一個引數。  
  
> [!NOTE]
>  這個屬性是.NET Framework 1.1 版中已過時。 指定<xref:System.Xml.XmlResolver>使用<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法是建議的做法。 在此情況下，<xref:System.Xml.XmlResolver>不會快取之後<xref:System.Xml.Xsl.XslTransform.Transform%2A>方法完成。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
  </Members>
</Type>