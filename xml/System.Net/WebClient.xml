<Type Name="WebClient" FullName="System.Net.WebClient">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1d9bf193936aa85432a3f59e3c7656c5bf610654" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34452459" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebClient : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebClient extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Net.WebClient" />
  <TypeSignature Language="VB.NET" Value="Public Class WebClient&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebClient : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.WebClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供從 URI 所識別的資源中，傳送與接收資料的常見方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient>類別提供常見的方法，將資料傳送到或收到來自任何本機、 內部網路或網際網路資源 URI 所識別的資料。  
  
 <xref:System.Net.WebClient>類別會使用<xref:System.Net.WebRequest>類別，以提供資源的存取權。 <xref:System.Net.WebClient> 執行個體可以存取與任何資料<xref:System.Net.WebRequest>子代向<xref:System.Net.WebRequest.RegisterPrefix%2A?displayProperty=nameWithType>方法。  
  
> [!NOTE]
>  根據預設，.NET Framework 支援之 Uri 的開頭`http:`， `https:`，ftp:、 和`file:`配置識別項。  
  
 下表描述<xref:System.Net.WebClient>以上傳資料至資源的方法。  
  
|方法|描述|  
|------------|-----------------|  
|<xref:System.Net.WebClient.OpenWrite%2A>|擷取<xref:System.IO.Stream>用來將資料傳送至資源。|  
|<xref:System.Net.WebClient.OpenWriteAsync%2A>|擷取<xref:System.IO.Stream>用來將資料傳送至資源，而不會封鎖呼叫執行緒。|  
|<xref:System.Net.WebClient.UploadData%2A>|傳送的位元組陣列的資源，並傳回<xref:System.Byte>陣列，包含任何回應。|  
|<xref:System.Net.WebClient.UploadDataAsync%2A>|傳送<xref:System.Byte>陣列資源，而不會封鎖呼叫執行緒。|  
|<xref:System.Net.WebClient.UploadFile%2A>|傳送至資源的本機檔案，並傳回<xref:System.Byte>陣列，包含任何回應。|  
|<xref:System.Net.WebClient.UploadFileAsync%2A>|本機將檔案傳送至資源，而不會封鎖呼叫執行緒。|  
|<xref:System.Net.WebClient.UploadValues%2A>|傳送<xref:System.Collections.Specialized.NameValueCollection>資源並傳回<xref:System.Byte>陣列，包含任何回應。|  
|<xref:System.Net.WebClient.UploadValuesAsync%2A>|傳送<xref:System.Collections.Specialized.NameValueCollection>資源並傳回<xref:System.Byte>陣列，包含任何回應，而不會封鎖呼叫執行緒。|  
|<xref:System.Net.WebClient.UploadString%2A>|傳送<xref:System.String>至資源，而不會封鎖呼叫執行緒。|  
|<xref:System.Net.WebClient.UploadStringAsync%2A>|傳送<xref:System.String>至資源，而不會封鎖呼叫執行緒。|  
  
 下表描述<xref:System.Net.WebClient>從資源下載資料的方法。  
  
|方法|描述|  
|------------|-----------------|  
|<xref:System.Net.WebClient.OpenRead%2A>|傳回的資料從做為資源<xref:System.IO.Stream>。|  
|<xref:System.Net.WebClient.OpenReadAsync%2A>|在資源上，從傳回的資料，而不會封鎖呼叫執行緒。|  
|<xref:System.Net.WebClient.DownloadData%2A>|從資源下載資料，並傳回<xref:System.Byte>陣列。|  
|<xref:System.Net.WebClient.DownloadDataAsync%2A>|從資源下載資料，並傳回<xref:System.Byte>陣列，而不會封鎖呼叫執行緒。|  
|<xref:System.Net.WebClient.DownloadFile%2A>|從資源將資料下載到本機檔案。|  
|<xref:System.Net.WebClient.DownloadFileAsync%2A>|資料從資源下載到本機檔案，而不會封鎖呼叫執行緒。|  
|<xref:System.Net.WebClient.DownloadString%2A>|下載<xref:System.String>從資源，並傳回<xref:System.String>。|  
|<xref:System.Net.WebClient.DownloadStringAsync%2A>|下載<xref:System.String>從資源，而不會封鎖呼叫執行緒。|  
  
 您可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法來取消尚未完成的非同步作業。  
  
 A<xref:System.Net.WebClient>執行個體不會傳送預設的選擇性的 HTTP 標頭。 如果您的要求需要選用的標頭，您必須加入至標頭<xref:System.Net.WebClient.Headers%2A>集合。 例如，若要保留在回應中的查詢，您必須加入使用者代理程式標頭。 此外，伺服器可能會傳回 500 （內部伺服器錯誤），如果使用者代理程式標頭遺失。  
  
 <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> 設定為`true`中<xref:System.Net.WebClient>執行個體。  
  
   
  
## Examples  
 下列程式碼範例會接受資源 URI、 擷取其值，然後顯示回應。  
  
 [!code-cpp[NCLWebClientUserAgent#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientUserAgent/CPP/useragent.cpp#1)]
 [!code-csharp[NCLWebClientUserAgent#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientUserAgent/CS/useragent.cs#1)]
 [!code-vb[NCLWebClientUserAgent#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientUserAgent/VB/useragent.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.WebPermission">若要存取要求的 URI 或任何已重新導向至的 URI。 關聯的列舉型別：<see cref="F:System.Net.NetworkAccess.Connect" />。</permission>
    <block subset="none" type="overrides">
      <para>在衍生的類別應該呼叫基底類別實作<see cref="T:System.Net.WebClient" />以確保在衍生的類別可以正常運作。</para>
    </block>
    <altmember cref="T:System.Net.WebRequest" />
    <altmember cref="T:System.Net.WebResponse" />
    <altmember cref="T:System.Net.HttpWebRequest" />
    <altmember cref="T:System.Net.HttpWebResponse" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Net.WebClient" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 預設建構函式建立的新執行個體<xref:System.Net.WebClient>類別。 預設的 HTTP 方法為 GET。 預設 FTP 方法是重試。 預設的 <xref:System.Net.WebClient.Encoding%2A> 是 <xref:System.Text.Encoding.Default%2A>。 <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> 的預設值為 `true`。  
  
   
  
## Examples  
 下列程式碼範例會建立<xref:System.Net.WebClient>執行個體，然後再使用它可從伺服器下載的資料，並顯示在系統主控台，以從伺服器下載的資料，並將它寫入至檔案，和上傳至伺服器的表單值和接收回應。  
  
 [!code-cpp[WebClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient/CPP/webclient.cpp#1)]
 [!code-csharp[WebClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient/CS/webclient.cs#1)]
 [!code-vb[WebClient#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient/VB/webclient.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowReadStreamBuffering">
      <MemberSignature Language="C#" Value="public bool AllowReadStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowReadStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.AllowReadStreamBuffering" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowReadStreamBuffering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowReadStreamBuffering { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示是否要為 <see cref="T:System.Net.WebClient" /> 執行個體緩衝處理從網際網路資源讀取的資料。</summary>
        <value>傳回 <see cref="T:System.Boolean" />。  
  
 <see langword="true" /> 表示要對從網際網路資源接收的資料啟用緩衝處理，<see langword="false" /> 則表示要停用緩衝處理。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Net.WebClient.AllowReadStreamBuffering%2A>屬性是`true`，所以無法讀取應用程式在記憶體中緩衝資料。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowWriteStreamBuffering">
      <MemberSignature Language="C#" Value="public bool AllowWriteStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowWriteStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.AllowWriteStreamBuffering" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowWriteStreamBuffering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowWriteStreamBuffering { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定值，這個值表示是否要為 <see cref="T:System.Net.WebClient" /> 執行個體緩衝處理寫入網際網路資源的資料。</summary>
        <value>傳回 <see cref="T:System.Boolean" />。  
  
 若要啟用緩衝處理寫入網際網路資源的資料，則為 <see langword="true" />；若要停用緩衝處理，則為 <see langword="false" />。 預設值為 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當<xref:System.Net.WebClient.AllowWriteStreamBuffering%2A>屬性是`true`，讓它與網際網路資源，在較大的區塊可以更有效率地撰寫在記憶體中緩衝的資料。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public string BaseAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.BaseAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseAddress { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定由 <see cref="T:System.Net.WebClient" /> 要求的基底 URI。</summary>
        <value>
          <see cref="T:System.String" />，包含 <see cref="T:System.Net.WebClient" /> 所提出之要求的基底 URI；如果未指定基底位址 (Base Address)，則為 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.BaseAddress%2A>屬性包含與相對位址結合的基底 URI。 當您呼叫的方法，上傳或下載資料、<xref:System.Net.WebClient>物件結合此基底 URI 與您在方法呼叫中指定的相對位址。 如果您指定絕對 URI，<xref:System.Net.WebClient>不會使用<xref:System.Net.WebClient.BaseAddress%2A>屬性值。  
  
 若要移除先前設定的值，這個屬性設定為`null`或空字串 ("")。  
  
   
  
## Examples  
 下列程式碼範例會從網際網路伺服器下載資料，並顯示在主控台上。 它假設伺服器的位址 (例如http://www.contoso.com)處於`hostUri`和中的資源 （例如 /default.htm) 的路徑`uriSuffix`。  
  
 [!code-cpp[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CPP/webclient_baseaddress_responseheaders.cpp#1)]
 [!code-csharp[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CS/webclient_baseaddress_responseheaders.cs#1)]
 [!code-vb[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/VB/webclient_baseaddress_responseheaders.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Net.WebClient.BaseAddress" /> 是設為無效的 URI。 內部例外狀況可能包含可以協助您尋找錯誤的資訊。</exception>
      </Docs>
    </Member>
    <Member MemberName="CachePolicy">
      <MemberSignature Language="C#" Value="public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Cache.RequestCachePolicy CachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.CachePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property CachePolicy As RequestCachePolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Cache::RequestCachePolicy ^ CachePolicy { System::Net::Cache::RequestCachePolicy ^ get(); void set(System::Net::Cache::RequestCachePolicy ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定應用程式的快取原則，用於這個 WebClient 執行個體使用 <see cref="T:System.Net.WebRequest" /> 物件取得的任何資源。</summary>
        <value>
          <see cref="T:System.Net.Cache.RequestCachePolicy" /> 物件，表示應用程式的快取需求。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取消暫止的非同步作業。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果作業暫止，這個方法會呼叫<xref:System.Net.WebRequest.Abort%2A>基礎<xref:System.Net.WebRequest>。  
  
 當您呼叫<xref:System.Net.WebClient.CancelAsync%2A>，您的應用程式還是會收到與作業相關聯的完成事件。 例如，當您呼叫<xref:System.Net.WebClient.CancelAsync%2A>取消<xref:System.Net.WebClient.DownloadStringAsync%2A>作業，如果您已經指定的事件處理常式<xref:System.Net.WebClient.DownloadStringCompleted>事件，事件處理常式會接收通知，此作業已結束。 若要深入了解作業是否成功完成，請檢查<xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A>屬性的基底類別上<xref:System.Net.DownloadDataCompletedEventArgs>在事件資料物件傳遞至事件處理常式。  
  
 如果沒有任何非同步作業正在進行中，這個方法任何作用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentials Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::ICredentials ^ Credentials { System::Net::ICredentials ^ get(); void set(System::Net::ICredentials ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定傳送至主機並用於驗證要求的網路認證。</summary>
        <value>
          <see cref="T:System.Net.ICredentials" />，包含要求的驗證認證。 預設值為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.Credentials%2A>屬性包含用來存取在主機上的資源的驗證認證。 在大部分的用戶端情況下，您應該使用<xref:System.Net.CredentialCache.DefaultCredentials%2A>，這是目前登入使用者的認證。 若要這樣做，請設定<xref:System.Net.WebClient.UseDefaultCredentials%2A>屬性`true`而不是設定這個屬性。  
  
 如果<xref:System.Net.WebClient>中介層應用程式，例如 ASP.NET 應用程式中使用類別<xref:System.Net.CredentialCache.DefaultCredentials%2A>隸屬於執行 ASP 網頁 （伺服器端的認證） 的帳戶。 一般而言，您會設定此屬性代表其提出要求的用戶端的認證。  
  
 基於安全性理由，會自動遵循重新導向時，會儲存您想要包含在中的重新導向的認證<xref:System.Net.CredentialCache>並將它指派給這個屬性。 這個屬性會自動設定為`null`時重新導向，如果它包含以外的項目<xref:System.Net.CredentialCache>。 具有此屬性的值會自動設為`null`在這些情況下不會將認證傳送到任何非預期的目的地。
  
## Examples  
 下列程式碼範例會使用使用者的系統認證來驗證要求。  
  
 [!code-cpp[WebClientAuthentication#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClientAuthentication/CPP/webclientauth.cpp#1)]
 [!code-csharp[WebClientAuthentication#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClientAuthentication/CS/webclientauth.cs#1)]
 [!code-vb[WebClientAuthentication#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClientAuthentication/VB/webclientauth.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="P:System.Net.WebRequest.Credentials" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>從指定的 URI 下載資源做為 <see cref="T:System.Byte" /> 陣列。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadData">
      <MemberSignature Language="C#" Value="public byte[] DownloadData (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DownloadData(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadData (address As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DownloadData(System::String ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要從中下載資料的 URI。</param>
        <summary>從指定的 URI 下載資源做為 <see cref="T:System.Byte" /> 陣列。</summary>
        <returns>
          <see cref="T:System.Byte" /> 陣列，包含下載的資源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.DownloadData%2A>方法所指定的 URI 與下載資源`address`參數。 這個方法會封鎖下載資源時。 若要下載的資源，並繼續等待伺服器回應時執行，請使用其中一種<xref:System.Net.WebClient.DownloadDataAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例會從伺服器要求資料，並顯示傳回的資料。 它假設`remoteUri`包含要求的資料是有效的 URI。  
  
 [!code-cpp[WebClient_DownloadData#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_DownloadData/CPP/webclient_downloaddata.cpp#1)]
 [!code-csharp[WebClient_DownloadData#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_DownloadData/CS/webclient_downloaddata.cs#1)]
 [!code-vb[WebClient_DownloadData#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_DownloadData/VB/webclient_downloaddata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資料時發生錯誤。</exception>
        <exception cref="T:System.NotSupportedException">已經在多個執行緒上同時呼叫此方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadData">
      <MemberSignature Language="C#" Value="public byte[] DownloadData (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DownloadData(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadData(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadData (address As Uri) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ DownloadData(Uri ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Uri" /> 物件表示的 URI，可以從其中下載資料。</param>
        <summary>從指定的 URI 下載資源做為 <see cref="T:System.Byte" /> 陣列。</summary>
        <returns>
          <see cref="T:System.Byte" /> 陣列，包含下載的資源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.DownloadData%2A>方法所指定的 URI 與下載資源`address`參數。 這個方法會封鎖下載資源時。 若要下載的資源，並繼續等待伺服器回應時執行，請使用其中一種<xref:System.Net.WebClient.DownloadDataAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
 **請注意**應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadDataAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以非同步作業的方式，從指定的 URI 下載資源做為 <see cref="T:System.Byte" /> 陣列。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadDataAsync">
      <MemberSignature Language="C#" Value="public void DownloadDataAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadDataAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadDataAsync (address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadDataAsync(Uri ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Uri" />，包含要下載的 URI。</param>
        <summary>以非同步作業的方式，從指定的 URI 下載資源做為 <see cref="T:System.Byte" /> 陣列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會擷取指定的資源中指定的 URI 配置相關聯的通訊協定使用的預設方法`address`。 以非同步方式使用從執行緒集區的 自動配置的執行緒資源下載資料。  
  
 這個方法不會封鎖呼叫執行緒時下載資源。 若要下載的資源和封鎖，等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.DownloadData%2A>方法。 當下載完成時，<xref:System.Net.WebClient.DownloadDataCompleted>就會引發事件。 您的應用程式必須處理這個事件來接收通知。 下載的資料是用於<xref:System.Net.DownloadDataCompletedEventArgs.Result%2A>屬性。  
  
 您可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法來取消尚未完成的非同步作業。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataAsync">
      <MemberSignature Language="C#" Value="public void DownloadDataAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadDataAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadDataAsync (address As Uri, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadDataAsync(Uri ^ address, System::Object ^ userToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Uri" />，包含要下載的 URI。</param>
        <param name="userToken">使用者定義的物件，這個物件會在非同步作業完成時傳遞至叫用的方法。</param>
        <summary>以非同步作業的方式，從指定的 URI 下載資源做為 <see cref="T:System.Byte" /> 陣列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會擷取指定的資源中指定的 URI 配置相關聯的通訊協定使用的預設方法`address`。 以非同步方式使用從執行緒集區的 自動配置的執行緒資源下載資料。  
  
 這個方法不會封鎖呼叫執行緒時下載資源。 若要下載的資源和封鎖，等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.DownloadData%2A>方法。 當下載完成時，<xref:System.Net.WebClient.DownloadDataCompleted>就會引發事件。 您的應用程式必須處理這個事件來接收通知。 下載的資料是用於<xref:System.Net.DownloadDataCompletedEventArgs.Result%2A>屬性。  
  
 您可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法來取消尚未完成的非同步作業。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadDataCompletedEventHandler DownloadDataCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadDataCompletedEventHandler DownloadDataCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadDataCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DownloadDataCompleted As DownloadDataCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::DownloadDataCompletedEventHandler ^ DownloadDataCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadDataCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在非同步資料下載作業完成時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次非同步資料下載作業完成時，會引發這個事件。 藉由呼叫啟動非同步資料下載<xref:System.Net.WebClient.DownloadDataAsync%2A>方法。  
  
 <xref:System.Net.DownloadDataCompletedEventHandler>是針對此事件的委派。 <xref:System.Net.DownloadDataCompletedEventArgs>類別提供的事件資料的事件處理常式。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列程式碼範例將示範如何設定這個事件的事件處理常式。  
  
 [!code-cpp[NCLWebClientAsync#21](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#21)]
 [!code-csharp[NCLWebClientAsync#21](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#21)]
 [!code-vb[NCLWebClientAsync#21](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadDataTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用工作物件，以非同步作業的方式，從指定的 URI 下載資源做為 <see cref="T:System.Byte" /> 陣列。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; DownloadDataTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; DownloadDataTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataTaskAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadDataTaskAsync (address As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ DownloadDataTaskAsync(System::String ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要下載之資源的 URI。</param>
        <summary>使用工作物件，以非同步作業的方式，從指定的 URI 下載資源做為 <see cref="T:System.Byte" /> 陣列。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含已下載之資源的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>資料資源下載完成後，物件會完成。  
  
 這個方法會擷取指定的資源中指定的 URI 配置相關聯的通訊協定使用的預設方法`address`參數。 以非同步方式使用從執行緒集區的 自動配置的執行緒資源下載資料。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 下列程式碼範例會從伺服器要求資料，並顯示傳回的資料。 它假設`remoteUri`包含要求的資料是有效的 URI。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; DownloadDataTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; DownloadDataTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataTaskAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadDataTaskAsync (address As Uri) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ DownloadDataTaskAsync(Uri ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">要下載之資源的 URI。</param>
        <summary>使用工作物件，以非同步作業的方式，從指定的 URI 下載資源做為 <see cref="T:System.Byte" /> 陣列。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含已下載之資源的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>資料資源下載完成後，物件會完成。  
  
 這個方法會擷取指定的資源中指定的 URI 配置相關聯的通訊協定使用的預設方法`address`參數。 以非同步方式使用從執行緒集區的 自動配置的執行緒資源下載資料。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
 **請注意**應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將具有指定之 URI 的資源下載指本機檔案。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFile(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As String, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(System::String ^ address, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要從中下載資料的 URI。</param>
        <param name="fileName">要接收資料的本機檔案名稱。</param>
        <summary>將具有指定之 URI 的資源下載指本機檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.DownloadFile%2A>方法會下載到本機檔案資料中所指定的 URI 從`address`參數。 這個方法會封鎖下載資源時。 若要下載的資源，並繼續等待伺服器回應時執行，請使用其中一種<xref:System.Net.WebClient.DownloadFileAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 在中介層應用程式，例如 ASP.NET 頁面上，使用這個方法時您會收到錯誤，如果應用程式執行所在的帳戶沒有存取檔案的權限。  
  
   
  
## Examples  
 下列程式碼範例會下載檔案，以從http://www.contoso.com至本機硬碟。  
  
 [!code-cpp[WebClient_DownloadFile#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_DownloadFile/CPP/webclient_downloadfile.cpp#1)]
 [!code-csharp[WebClient_DownloadFile#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_DownloadFile/CS/webclient_downloadfile.cs#1)]
 [!code-vb[WebClient_DownloadFile#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_DownloadFile/VB/webclient_downloadfile.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="filename" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。  -或-  檔案不存在。  -或- 下載資料時發生錯誤。</exception>
        <exception cref="T:System.NotSupportedException">已經在多個執行緒上同時呼叫此方法。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">將檔案寫入<paramref name="fileName" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFile(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFile(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFile (address As Uri, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFile(Uri ^ address, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">指定為 <see cref="T:System.String" /> 的 URI，可以從其中下載資料。</param>
        <param name="fileName">要接收資料的本機檔案名稱。</param>
        <summary>將具有指定之 URI 的資源下載指本機檔案。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.DownloadFile%2A>方法會下載到本機檔案資料中所指定的 URI 從`address`參數。 這個方法會封鎖下載資源時。 若要下載的資源，並繼續等待伺服器回應時執行，請使用其中一種<xref:System.Net.WebClient.DownloadFileAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 在中介層應用程式，例如 ASP.NET 頁面上，使用這個方法時您會收到錯誤，如果應用程式執行所在的帳戶沒有存取檔案的權限。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="filename" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。  -或-  檔案不存在。  -或-  下載資料時發生錯誤。</exception>
        <exception cref="T:System.NotSupportedException">已經在多個執行緒上同時呼叫此方法。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">將檔案寫入<paramref name="fileName" />。 關聯的列舉型別：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadFileAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以非同步作業的方式將指定的資源載入至本機檔案，並傳回工作物件。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadFileAsync">
      <MemberSignature Language="C#" Value="public void DownloadFileAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFileAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFileAsync (address As Uri, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFileAsync(Uri ^ address, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要下載之資源的 URI。</param>
        <param name="fileName">要置於本機電腦之檔案的名稱。</param>
        <summary>將具有指定之 URI 的資源下載至本機檔案。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會下載的資源中所指定的 URI`address`參數。 下載的檔案下載成功完成時，名為`fileName`本機電腦上。 使用執行緒集區的自動配置的執行緒資源，以非同步方式下載檔案。 若要接收通知，檔案時，加入事件處理常式<xref:System.Net.WebClient.DownloadFileCompleted>事件。  
  
 這個方法不會在下載的資源時封鎖呼叫執行緒。 若要封鎖等候下載完成時，使用其中一種<xref:System.Net.WebClient.DownloadFile%2A>方法。  
  
 您可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法來取消尚未完成的非同步作業。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未指定絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 當 ASP.NET 網頁中使用此方法，您會收到錯誤，如果執行該網頁的帳戶沒有存取本機檔案的權限。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="fileName" /> 指定的本機檔案正由其他執行緒使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileAsync">
      <MemberSignature Language="C#" Value="public void DownloadFileAsync (Uri address, string fileName, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFileAsync(class System.Uri address, string fileName, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadFileAsync (address As Uri, fileName As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadFileAsync(Uri ^ address, System::String ^ fileName, System::Object ^ userToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">要下載之資源的 URI。</param>
        <param name="fileName">要置於本機電腦之檔案的名稱。</param>
        <param name="userToken">使用者定義的物件，這個物件會在非同步作業完成時傳遞至叫用的方法。</param>
        <summary>將具有指定之 URI 的資源下載至本機檔案。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會下載的資源中所指定的 URI`address`參數。 下載的檔案下載成功完成時，名為`fileName`本機電腦上。 使用執行緒集區的自動配置的執行緒資源，以非同步方式下載檔案。 若要接收通知，檔案時，加入事件處理常式<xref:System.Net.WebClient.DownloadFileCompleted>事件。  
  
 這個方法不會在下載的資源時封鎖呼叫執行緒。 若要封鎖等候下載完成時，使用其中一種<xref:System.Net.WebClient.DownloadFile%2A>方法。  
  
 您可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法來取消尚未完成的非同步作業。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未指定絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 當 ASP.NET 網頁中使用此方法，您會收到錯誤，如果執行該網頁的帳戶沒有存取本機檔案的權限。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="fileName" /> 指定的本機檔案正由其他執行緒使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler DownloadFileCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler DownloadFileCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadFileCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DownloadFileCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ DownloadFileCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在非同步檔案下載作業完成時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次非同步檔案下載作業完成時，會引發這個事件。 藉由呼叫啟動非同步檔案下載<xref:System.Net.WebClient.DownloadFileAsync%2A>方法。  
  
 <xref:System.ComponentModel.AsyncCompletedEventHandler>是針對此事件的委派。 <xref:System.ComponentModel.AsyncCompletedEventArgs>類別提供的事件資料的事件處理常式。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列程式碼範例將示範如何設定這個事件的事件處理常式。  
  
 [!code-cpp[NCLWebClientAsync#19](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#19)]
 [!code-csharp[NCLWebClientAsync#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#19)]
 [!code-vb[NCLWebClientAsync#19](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadFileTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用工作物件，以非同步作業的方式將指定的資源載入至本機檔案。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DownloadFileTaskAsync (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DownloadFileTaskAsync(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadFileTaskAsync (address As String, fileName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ DownloadFileTaskAsync(System::String ^ address, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要下載之資源的 URI。</param>
        <param name="fileName">要置於本機電腦之檔案的名稱。</param>
        <summary>使用工作物件，以非同步作業的方式將指定的資源載入至本機檔案。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task" />。  工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task>資料資源下載完成後，物件會完成。  
  
 這個方法會下載的資源中所指定的 URI`address`參數。 下載的檔案下載成功完成時，名為`fileName`本機電腦上。 使用執行緒集區的自動配置的執行緒資源，以非同步方式下載檔案。  
  
 您可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法來取消尚未完成的非同步作業。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未指定絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 當 ASP.NET 網頁中使用此方法，您會收到錯誤，如果執行該網頁的帳戶沒有存取本機檔案的權限。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="fileName" /> 指定的本機檔案正由其他執行緒使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DownloadFileTaskAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DownloadFileTaskAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadFileTaskAsync (address As Uri, fileName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ DownloadFileTaskAsync(Uri ^ address, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要下載之資源的 URI。</param>
        <param name="fileName">要置於本機電腦之檔案的名稱。</param>
        <summary>使用工作物件，以非同步作業的方式將指定的資源載入至本機檔案。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task" />。  工作物件，表示非同步作業。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task>資料資源下載完成後，物件會完成。  
  
 這個方法會下載的資源中所指定的 URI`address`參數。 下載的檔案下載成功完成時，名為`fileName`本機電腦上。 使用執行緒集區的自動配置的執行緒資源，以非同步方式下載檔案。  
  
 您可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法來取消尚未完成的非同步作業。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未指定絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 當 ASP.NET 網頁中使用此方法，您會收到錯誤，如果執行該網頁的帳戶沒有存取本機檔案的權限。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="fileName" /> 指定的本機檔案正由其他執行緒使用。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadProgressChanged">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadProgressChangedEventHandler DownloadProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadProgressChangedEventHandler DownloadProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadProgressChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DownloadProgressChanged As DownloadProgressChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::DownloadProgressChangedEventHandler ^ DownloadProgressChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在非同步下載作業成功傳輸部分或全部資料時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次非同步下載有進展時，會引發這個事件。 使用下列方法之一啟動下載時，會引發這個事件。  
  
|方法|描述|  
|------------|-----------------|  
|<xref:System.Net.WebClient.DownloadDataAsync%2A>|從資源下載資料，並傳回<xref:System.Byte>陣列，而不會封鎖呼叫執行緒。|  
|<xref:System.Net.WebClient.DownloadFileAsync%2A>|資料從資源下載到本機檔案，而不會封鎖呼叫執行緒。|  
|<xref:System.Net.WebClient.OpenReadAsync%2A>|在資源上，從傳回的資料，而不會封鎖呼叫執行緒。|  
  
 <xref:System.Net.DownloadProgressChangedEventHandler>是針對此事件的委派。 <xref:System.Net.DownloadProgressChangedEventArgs>類別提供的事件資料的事件處理常式。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
> [!NOTE]
>  被動 FTP 檔案傳輸永遠會顯示進度百分比為零，因為伺服器未傳送的檔案大小。 若要顯示進度，您可以變更 FTP 連線為作用中覆寫<xref:System.Net.WebClient.GetWebRequest%2A>虛擬方法：  
  
```csharp  
internal class MyWebClient : WebClient
{  
    protected override WebRequest GetWebRequest(Uri address)
    {  
        FtpWebRequest req = (FtpWebRequest)base.GetWebRequest(address);  
        req.UsePassive = false;  
        return req;  
    }  
}  
```  
  
   
  
## Examples  
 下列程式碼範例將示範如何設定這個事件的事件處理常式。  
  
 [!code-cpp[NCLWebClientAsync#19](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#19)]
 [!code-csharp[NCLWebClientAsync#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#19)]
 [!code-vb[NCLWebClientAsync#19](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#19)]  
  
 下列程式碼範例顯示這個事件處理常式的實作。  
  
 [!code-cpp[NCLWebClientAsync#42](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#42)]
 [!code-csharp[NCLWebClientAsync#42](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#42)]
 [!code-vb[NCLWebClientAsync#42](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadString">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>下載要求的資源做為 <see cref="T:System.String" />。 要下載的資源可能會指定為包含 URI 的 <see cref="T:System.String" /> 或 <see cref="T:System.Uri" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadString">
      <MemberSignature Language="C#" Value="public string DownloadString (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string DownloadString(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadString (address As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ DownloadString(System::String ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.String" />，包含要下載的 URI。</param>
        <summary>下載要求的資源做為 <see cref="T:System.String" />。 將要下載的資源指定為包含 URI 的 <see cref="T:System.String" />。</summary>
        <returns>包含要求之資源的 <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會擷取指定的資源。 它的資源下載之後，會使用此方法中指定的編碼<xref:System.Net.WebClient.Encoding%2A>要轉換之資源屬性<xref:System.String>。 這個方法會封鎖下載資源時。 若要下載的資源，並繼續等待伺服器回應時執行，請使用其中一種<xref:System.Net.WebClient.DownloadStringAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個方法。  
  
 [!code-cpp[NCLWebClientAsync#25](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#25)]
 [!code-csharp[NCLWebClientAsync#25](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#25)]
 [!code-vb[NCLWebClientAsync#25](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。</exception>
        <exception cref="T:System.NotSupportedException">已經在多個執行緒上同時呼叫此方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadString">
      <MemberSignature Language="C#" Value="public string DownloadString (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string DownloadString(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadString(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadString (address As Uri) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ DownloadString(Uri ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Uri" /> 物件，包含要下載的 URI。</param>
        <summary>下載要求的資源做為 <see cref="T:System.String" />。 將要下載的資源指定為 <see cref="T:System.Uri" />。</summary>
        <returns>包含要求之資源的 <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會擷取指定的資源。 它的資源下載之後，會使用此方法中指定的編碼<xref:System.Net.WebClient.Encoding%2A>要轉換之資源屬性<xref:System.String>。 這個方法會封鎖下載資源時。 若要下載的資源，並繼續等待伺服器回應時執行，請使用其中一種<xref:System.Net.WebClient.DownloadStringAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。</exception>
        <exception cref="T:System.NotSupportedException">已經在多個執行緒上同時呼叫此方法。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadStringAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>下載指定的資源做為 <see cref="T:System.String" /> 或 <see cref="T:System.Uri" />。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadStringAsync">
      <MemberSignature Language="C#" Value="public void DownloadStringAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadStringAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadStringAsync (address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadStringAsync(Uri ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Uri" />，包含要下載的 URI。</param>
        <summary>下載指定的資源做為 <see cref="T:System.Uri" />。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用執行緒集區的自動配置的執行緒資源，以非同步方式下載的資源。  
  
 下載之後資源，這個方法會使用在指定的編碼方式<xref:System.Net.WebClient.Encoding%2A>要轉換之資源屬性<xref:System.String>。 這個方法不會封鎖呼叫執行緒時下載資源。 若要下載的資源和封鎖，等待伺服器回應時，使用<xref:System.Net.WebClient.DownloadString%2A>方法。 當下載完成時，<xref:System.Net.WebClient.DownloadStringCompleted>就會引發事件。 您的應用程式必須處理這個事件來接收通知。 於下載的字串位於<xref:System.Net.DownloadStringCompletedEventArgs.Result%2A>屬性。  
  
 您可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法來取消尚未完成的非同步作業。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringAsync">
      <MemberSignature Language="C#" Value="public void DownloadStringAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadStringAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DownloadStringAsync (address As Uri, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DownloadStringAsync(Uri ^ address, System::Object ^ userToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Uri" />，包含要下載的 URI。</param>
        <param name="userToken">使用者定義的物件，這個物件會在非同步作業完成時傳遞至叫用的方法。</param>
        <summary>將指定的字串下載到指定的資源。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用執行緒集區的自動配置的執行緒資源，以非同步方式下載的資源。  
  
 下載之後資源，這個方法會使用在指定的編碼方式<xref:System.Net.WebClient.Encoding%2A>要轉換之資源屬性<xref:System.String>。 這個方法不會封鎖呼叫執行緒時下載資源。 若要下載的資源和封鎖，等待伺服器回應時，使用<xref:System.Net.WebClient.DownloadString%2A>方法。 當下載完成時，<xref:System.Net.WebClient.DownloadStringCompleted>就會引發事件。 您的應用程式必須處理這個事件來接收通知。 於下載的字串位於<xref:System.Net.DownloadStringCompletedEventArgs.Result%2A>屬性。  
  
 您可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法來取消尚未完成的非同步作業。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadStringCompletedEventHandler DownloadStringCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadStringCompletedEventHandler DownloadStringCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadStringCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DownloadStringCompleted As DownloadStringCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::DownloadStringCompletedEventHandler ^ DownloadStringCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadStringCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在非同步資源下載作業完成時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次非同步作業以將資源當做字串下載完成時，會引發這個事件。 這些作業會藉由呼叫啟動<xref:System.Net.WebClient.DownloadStringAsync%2A>方法。  
  
 <xref:System.Net.DownloadStringCompletedEventHandler>是針對此事件的委派。 <xref:System.Net.DownloadStringCompletedEventArgs>類別提供的事件資料的事件處理常式。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列程式碼範例將示範如何設定這個事件的事件處理常式。  
  
 [!code-cpp[NCLWebClientAsync#28](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#28)]
 [!code-csharp[NCLWebClientAsync#28](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#28)]
 [!code-vb[NCLWebClientAsync#28](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DownloadStringTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用工作物件，以非同步作業的方式，從指定的 URI 下載資源做為 <see cref="T:System.String" />。  這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DownloadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; DownloadStringTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadStringTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringTaskAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadStringTaskAsync (address As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ DownloadStringTaskAsync(System::String ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要下載之資源的 URI。</param>
        <summary>使用工作物件，以非同步作業的方式，從指定的 URI 下載資源做為 <see cref="T:System.String" />。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含已下載之資源的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>資料資源下載完成後，物件會完成。  使用執行緒集區的自動配置的執行緒資源，以非同步方式下載的資源。  
  
 下載之後資源，這個方法會使用在指定的編碼方式<xref:System.Net.WebClient.Encoding%2A>要轉換之資源屬性<xref:System.String>。 這個方法不會封鎖呼叫執行緒時下載資源。  
  
 您可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法來取消尚未完成的非同步作業。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
 在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; DownloadStringTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadStringTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringTaskAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function DownloadStringTaskAsync (address As Uri) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ DownloadStringTaskAsync(Uri ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">要下載之資源的 URI。</param>
        <summary>使用工作物件，以非同步作業的方式，從指定的 URI 下載資源做為 <see cref="T:System.String" />。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含已下載之資源的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>資料資源下載完成後，物件會完成。 使用執行緒集區的自動配置的執行緒資源，以非同步方式下載的資源。  
  
 下載之後資源，這個方法會使用在指定的編碼方式<xref:System.Net.WebClient.Encoding%2A>要轉換之資源屬性<xref:System.String>。 這個方法不會封鎖呼叫執行緒時下載資源。  
  
 您可以使用<xref:System.Net.WebClient.CancelAsync%2A>方法來取消尚未完成的非同步作業。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
 在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得和設定用於上傳和下載字串的 <see cref="T:System.Text.Encoding" />。</summary>
        <value>
          <see cref="T:System.Text.Encoding" />，用於編碼字串。 這個屬性的預設值為 <see cref="P:System.Text.Encoding.Default" /> 傳回的編碼方式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadString%2A>和<xref:System.Net.WebClient.UploadStringAsync%2A>方法使用這個屬性來指定將字串轉換為<xref:System.Byte>之前上傳之字串的陣列。 如需詳細資訊，請參閱<xref:System.Text.Encoding.GetBytes%2A>方法。  
  
 字串，並使用下載<xref:System.Net.WebClient.DownloadString%2A>或<xref:System.Net.WebClient.DownloadStringAsync%2A>方法<xref:System.Net.WebClient>使用<xref:System.Text.Encoding>傳回由此轉換下載<xref:System.Byte>成字串陣列。 如需詳細資訊，請參閱<xref:System.Text.Encoding.GetString%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例將示範如何設定這個屬性的值。  
  
 [!code-cpp[NCLWebClientAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#1)]
 [!code-csharp[NCLWebClientAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#1)]
 [!code-vb[NCLWebClientAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebRequest GetWebRequest (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebRequest(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWebRequest (address As Uri) As WebRequest" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Net::WebRequest ^ GetWebRequest(Uri ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Uri" />，識別所要求的資源。</param>
        <summary>傳回指定之資源的 <see cref="T:System.Net.WebRequest" /> 物件。</summary>
        <returns>指定之資源的新 <see cref="T:System.Net.WebRequest" /> 物件。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會複製現有<xref:System.Net.WebClient.Headers%2A>， <xref:System.Net.WebClient.Credentials%2A>，以及要新建方法<xref:System.Net.WebRequest>物件。  
  
 可以呼叫這個方法，只能由繼承自類別<xref:System.Net.WebClient>。 它可讓繼承者存取基礎<xref:System.Net.WebRequest>物件。 在衍生的類別應該呼叫基底類別實作<xref:System.Net.WebClient.GetWebRequest%2A>以確保此方法可以正常運作。  
  
   
  
## Examples  
 下列程式碼範例示範衍生自的類別可以自訂此方法的實作<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#1)]
 [!code-csharp[NCLCustomWebClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetWebResponse">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回指定之 <see cref="T:System.Net.WebResponse" /> 的 <see cref="T:System.Net.WebRequest" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetWebResponse">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebResponse GetWebResponse(class System.Net.WebRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWebResponse (request As WebRequest) As WebResponse" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Net::WebResponse ^ GetWebResponse(System::Net::WebRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
      </Parameters>
      <Docs>
        <param name="request">
          <see cref="T:System.Net.WebRequest" />，用於取得回應。</param>
        <summary>傳回指定之 <see cref="T:System.Net.WebResponse" /> 的 <see cref="T:System.Net.WebRequest" />。</summary>
        <returns>
          <see cref="T:System.Net.WebResponse" />，包含指定之 <see cref="T:System.Net.WebRequest" /> 的回應。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法所傳回的物件透過呼叫<xref:System.Net.WebRequest.GetResponse%2A>方法上指定<xref:System.Net.WebRequest>物件。  
  
 可以呼叫這個方法，只能由繼承自類別<xref:System.Net.WebClient>。 它可讓繼承者存取基礎<xref:System.Net.WebResponse>物件。  
  
   
  
## Examples  
 下列程式碼範例示範衍生自的類別可以自訂此方法的實作<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#2)]
 [!code-csharp[NCLCustomWebClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebResponse">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request, IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebResponse GetWebResponse(class System.Net.WebRequest request, class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetWebResponse (request As WebRequest, result As IAsyncResult) As WebResponse" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Net::WebResponse ^ GetWebResponse(System::Net::WebRequest ^ request, IAsyncResult ^ result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="request">
          <see cref="T:System.Net.WebRequest" />，用於取得回應。</param>
        <param name="result">
          <see cref="T:System.IAsyncResult" /> 物件，是在之前呼叫 <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 時取得的。</param>
        <summary>使用指定的 <see cref="T:System.Net.WebResponse" /> 傳回指定之 <see cref="T:System.Net.WebRequest" /> 的 <see cref="T:System.IAsyncResult" />。</summary>
        <returns>
          <see cref="T:System.Net.WebResponse" />，包含指定之 <see cref="T:System.Net.WebRequest" /> 的回應。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法所傳回的物件透過呼叫<xref:System.Net.WebRequest.EndGetResponse%2A>方法上指定<xref:System.Net.WebRequest>物件。  
  
 可以呼叫這個方法，只能由繼承自類別<xref:System.Net.WebClient>。 它可讓繼承者存取基礎<xref:System.Net.WebResponse>物件。  
  
   
  
## Examples  
 下列程式碼範例示範衍生自的類別可以自訂此方法的實作<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#3)]
 [!code-csharp[NCLCustomWebClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public System.Net.WebHeaderCollection Headers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Headers" />
      <MemberSignature Language="VB.NET" Value="Public Property Headers As WebHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::WebHeaderCollection ^ Headers { System::Net::WebHeaderCollection ^ get(); void set(System::Net::WebHeaderCollection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與要求相關聯標頭名稱/值組合的集合。</summary>
        <value>
          <see cref="T:System.Net.WebHeaderCollection" />，包含與這個要求相關聯的標頭名稱/值組合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.Headers%2A>屬性包含<xref:System.Net.WebHeaderCollection>包含通訊協定標頭的執行個體，<xref:System.Net.WebClient>與要求一起傳送。  
  
 某些常見的標頭會被視為限制和保護的系統和無法設定或變更在<xref:System.Net.WebHeaderCollection>物件。 任何嘗試這些限制的標頭中的其中一個設定<xref:System.Net.WebHeaderCollection>物件相關聯<xref:System.Net.WebClient>物件將會擲回例外狀況之後，當嘗試傳送<xref:System.Net.WebClient>要求。  
  
 系統所保護的受限制標頭包含，但不是限於下列：  
  
-   日期  
  
-   主機  
  
 此外，某些其他標頭也會限制使用時<xref:System.Net.WebClient>物件。 這些限制的標頭包含，但不是限於下列：  
  
-   接受  
  
-   連線  
  
-   內容長度  
  
-   預期 (當此值設定為"100-繼續 」  
  
-   如果修改自  
  
-   範圍  
  
-   傳輸編碼  
  
 <xref:System.Net.HttpWebRequest>類別具有上述的標頭部分，將設定的屬性。 如果是很重要的應用程式設定這些標頭，然後在<xref:System.Net.HttpWebRequest>應該使用類別，而不是<xref:System.Net.WebRequest>類別。  
  
 您不應該假設的標頭值會維持不變，因為 Web 伺服器和快取可能會變更或加入至 Web 要求的標頭。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Net.WebClient.Headers%2A>集合來設定 HTTP`Content-Type`標頭`application/x-www-form-urlencoded,`通知表單資料的伺服器連接到，使用 post 要求。  
  
 [!code-cpp[WebClient_UpLoadData_Headers#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CPP/webclient_uploaddata_headers.cpp#2)]
 [!code-csharp[WebClient_UpLoadData_Headers#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CS/webclient_uploaddata_headers.cs#2)]
 [!code-vb[WebClient_UpLoadData_Headers#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/VB/webclient_uploaddata_headers.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.WebRequest.Headers" />
        <altmember cref="P:System.Net.HttpWebRequest.Headers" />
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得 Web 要求是否仍在進行中的資訊。</summary>
        <value>如果 Web 要求仍在進行中，則為 <see langword="true" />，否則為 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadDataCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadDataCompleted (System.Net.DownloadDataCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadDataCompleted(class System.Net.DownloadDataCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDownloadDataCompleted (e As DownloadDataCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDownloadDataCompleted(System::Net::DownloadDataCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadDataCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Net.DownloadDataCompletedEventArgs" /> 物件，包含事件資料。</param>
        <summary>引發 <see cref="E:System.Net.WebClient.DownloadDataCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼承自這個類別的類別可以覆寫此方法，以執行其他工作時<xref:System.Net.WebClient.DownloadDataCompleted>就會發生事件。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)  
  
 <xref:System.Net.WebClient.OnDownloadDataCompleted%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例示範衍生自的類別可以自訂此方法的實作<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#4)]
 [!code-csharp[NCLCustomWebClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadFileCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadFileCompleted (System.ComponentModel.AsyncCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadFileCompleted(class System.ComponentModel.AsyncCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDownloadFileCompleted (e As AsyncCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDownloadFileCompleted(System::ComponentModel::AsyncCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.AsyncCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 物件，包含事件資料。</param>
        <summary>引發 <see cref="E:System.Net.WebClient.DownloadFileCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼承自這個類別的類別可以覆寫此方法，以執行其他工作時<xref:System.Net.WebClient.DownloadFileCompleted>就會發生事件。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnDownloadFileCompleted%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例示範衍生自的類別可以自訂此方法的實作<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#5)]
 [!code-csharp[NCLCustomWebClient#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadProgressChanged (System.Net.DownloadProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadProgressChanged(class System.Net.DownloadProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDownloadProgressChanged (e As DownloadProgressChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDownloadProgressChanged(System::Net::DownloadProgressChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Net.DownloadProgressChangedEventArgs" /> 物件，包含事件資料。</param>
        <summary>引發 <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼承自這個類別的類別可以覆寫此方法，以執行其他工作時<xref:System.Net.WebClient.DownloadProgressChanged>就會發生事件。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnDownloadProgressChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例示範衍生自的類別可以自訂此方法的實作<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#12)]
 [!code-csharp[NCLCustomWebClient#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadStringCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadStringCompleted (System.Net.DownloadStringCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadStringCompleted(class System.Net.DownloadStringCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDownloadStringCompleted (e As DownloadStringCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDownloadStringCompleted(System::Net::DownloadStringCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadStringCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Net.DownloadStringCompletedEventArgs" /> 物件，包含事件資料。</param>
        <summary>引發 <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼承自這個類別的類別可以覆寫此方法，以執行其他工作時<xref:System.Net.WebClient.DownloadStringCompleted>就會發生事件。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnDownloadStringCompleted%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例示範衍生自的類別可以自訂此方法的實作<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#6)]
 [!code-csharp[NCLCustomWebClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnOpenReadCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnOpenReadCompleted (System.Net.OpenReadCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOpenReadCompleted(class System.Net.OpenReadCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnOpenReadCompleted (e As OpenReadCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnOpenReadCompleted(System::Net::OpenReadCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.OpenReadCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Net.OpenReadCompletedEventArgs" /> 物件，包含事件資料。</param>
        <summary>引發 <see cref="E:System.Net.WebClient.OpenReadCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼承自這個類別的類別可以覆寫此方法，以執行其他工作時<xref:System.Net.WebClient.OpenReadCompleted>就會發生事件。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnOpenReadCompleted%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例示範衍生自的類別可以自訂此方法的實作<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#7)]
 [!code-csharp[NCLCustomWebClient#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#7)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnOpenWriteCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnOpenWriteCompleted (System.Net.OpenWriteCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOpenWriteCompleted(class System.Net.OpenWriteCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnOpenWriteCompleted (e As OpenWriteCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnOpenWriteCompleted(System::Net::OpenWriteCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.OpenWriteCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Net.OpenWriteCompletedEventArgs" /> 物件，包含事件資料。</param>
        <summary>引發 <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼承自這個類別的類別可以覆寫此方法，以執行其他工作時<xref:System.Net.WebClient.OpenWriteCompleted>就會發生事件。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnOpenWriteCompleted%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例示範衍生自的類別可以自訂此方法的實作<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#8](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#8)]
 [!code-csharp[NCLCustomWebClient#8](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#8)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadDataCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadDataCompleted (System.Net.UploadDataCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadDataCompleted(class System.Net.UploadDataCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadDataCompleted (e As UploadDataCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadDataCompleted(System::Net::UploadDataCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadDataCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Net.UploadDataCompletedEventArgs" /> 物件，包含事件資料。</param>
        <summary>引發 <see cref="E:System.Net.WebClient.UploadDataCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼承自這個類別的類別可以覆寫此方法，以執行其他工作時<xref:System.Net.WebClient.UploadDataCompleted>就會發生事件。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnUploadDataCompleted%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例示範衍生自的類別可以自訂此方法的實作<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#9)]
 [!code-csharp[NCLCustomWebClient#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadFileCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadFileCompleted (System.Net.UploadFileCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadFileCompleted(class System.Net.UploadFileCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadFileCompleted (e As UploadFileCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadFileCompleted(System::Net::UploadFileCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadFileCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Net.UploadFileCompletedEventArgs" /> 物件，包含事件資料。</param>
        <summary>引發 <see cref="E:System.Net.WebClient.UploadFileCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼承自這個類別的類別可以覆寫此方法，以執行其他工作時<xref:System.Net.WebClient.UploadFileCompleted>就會發生事件。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnUploadFileCompleted%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例示範衍生自的類別可以自訂此方法的實作<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#10)]
 [!code-csharp[NCLCustomWebClient#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#10)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadProgressChanged (System.Net.UploadProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadProgressChanged(class System.Net.UploadProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadProgressChanged (e As UploadProgressChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadProgressChanged(System::Net::UploadProgressChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Net.UploadProgressChangedEventArgs" /> 物件，包含事件資料。</param>
        <summary>引發 <see cref="E:System.Net.WebClient.UploadProgressChanged" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼承自這個類別的類別可以覆寫此方法，以執行其他工作時<xref:System.Net.WebClient.UploadProgressChanged>就會發生事件。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnUploadProgressChanged%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例示範衍生自的類別可以自訂此方法的實作<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#13](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#13)]
 [!code-csharp[NCLCustomWebClient#13](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#13)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadStringCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadStringCompleted (System.Net.UploadStringCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadStringCompleted(class System.Net.UploadStringCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadStringCompleted (e As UploadStringCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadStringCompleted(System::Net::UploadStringCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadStringCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Net.UploadStringCompletedEventArgs" /> 物件，包含事件資料。</param>
        <summary>引發 <see cref="E:System.Net.WebClient.UploadStringCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼承自這個類別的類別可以覆寫此方法，以執行其他工作時<xref:System.Net.WebClient.UploadStringCompleted>就會發生事件。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnUploadStringCompleted%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例示範衍生自的類別可以自訂此方法的實作<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#11)]
 [!code-csharp[NCLCustomWebClient#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadValuesCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadValuesCompleted (System.Net.UploadValuesCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadValuesCompleted(class System.Net.UploadValuesCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnUploadValuesCompleted (e As UploadValuesCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnUploadValuesCompleted(System::Net::UploadValuesCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadValuesCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Net.UploadValuesCompletedEventArgs" /> 物件，包含事件資料。</param>
        <summary>引發 <see cref="E:System.Net.WebClient.UploadValuesCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 繼承自這個類別的類別可以覆寫此方法，以執行其他工作時<xref:System.Net.WebClient.UploadValuesCompleted>就會發生事件。  
  
 引發事件會透過委派叫用此事件處理常式。 如需詳細資訊，請參閱[處理和引發事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.WebClient.OnUploadValuesCompleted%2A> 方法也允許衍生類別處理事件，而不用附加委派。 這是在衍生類別中處理事件的慣用技巧。  
  
   
  
## Examples  
 下列程式碼範例示範衍生自的類別可以自訂此方法的實作<xref:System.Net.WebClient>。  
  
 [!code-cpp[NCLCustomWebClient#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#14)]
 [!code-csharp[NCLCustomWebClient#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#14)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在覆寫<see cref="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" />在衍生類別中，請務必呼叫基底類別的<see cref="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" />方法，使已註冊的委派能接收到事件。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnWriteStreamClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnWriteStreamClosed (System.Net.WriteStreamClosedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWriteStreamClosed(class System.Net.WriteStreamClosedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnWriteStreamClosed (e As WriteStreamClosedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnWriteStreamClosed(System::Net::WriteStreamClosedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.WriteStreamClosedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Net.WriteStreamClosedEventArgs" /> 物件，包含事件資料。</param>
        <summary>引發 <see cref="E:System.Net.WebClient.WriteStreamClosed" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenRead">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開啟可讀取的資料流，以用於從具有指定之 URI 的資源下載的資料。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenRead (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenRead(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenRead(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenRead (address As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenRead(System::String ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">指定為 <see cref="T:System.String" /> 的 URI，可以從其中下載資料。</param>
        <summary>開啟可讀取的資料流，以用於從具有指定為 <see cref="T:System.String" /> 之 URI 的資源下載的資料。</summary>
        <returns>
          <see cref="T:System.IO.Stream" />，用來從資源讀取資料。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.OpenRead%2A>方法會建立<xref:System.IO.Stream>用來讀取所指定之資源的內容執行個體`address`參數。 這個方法會封鎖在開啟資料流時。 若要繼續執行等候資料流時，使用其中一種<xref:System.Net.WebClient.OpenReadAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是`null`，它會附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  您必須呼叫<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>完成<xref:System.IO.Stream>若要避免系統資源不足。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例會開啟所識別的資源`uriString`和系統主控台上顯示結果。 請注意，<xref:System.IO.Stream>傳回<xref:System.Net.WebClient.OpenRead%2A>在讀取資料時，已關閉。  
  
 [!code-cpp[WebClient_OpenRead#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenRead/CPP/webclient_openread.cpp#1)]
 [!code-csharp[WebClient_OpenRead#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenRead/CS/webclient_openread.cs#1)]
 [!code-vb[WebClient_OpenRead#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenRead/VB/webclient_openread.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資料時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenRead (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenRead(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenRead(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenRead (address As Uri) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenRead(Uri ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">指定為 <see cref="T:System.Uri" /> 的 URI，可以從其中下載資料。</param>
        <summary>開啟可讀取的資料流，以用於從具有指定為 <see cref="T:System.Uri" /> 之 URI 的資源下載的資料。</summary>
        <returns>
          <see cref="T:System.IO.Stream" />，用來從資源讀取資料。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.OpenRead%2A>方法會建立<xref:System.IO.Stream>用來讀取所指定之資源的內容執行個體`address`參數。 這個方法會封鎖在開啟資料流時。 若要繼續執行等候資料流時，使用其中一種<xref:System.Net.WebClient.OpenReadAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是`null`，它會附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  您必須呼叫<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>完成<xref:System.IO.Stream>若要避免系統資源不足。  
  
 **請注意**應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  下載資料時發生錯誤。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenReadAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開啟包含指定之資源的可讀取資料流。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenReadAsync">
      <MemberSignature Language="C#" Value="public void OpenReadAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenReadAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenReadAsync (address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenReadAsync(Uri ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">要擷取之資源的 URI。</param>
        <summary>開啟包含指定之資源的可讀取資料流。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會擷取<xref:System.IO.Stream>用來存取指定的資源執行個體`address`參數。 使用自動配置的執行緒資源，從執行緒集區取得資料流。 若要接收通知，資料流時，加入事件處理常式<xref:System.Net.WebClient.OpenReadCompleted>事件。  
  
> [!NOTE]
>  您必須呼叫<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>您已完成<xref:System.IO.Stream>若要避免系統資源不足。  
  
 開啟資料流時，這個方法不會不會封鎖呼叫執行緒。 若要封鎖等候資料流時，請使用<xref:System.Net.WebClient.OpenReadAsync%2A>方法。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未指定絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求之資源的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是`null`，它會附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和位址而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。  -或-  開啟資料流時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenReadAsync">
      <MemberSignature Language="C#" Value="public void OpenReadAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenReadAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenReadAsync (address As Uri, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenReadAsync(Uri ^ address, System::Object ^ userToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">要擷取之資源的 URI。</param>
        <param name="userToken">使用者定義的物件，這個物件會在非同步作業完成時傳遞至叫用的方法。</param>
        <summary>開啟包含指定之資源的可讀取資料流。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會擷取<xref:System.IO.Stream>用來存取指定的資源執行個體`address`參數。 使用自動配置的執行緒資源，從執行緒集區取得資料流。 若要接收通知，資料流時，加入事件處理常式<xref:System.Net.WebClient.OpenReadCompleted>事件。  
  
> [!NOTE]
>  您必須呼叫<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>您已完成<xref:System.IO.Stream>若要避免系統資源不足。  
  
 開啟資料流時，這個方法不會不會封鎖呼叫執行緒。 若要封鎖等候資料流時，請使用<xref:System.Net.WebClient.OpenRead%2A>方法。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未指定絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求之資源的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是`null`，它會附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和位址而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。  -或-  開啟資料流時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenReadCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.OpenReadCompletedEventHandler OpenReadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.OpenReadCompletedEventHandler OpenReadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.OpenReadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event OpenReadCompleted As OpenReadCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::OpenReadCompletedEventHandler ^ OpenReadCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.OpenReadCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在開啟包含資源之資料流的非同步作業完成時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次開啟包含資源資料流的非同步作業完成時，會引發這個事件。 這些作業會藉由呼叫啟動<xref:System.Net.WebClient.OpenReadAsync%2A>方法。  
  
 <xref:System.Net.OpenReadCompletedEventHandler>是針對此事件的委派。 <xref:System.Net.OpenReadCompletedEventArgs>類別提供的事件資料的事件處理常式。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列程式碼範例將示範如何設定這個事件的事件處理常式。  
  
 [!code-cpp[NCLWebClientAsync#30](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#30)]
 [!code-csharp[NCLWebClientAsync#30](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#30)]
 [!code-vb[NCLWebClientAsync#30](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenReadTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用工作物件，以非同步作業的方式開啟包含指定之資源的可讀取資料流。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenReadTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenReadTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenReadTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadTaskAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenReadTaskAsync (address As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenReadTaskAsync(System::String ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要擷取之資源的 URI。</param>
        <summary>使用工作物件，以非同步作業的方式開啟包含指定之資源的可讀取資料流。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回用來從資源讀取資料的 <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>之後才會完成的物件已經開啟可讀取的資料流資料資源。 開啟資料流時，這個方法不會不會封鎖呼叫執行緒。  
  
 這個方法會擷取<xref:System.IO.Stream>用來存取指定的資源執行個體`address`參數。 使用自動配置的執行緒資源，從執行緒集區取得資料流。  
  
> [!NOTE]
>  您必須呼叫<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>您已完成<xref:System.IO.Stream>若要避免系統資源不足。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未指定絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求之資源的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是`null`，它會附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和位址而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。  -或-  開啟資料流時發生錯誤。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="OpenReadTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenReadTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenReadTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadTaskAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenReadTaskAsync (address As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenReadTaskAsync(Uri ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">要擷取之資源的 URI。</param>
        <summary>使用工作物件，以非同步作業的方式開啟包含指定之資源的可讀取資料流。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回用來從資源讀取資料的 <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>之後才會完成的物件已經開啟可讀取的資料流資料資源。 開啟資料流時，這個方法不會不會封鎖呼叫執行緒。  
  
 這個方法會擷取<xref:System.IO.Stream>用來存取指定的資源執行個體`address`參數。 使用自動配置的執行緒資源，從執行緒集區取得資料流。  
  
> [!NOTE]
>  您必須呼叫<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>您已完成<xref:System.IO.Stream>若要避免系統資源不足。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未指定絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求之資源的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是`null`，它會附加至`address`。  
  
 這個方法會使用 FTP 資源下載 RETR 命令。 HTTP 資源，會使用 GET 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和位址而形成的 URI 是無效的。  -或-  下載資源時發生錯誤。  -或-  開啟資料流時發生錯誤。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenWrite">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開啟資料流，用於將資料寫入至具有指定之 URI 的資源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWrite (address As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenWrite(System::String ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <summary>開啟資料流以將資料寫入至指定的資源。</summary>
        <returns>
          <see cref="T:System.IO.Stream" />，用來將資料寫入至資源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.OpenWrite%2A>方法會傳回用來將資料傳送給資源的可寫入資料流。 這個方法會封鎖在開啟資料流時。 若要繼續執行等候資料流時，使用其中一種<xref:System.Net.WebClient.OpenWriteAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例會從命令列讀取資料，並使用<xref:System.Net.WebClient.OpenWrite%2A>若要取得的資料寫入資料的資料流。 請注意，<xref:System.IO.Stream>傳回<xref:System.Net.WebClient.OpenWrite%2A>傳送資料之後關閉。  
  
 [!code-cpp[WebClient_OpenWrite2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenWrite2/CPP/webclient_openwrite2.cpp#1)]
 [!code-csharp[WebClient_OpenWrite2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenWrite2/CS/webclient_openwrite2.cs#1)]
 [!code-vb[WebClient_OpenWrite2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenWrite2/VB/webclient_openwrite2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWrite (address As Uri) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenWrite(Uri ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <summary>開啟資料流以將資料寫入至指定的資源。</summary>
        <returns>
          <see cref="T:System.IO.Stream" />，用來將資料寫入至資源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.OpenWrite%2A>方法會傳回用來將資料傳送給資源的可寫入資料流。 這個方法會封鎖在開啟資料流時。 若要繼續執行等候資料流時，使用其中一種<xref:System.Net.WebClient.OpenWriteAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (string address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(string address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWrite (address As String, method As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenWrite(System::String ^ address, System::String ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="method">傳送資料給資源所使用的方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <summary>使用指定的方法開啟資料流，以將資料寫入至指定的資源。</summary>
        <returns>
          <see cref="T:System.IO.Stream" />，用來將資料寫入至資源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.OpenWrite%2A>方法會傳回用來將資料傳送給資源的可寫入資料流。 基礎要求中指定的方法與`method`參數。 資料會傳送到伺服器時關閉資料流。 這個方法會封鎖在開啟資料流時。 若要繼續執行等候資料流時，使用其中一種<xref:System.Net.WebClient.OpenWriteAsync%2A>方法。  
  
 如果`method`參數會指定不了解伺服器基礎的通訊協定類別可讓您判斷發生何種狀況的方法。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未指定絕對位址，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例會從命令列讀取資料，並使用<xref:System.Net.WebClient.OpenWrite%2A>取得用來寫入資料的資料流。 請注意，<xref:System.IO.Stream>傳回<xref:System.Net.WebClient.OpenWrite%2A>必須關閉，以將資料傳送。  
  
 [!code-cpp[WebClient_OpenWrite#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenWrite/CPP/webclient_openwrite.cpp#1)]
 [!code-csharp[WebClient_OpenWrite#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenWrite/CS/webclient_openwrite.cs#1)]
 [!code-vb[WebClient_OpenWrite#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenWrite/VB/webclient_openwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWrite (address As Uri, method As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenWrite(Uri ^ address, System::String ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="method">傳送資料給資源所使用的方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <summary>使用指定的方法開啟資料流，以將資料寫入至指定的資源。</summary>
        <returns>
          <see cref="T:System.IO.Stream" />，用來將資料寫入至資源。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.OpenWrite%2A>方法會傳回用來將資料傳送給資源的可寫入資料流。 這個方法會封鎖在開啟資料流時。 若要繼續執行等候資料流時，使用其中一種<xref:System.Net.WebClient.OpenWriteAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenWriteAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>開啟資料流以將資料寫入至指定的資源。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenWriteAsync (address As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenWriteAsync(Uri ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <summary>開啟資料流以將資料寫入至指定的資源。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會擷取用來將資料傳送給資源的可寫入資料流。 資料流擷取使用自動配置的執行緒資源從執行緒集區。 若要接收通知，資料流時，加入事件處理常式<xref:System.Net.WebClient.OpenWriteCompleted>事件。 當您關閉資料流時，執行緒會封鎖，直到要求傳送至`address`和收到的回應。  
  
 這個方法不開啟資料流時封鎖呼叫執行緒。 若要封鎖等候資料流時，使用其中一種<xref:System.Net.WebClient.OpenWrite%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenWriteAsync (address As Uri, method As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenWriteAsync(Uri ^ address, System::String ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="method">傳送資料給資源所使用的方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <summary>開啟資料流以將資料寫入至指定的資源。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會擷取用來將資料傳送給資源的可寫入資料流。 資料流擷取使用自動配置的執行緒資源從執行緒集區。 若要接收通知，資料流時，加入事件處理常式<xref:System.Net.WebClient.OpenWriteCompleted>事件。 當您關閉資料流時，執行緒會封鎖，直到要求傳送至`address`和收到的回應。  
  
 這個方法不開啟資料流時封鎖呼叫執行緒。 若要封鎖等候資料流時，使用其中一種<xref:System.Net.WebClient.OpenWrite%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address, string method, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address, string method, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpenWriteAsync (address As Uri, method As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpenWriteAsync(Uri ^ address, System::String ^ method, System::Object ^ userToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="method">傳送資料給資源所使用的方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="userToken">使用者定義的物件，這個物件會在非同步作業完成時傳遞至叫用的方法。</param>
        <summary>使用指定的方法開啟資料流，以將資料寫入至指定的資源。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會擷取用來將資料傳送給資源的可寫入資料流。 使用執行緒集區的自動配置的執行緒資源，以非同步方式擷取的資料流。 若要接收通知，資料流時，加入事件處理常式<xref:System.Net.WebClient.OpenWriteCompleted>事件。 資料流的內容會傳送到伺服器時關閉資料流。  
  
 如果`method`參數會指定不了解伺服器基礎的通訊協定類別可讓您判斷發生何種狀況的方法。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 這個方法不開啟資料流時封鎖呼叫執行緒。 若要封鎖等候資料流時，使用其中一種<xref:System.Net.WebClient.OpenWrite%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.OpenWriteCompletedEventHandler OpenWriteCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.OpenWriteCompletedEventHandler OpenWriteCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.OpenWriteCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event OpenWriteCompleted As OpenWriteCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::OpenWriteCompletedEventHandler ^ OpenWriteCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.OpenWriteCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在開啟資料流以將資料寫入資源的非同步作業完成時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次開啟用來將資料傳送至資源資料流的非同步作業完成時，會引發這個事件。 這些作業會藉由呼叫啟動<xref:System.Net.WebClient.OpenWriteAsync%2A>方法。  
  
 <xref:System.Net.OpenWriteCompletedEventHandler>是針對此事件的委派。 <xref:System.Net.OpenWriteCompletedEventArgs>類別提供的事件資料的事件處理常式。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列程式碼範例將示範如何設定這個事件的事件處理常式。  
  
 [!code-cpp[NCLWebClientAsync#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#14)]
 [!code-csharp[NCLWebClientAsync#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#14)]
 [!code-vb[NCLWebClientAsync#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenWriteTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用工作物件，以非同步作業的方式開啟資料流，將資料寫入指定的資源。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWriteTaskAsync (address As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenWriteTaskAsync(System::String ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <summary>使用工作物件，以非同步作業的方式開啟資料流，將資料寫入指定的資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回用來將資料寫入資源的 <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件之後，才會完成已開啟的資料資源的可寫入資料流。 開啟資料流時，這個方法不會不會封鎖呼叫執行緒。  
  
 這個方法會擷取<xref:System.IO.Stream>用來將資料寫入至指定的資源執行個體`address`參數。 使用自動配置的執行緒資源，從執行緒集區取得資料流。  
  
> [!NOTE]
>  您必須呼叫<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>您已完成<xref:System.IO.Stream>若要避免系統資源不足。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
 在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWriteTaskAsync (address As Uri) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenWriteTaskAsync(Uri ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <summary>使用工作物件，以非同步作業的方式開啟資料流，將資料寫入指定的資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回用來將資料寫入資源的 <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件之後，才會完成已開啟的資料資源的可寫入資料流。 開啟資料流時，這個方法不會不會封鎖呼叫執行緒。  
  
 這個方法會擷取<xref:System.IO.Stream>用來將資料寫入至指定的資源執行個體`address`參數。 使用自動配置的執行緒資源，從執行緒集區取得資料流。  
  
> [!NOTE]
>  您必須呼叫<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>您已完成<xref:System.IO.Stream>若要避免系統資源不足。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
 在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (string address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(string address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWriteTaskAsync (address As String, method As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenWriteTaskAsync(System::String ^ address, System::String ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="method">傳送資料給資源所使用的方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <summary>使用工作物件，以非同步作業的方式開啟資料流，將資料寫入指定的資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回用來將資料寫入資源的 <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件之後，才會完成已開啟的資料資源的可寫入資料流。 開啟資料流時，這個方法不會不會封鎖呼叫執行緒。  
  
 這個方法會擷取<xref:System.IO.Stream>用來將資料寫入至指定的資源執行個體`address`參數。 使用自動配置的執行緒資源，從執行緒集區取得資料流。  
  
> [!NOTE]
>  您必須呼叫<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>您已完成<xref:System.IO.Stream>若要避免系統資源不足。  
  
 如果`method`參數會指定不了解伺服器基礎的通訊協定類別可讓您判斷發生何種狀況的方法。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
 在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenWriteTaskAsync (address As Uri, method As String) As Task(Of Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::IO::Stream ^&gt; ^ OpenWriteTaskAsync(Uri ^ address, System::String ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="method">傳送資料給資源所使用的方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <summary>使用工作物件，以非同步作業的方式開啟資料流，將資料寫入指定的資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回用來將資料寫入資源的 <see cref="T:System.IO.Stream" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件之後，才會完成已開啟的資料資源的可寫入資料流。 開啟資料流時，這個方法不會不會封鎖呼叫執行緒。  
  
 這個方法會擷取<xref:System.IO.Stream>用來將資料寫入至指定的資源執行個體`address`參數。 使用自動配置的執行緒資源，從執行緒集區取得資料流。  
  
> [!NOTE]
>  您必須呼叫<xref:System.IO.Stream.Close%2A?displayProperty=nameWithType>您已完成<xref:System.IO.Stream>若要避免系統資源不足。  
  
 如果`method`參數會指定不了解伺服器基礎的通訊協定類別可讓您判斷發生何種狀況的方法。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
 在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。</exception>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="Proxy">
      <MemberSignature Language="C#" Value="public System.Net.IWebProxy Proxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebProxy Proxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Proxy" />
      <MemberSignature Language="VB.NET" Value="Public Property Proxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IWebProxy ^ Proxy { System::Net::IWebProxy ^ get(); void set(System::Net::IWebProxy ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定這個 <see cref="T:System.Net.WebClient" /> 物件使用的 Proxy。</summary>
        <value>用於傳送要求的 <see cref="T:System.Net.IWebProxy" /> 執行個體。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.Proxy%2A>屬性會識別<xref:System.Net.IWebProxy>代表這與遠端伺服器通訊的執行個體<xref:System.Net.WebClient>物件。 Proxy 會使用組態檔和 Internet Explorer 區域網路設定系統設定。 指定應沒有任何 proxy，請設定<xref:System.Net.WebClient.Proxy%2A>屬性`null`。  
  
 如需自動 proxy 偵測資訊，請參閱[自動 Proxy 偵測](~/docs/framework/network-programming/automatic-proxy-detection.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Net.WebClient.Proxy" /> 設定為 <see langword="null" />。</exception>
        <permission cref="T:System.Net.WebPermission">這是不受限制。 關聯的列舉型別：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</permission>
        <altmember cref="T:System.Net.WebRequest" />
        <altmember cref="T:System.Net.WebResponse" />
        <altmember cref="T:System.Net.HttpWebRequest" />
        <altmember cref="T:System.Net.HttpWebResponse" />
        <altmember cref="T:System.Net.FtpWebRequest" />
        <altmember cref="T:System.Net.FtpWebResponse" />
        <altmember cref="T:System.Net.GlobalProxySelection" />
        <altmember cref="T:System.Net.WebProxy" />
      </Docs>
    </Member>
    <Member MemberName="QueryString">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection QueryString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection QueryString" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.QueryString" />
      <MemberSignature Language="VB.NET" Value="Public Property QueryString As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ QueryString { System::Collections::Specialized::NameValueCollection ^ get(); void set(System::Collections::Specialized::NameValueCollection ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定與要求相關的查詢名稱/值組合的集合。</summary>
        <value>
          <see cref="T:System.Collections.Specialized.NameValueCollection" />，包含與這個要求相關的查詢標題名稱/值組合。 如果沒有名稱/值組合與要求相關聯，則值為空的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.QueryString%2A>屬性包含<xref:System.Collections.Specialized.NameValueCollection>包含會附加至 URI 查詢字串的名稱/值組的執行個體。 內容<xref:System.Net.WebClient.QueryString%2A>屬性會加上問號 （？），而且，名稱/值組會從另一個分隔以連字號 (&)。  
  
   
  
## Examples  
 下列程式碼範例會接受使用者輸入，從命令列，並建置<xref:System.Collections.Specialized.NameValueCollection>，指派給<xref:System.Net.WebClient.QueryString%2A>屬性。 它然後回應從伺服器下載到本機檔案。  
  
 [!code-cpp[WebClient_QueryString#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_QueryString/CPP/webclient_querystring.cpp#1)]
 [!code-csharp[WebClient_QueryString#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_QueryString/CS/webclient_querystring.cs#1)]
 [!code-vb[WebClient_QueryString#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_QueryString/VB/webclient_querystring.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseHeaders">
      <MemberSignature Language="C#" Value="public System.Net.WebHeaderCollection ResponseHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection ResponseHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.ResponseHeaders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ResponseHeaders As WebHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::WebHeaderCollection ^ ResponseHeaders { System::Net::WebHeaderCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得與回應相關聯標頭名稱/值組的集合。</summary>
        <value>
          <see cref="T:System.Net.WebHeaderCollection" />，包含與回應關聯的標頭名稱/值組，或如果未接收到回應，則為 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.ResponseHeaders%2A>屬性包含<xref:System.Net.WebHeaderCollection>包含標頭資訊的執行個體<xref:System.Net.WebClient>接收回應。  
  
   
  
## Examples  
 下列程式碼範例會下載並顯示<xref:System.Net.WebClient.ResponseHeaders%2A>伺服器所傳回。  
  
 [!code-cpp[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CPP/webclient_baseaddress_responseheaders.cpp#2)]
 [!code-csharp[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CS/webclient_baseaddress_responseheaders.cs#2)]
 [!code-vb[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/VB/webclient_baseaddress_responseheaders.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將資料緩衝區上載至含有指定之 URI 的資源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (string address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(string address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadData (address As String, data As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadData(System::String ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="data">要傳送至資源的資料緩衝區。</param>
        <summary>將資料緩衝區上載至由 URI 識別的資源。</summary>
        <returns>
          <see cref="T:System.Byte" /> 陣列，包含來自資源的回應主體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadData%2A>方法會傳送給資源的資料緩衝區。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。 如果伺服器不了解基礎的要求，基礎的通訊協定類別會判斷發生何種狀況。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 <xref:System.Net.WebClient.UploadData%2A>方法會將傳送的內容`data`伺服器，而不予以編碼。 這個方法會封鎖將上傳資料時。 若要繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadDataAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例將主控台，以從輸入字串轉換<xref:System.Byte>陣列，並將張貼到指定的伺服器時使用陣列<xref:System.Net.WebClient.UploadData%2A>。 任何來自伺服器的回應會顯示到主控台。  
  
 [!code-cpp[WebClient_UpLoadData2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData2/CPP/webclient_uploaddata2.cpp#1)]
 [!code-csharp[WebClient_UpLoadData2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData2/CS/webclient_uploaddata2.cs#1)]
 [!code-vb[WebClient_UpLoadData2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData2/VB/webclient_uploaddata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="data" /> 為 <see langword="null" />。  -或-  傳送資料時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.Uri,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadData (address As Uri, data As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadData(Uri ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="data">要傳送至資源的資料緩衝區。</param>
        <summary>將資料緩衝區上載至由 URI 識別的資源。</summary>
        <returns>
          <see cref="T:System.Byte" /> 陣列，包含來自資源的回應主體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadData%2A>方法會傳送給資源的資料緩衝區。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。 如果伺服器不了解基礎的要求，基礎的通訊協定類別會判斷發生何種狀況。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 <xref:System.Net.WebClient.UploadData%2A>方法會將傳送的內容`data`伺服器，而不予以編碼。 這個方法會封鎖將上傳資料時。 若要繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadDataAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="data" /> 為 <see langword="null" />。  -或-  傳送資料時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (string address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(string address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadData (address As String, method As String, data As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadData(System::String ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="method">傳送資料給資源所使用的 HTTP 方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要傳送至資源的資料緩衝區。</param>
        <summary>使用指定的方法，將資料緩衝區上載至指定的資源。</summary>
        <returns>
          <see cref="T:System.Byte" /> 陣列，包含來自資源的回應主體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadData%2A>方法會傳送資料緩衝區資源，使用中指定的 HTTP 方法至`method`參數，並從伺服器傳回任何回應。 這個方法會封鎖將上傳資料時。 若要繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadDataAsync%2A>方法。  
  
 <xref:System.Net.WebClient.UploadData%2A>方法會將傳送的內容`data`伺服器，而不予以編碼。  
  
 如果`method`參數會指定不了解伺服器基礎的通訊協定類別可讓您判斷發生何種狀況的動詞命令。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例將字串從主控台輸入的位元組陣列轉換，並將張貼到指定的伺服器時使用陣列<xref:System.Net.WebClient.UploadData%2A>。 任何來自伺服器的回應會顯示到主控台。  
  
 [!code-cpp[WebClient_UpLoadData_Headers#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CPP/webclient_uploaddata_headers.cpp#2)]
 [!code-csharp[WebClient_UpLoadData_Headers#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CS/webclient_uploaddata_headers.cs#2)]
 [!code-vb[WebClient_UpLoadData_Headers#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/VB/webclient_uploaddata_headers.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="data" /> 為 <see langword="null" />。  -或-  上傳資料時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadData (address As Uri, method As String, data As Byte()) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadData(Uri ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="method">傳送資料給資源所使用的 HTTP 方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要傳送至資源的資料緩衝區。</param>
        <summary>使用指定的方法，將資料緩衝區上載至指定的資源。</summary>
        <returns>
          <see cref="T:System.Byte" /> 陣列，包含來自資源的回應主體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadData%2A>方法會傳送資料緩衝區資源，使用中指定的 HTTP 方法至`method`參數，並從伺服器傳回任何回應。 這個方法會封鎖將上傳資料時。 若要繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadDataAsync%2A>方法。  
  
 <xref:System.Net.WebClient.UploadData%2A>方法會將傳送的內容`data`伺服器，而不予以編碼。  
  
 如果`method`參數會指定不了解伺服器基礎的通訊協定類別可讓您判斷發生何種狀況的動詞命令。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="data" /> 為 <see langword="null" />。  -或-  上傳資料時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadDataAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將資料緩衝區上載至由 URI 識別的資源。 這個方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadDataAsync (address As Uri, data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadDataAsync(Uri ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="data">要傳送至資源的資料緩衝區。</param>
        <summary>使用 POST 方法，將資料緩衝區上載至由 URI 識別的資源。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳送至資源的資料緩衝區。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送的資料緩衝區。 未編碼的資料。 若要接收通知，資料上傳完成時，加入事件處理常式<xref:System.Net.WebClient.UploadDataCompleted>事件。  
  
 這個方法不會在傳送資料時封鎖呼叫執行緒。 若要傳送的資料與區塊等待伺服器回應時，請使用其中<xref:System.Net.WebClient.UploadData%2A>方法。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadDataAsync (address As Uri, method As String, data As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadDataAsync(Uri ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="method">傳送資料給資源所使用的方法。 如果是 <see langword="null" />，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要傳送至資源的資料緩衝區。</param>
        <summary>使用指定的方法，將資料緩衝區上載至由 URI 識別的資源。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳送至資源的資料緩衝區。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送的資料緩衝區。 未編碼的資料。 若要接收通知，資料上傳完成時，加入事件處理常式<xref:System.Net.WebClient.UploadDataCompleted>事件。  
  
 這個方法不會在傳送資料時封鎖呼叫執行緒。 若要傳送的資料與區塊等待伺服器回應時，請使用其中<xref:System.Net.WebClient.UploadData%2A>方法。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, string method, byte[] data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, string method, unsigned int8[] data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadDataAsync (address As Uri, method As String, data As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadDataAsync(Uri ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data, System::Object ^ userToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="method">傳送資料給資源所使用的方法。 如果是 <see langword="null" />，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要傳送至資源的資料緩衝區。</param>
        <param name="userToken">使用者定義的物件，這個物件會在非同步作業完成時傳遞至叫用的方法。</param>
        <summary>使用指定的方法並辨識語彙基元 (Token)，將資料緩衝區上載至由 URI 識別的資源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳送至資源的資料緩衝區。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送的資料緩衝區。 未編碼的資料。 若要接收通知，資料上傳完成時，加入事件處理常式<xref:System.Net.WebClient.UploadDataCompleted>事件。  
  
 這個方法不會在傳送資料時封鎖呼叫執行緒。 若要傳送的資料與區塊等待伺服器回應時，請使用其中<xref:System.Net.WebClient.UploadData%2A>方法。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadDataCompletedEventHandler UploadDataCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadDataCompletedEventHandler UploadDataCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadDataCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadDataCompleted As UploadDataCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadDataCompletedEventHandler ^ UploadDataCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadDataCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在非同步資料上載作業完成時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次非同步資料上傳作業完成時，會引發這個事件。 藉由呼叫啟動非同步資料上載<xref:System.Net.WebClient.UploadDataAsync%2A>方法。  
  
 <xref:System.Net.UploadDataCompletedEventHandler>是針對此事件的委派。 <xref:System.Net.UploadDataCompletedEventArgs>類別提供的事件資料的事件處理常式。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列程式碼範例將示範如何設定這個事件的事件處理常式。  
  
 [!code-cpp[NCLWebClientAsync#36](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#36)]
 [!code-csharp[NCLWebClientAsync#36](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#36)]
 [!code-vb[NCLWebClientAsync#36](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadDataTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用工作物件，以非同步作業的方式，將包含 <see cref="T:System.Byte" /> 陣列的資料緩衝區上傳至指定的 URI。  這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (string address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(string address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadDataTaskAsync (address As String, data As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadDataTaskAsync(System::String ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="data">要傳送至資源的資料緩衝區。</param>
        <summary>使用工作物件，以非同步作業的方式，將包含 <see cref="T:System.Byte" /> 陣列的資料緩衝區上傳至指定的 URI。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含上傳資料緩衝區時接收自資源之回應主體的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>之後才會完成的物件資料緩衝區已上傳的資源。  
  
 這個方法會傳送至資源的資料緩衝區。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送的資料緩衝區。 未編碼的資料。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadDataTaskAsync (address As Uri, data As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadDataTaskAsync(Uri ^ address, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="data">要傳送至資源的資料緩衝區。</param>
        <summary>使用工作物件，以非同步作業的方式，將包含 <see cref="T:System.Byte" /> 陣列的資料緩衝區上傳至指定的 URI。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含上傳資料緩衝區時接收自資源之回應主體的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>之後才會完成的物件資料緩衝區已上傳的資源。  
  
 這個方法會傳送至資源的資料緩衝區。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送的資料緩衝區。 未編碼的資料。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (string address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(string address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadDataTaskAsync (address As String, method As String, data As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadDataTaskAsync(System::String ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="method">傳送資料給資源所使用的方法。 如果是 <see langword="null" />，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要傳送至資源的資料緩衝區。</param>
        <summary>使用工作物件，以非同步作業的方式，將包含 <see cref="T:System.Byte" /> 陣列的資料緩衝區上傳至指定的 URI。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含上傳資料緩衝區時接收自資源之回應主體的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>之後才會完成的物件資料緩衝區已上傳的資源。  
  
 這個方法會傳送至資源的資料緩衝區。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送的資料緩衝區。 未編碼的資料。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadDataTaskAsync (address As Uri, method As String, data As Byte()) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadDataTaskAsync(Uri ^ address, System::String ^ method, cli::array &lt;System::Byte&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">要接收資料之資源的 URI。</param>
        <param name="method">傳送資料給資源所使用的方法。 如果是 <see langword="null" />，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要傳送至資源的資料緩衝區。</param>
        <summary>使用工作物件，以非同步作業的方式，將包含 <see cref="T:System.Byte" /> 陣列的資料緩衝區上傳至指定的 URI。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含上傳資料緩衝區時接收自資源之回應主體的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>之後才會完成的物件資料緩衝區已上傳的資源。  
  
 這個方法會傳送至資源的資料緩衝區。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送的資料緩衝區。 未編碼的資料。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadFile">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將本機檔案上載至具有指定之 URI 的資源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFile (address As String, fileName As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadFile(System::String ^ address, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收檔案之資源的 URI。 例如 ftp://localhost/samplefile.txt.</param>
        <param name="fileName">要傳送至資源的檔案。 例如，"samplefile.txt"。</param>
        <summary>將指定的本機檔案上載至具有指定之 URI 的資源。</summary>
        <returns>
          <see cref="T:System.Byte" /> 陣列，包含來自資源的回應主體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadFile%2A>方法會將本機檔案傳送到資源。 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
 這個方法會封鎖將上傳檔案時。 若要繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadFileAsync%2A>方法。  
  
 `POST`方法由 HTTP 所定義。 如果基礎要求不會使用 HTTP 和`POST`不了解伺服器基礎的通訊協定類別可讓您判斷發生何種狀況。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例將指定的檔案上傳至指定的 URI 使用<xref:System.Net.WebClient.UploadFile%2A>。 伺服器傳回的任何回應會顯示在主控台上。  
  
 [!code-cpp[WebClient_UpLoadFile#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadFile/CPP/webclient_uploadfile.cpp#1)]
 [!code-csharp[WebClient_UpLoadFile#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadFile/CS/webclient_uploadfile.cs#1)]
 [!code-vb[WebClient_UpLoadFile#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadFile/VB/webclient_uploadfile.vb#1)]  
  
 下列程式碼範例顯示的 ASP.NET 網頁，可以接受張貼的檔案，因此適合用於搭配<xref:System.Net.WebClient.UploadFile%2A>方法。 頁面必須位於 Web 伺服器上。 其位址提供的值`address`參數<xref:System.Net.WebClient.UploadFile%2A>方法。  
  
 [!code-aspx-csharp[NCLWebClientAsp#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsp/CS/fileuploadercs.aspx#1)]
 [!code-aspx-vb[NCLWebClientAsp#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsp/VB/fileuploadervb.aspx#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="fileName" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，表示其中包含無效的字元，或其不存在。  -或-  上傳檔案時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  以 <see langword="multipart" /> 開頭的 <see langword="Content-type" /> 標頭。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要存取本機檔案。 關聯的列舉型別：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFile (address As Uri, fileName As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadFile(Uri ^ address, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收檔案之資源的 URI。 例如 ftp://localhost/samplefile.txt.</param>
        <param name="fileName">要傳送至資源的檔案。 例如，"samplefile.txt"。</param>
        <summary>將指定的本機檔案上載至具有指定之 URI 的資源。</summary>
        <returns>
          <see cref="T:System.Byte" /> 陣列，包含來自資源的回應主體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadFile%2A>方法會將本機檔案傳送到資源。 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
 這個方法會封鎖將上傳檔案時。 若要繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadFileAsync%2A>方法。  
  
 `POST`方法由 HTTP 所定義。 如果基礎要求不會使用 HTTP 和`POST`不了解伺服器基礎的通訊協定類別可讓您判斷發生何種狀況。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="fileName" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，表示其中包含無效的字元，或其不存在。  -或-  上傳檔案時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  以 <see langword="multipart" /> 開頭的 <see langword="Content-type" /> 標頭。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要存取本機檔案。 關聯的列舉型別：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (string address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(string address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFile (address As String, method As String, fileName As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadFile(System::String ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收檔案之資源的 URI。</param>
        <param name="method">傳送檔案給資源所使用的方法。 如果是 <see langword="null" />，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="fileName">要傳送至資源的檔案。</param>
        <summary>使用指定的方法，將指定的本機檔案上載至指定的資源。</summary>
        <returns>
          <see cref="T:System.Byte" /> 陣列，包含來自資源的回應主體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當位址會指定 HTTP 資源，<xref:System.Net.WebClient.UploadFile%2A>方法會將本機檔案傳送至使用中指定的 HTTP 方法的資源`method`參數，並從伺服器傳回任何回應。 這個方法會封鎖將上傳檔案時。 若要繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadFileAsync%2A>方法。  
  
 如果`method`參數會指定伺服器無法辨識的動詞命令或`address`資源，基礎的通訊協定類別可讓您判斷發生何種狀況。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例將指定的檔案上傳至指定的 URI 使用<xref:System.Net.WebClient.UploadFile%2A>。 伺服器傳回的任何回應會顯示在主控台上。  
  
 [!code-cpp[WebClient_UpLoadFile2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadFile2/CPP/webclient_uploadfile2.cpp#1)]
 [!code-csharp[WebClient_UpLoadFile2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadFile2/CS/webclient_uploadfile2.cs#1)]
 [!code-vb[WebClient_UpLoadFile2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadFile2/VB/webclient_uploadfile2.vb#1)]  
  
 下列程式碼範例顯示的 ASP.NET 網頁，可以接受張貼的檔案，因此適合用於搭配<xref:System.Net.WebClient.UploadFile%2A>方法。 頁面必須位於 Web 伺服器上。 其位址提供的值`address`參數<xref:System.Net.WebClient.UploadFile%2A>方法。  
  
 [!code-aspx-csharp[NCLWebClientAsp#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsp/CS/fileuploadercs.aspx#1)]
 [!code-aspx-vb[NCLWebClientAsp#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsp/VB/fileuploadervb.aspx#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="fileName" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，表示其中包含無效的字元，或其不存在。  -或-  上傳檔案時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  以 <see langword="multipart" /> 開頭的 <see langword="Content-type" /> 標頭。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要存取本機檔案。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFile (address As Uri, method As String, fileName As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadFile(Uri ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收檔案之資源的 URI。</param>
        <param name="method">傳送檔案給資源所使用的方法。 如果是 <see langword="null" />，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="fileName">要傳送至資源的檔案。</param>
        <summary>使用指定的方法，將指定的本機檔案上載至指定的資源。</summary>
        <returns>
          <see cref="T:System.Byte" /> 陣列，包含來自資源的回應主體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當位址會指定 HTTP 資源，<xref:System.Net.WebClient.UploadFile%2A>方法會將本機檔案傳送至使用中指定的 HTTP 方法的資源`method`參數，並從伺服器傳回任何回應。 這個方法會封鎖將上傳檔案時。 若要繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadFileAsync%2A>方法。  
  
 如果`method`參數會指定伺服器無法辨識的動詞命令或`address`資源，基礎的通訊協定類別可讓您判斷發生何種狀況。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="fileName" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，表示其中包含無效的字元，或其不存在。  -或-  上傳檔案時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  以 <see langword="multipart" /> 開頭的 <see langword="Content-type" /> 標頭。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要存取本機檔案。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadFileAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定的本機檔案上載至指定的資源。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFileAsync (address As Uri, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFileAsync(Uri ^ address, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收檔案之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="fileName">要傳送至資源的檔案。</param>
        <summary>使用 POST 方法，將指定的本機檔案上載至指定的資源。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送檔案。 若要接收通知，檔案上傳完成時，加入事件處理常式<xref:System.Net.WebClient.UploadFileCompleted>事件。  
  
 這個方法不會封鎖呼叫執行緒，檔案會在傳送時。 若要等待伺服器回應時傳送的檔案和區塊，使用其中一種<xref:System.Net.WebClient.UploadFile%2A>方法。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="fileName" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，表示其中包含無效的字元，或指定的檔案路徑不存在。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  以 <see langword="multipart" /> 開頭的 <see langword="Content-type" /> 標頭。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要存取本機檔案。 關聯的列舉型別：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFileAsync (address As Uri, method As String, fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFileAsync(Uri ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收檔案之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="method">傳送資料給資源所使用的方法。 如果是 <see langword="null" />，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="fileName">要傳送至資源的檔案。</param>
        <summary>使用 POST 方法，將指定的本機檔案上載至指定的資源。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送檔案。 若要接收通知，檔案上傳完成時，加入事件處理常式<xref:System.Net.WebClient.UploadFileCompleted>事件。  
  
 這個方法不會封鎖呼叫執行緒，檔案會在傳送時。 若要等待伺服器回應時傳送的檔案和區塊，使用其中一種<xref:System.Net.WebClient.UploadFile%2A>方法。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="fileName" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，表示其中包含無效的字元，或指定的檔案路徑不存在。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  以 <see langword="multipart" /> 開頭的 <see langword="Content-type" /> 標頭。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要存取本機檔案。 關聯的列舉型別：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string method, string fileName, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string method, string fileName, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadFileAsync (address As Uri, method As String, fileName As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadFileAsync(Uri ^ address, System::String ^ method, System::String ^ fileName, System::Object ^ userToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">要接收檔案之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="method">傳送資料給資源所使用的方法。 如果是 <see langword="null" />，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="fileName">要傳送至資源的檔案。</param>
        <param name="userToken">使用者定義的物件，這個物件會在非同步作業完成時傳遞至叫用的方法。</param>
        <summary>使用 POST 方法，將指定的本機檔案上載至指定的資源。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送檔案。 若要接收通知，檔案上傳完成時，加入事件處理常式<xref:System.Net.WebClient.UploadFileCompleted>事件。  
  
 這個方法不會封鎖呼叫執行緒，檔案會在傳送時。 若要等待伺服器回應時傳送的檔案和區塊，使用其中一種<xref:System.Net.WebClient.UploadFile%2A>方法。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="fileName" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，表示其中包含無效的字元，或指定的檔案路徑不存在。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  以 <see langword="multipart" /> 開頭的 <see langword="Content-type" /> 標頭。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">若要存取本機檔案。 關聯的列舉型別：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadFileCompletedEventHandler UploadFileCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadFileCompletedEventHandler UploadFileCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadFileCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadFileCompleted As UploadFileCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadFileCompletedEventHandler ^ UploadFileCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadFileCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在非同步檔案上載作業完成時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次非同步檔案上傳作業完成時，會引發這個事件。 藉由呼叫啟動非同步檔案上載<xref:System.Net.WebClient.UploadFileAsync%2A>方法。  
  
 <xref:System.Net.UploadFileCompletedEventHandler>是針對此事件的委派。 <xref:System.Net.UploadFileCompletedEventArgs>類別提供的事件資料的事件處理常式。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列程式碼範例將示範如何設定這個事件的事件處理常式。  
  
 [!code-cpp[NCLWebClientAsync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#4)]
 [!code-csharp[NCLWebClientAsync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#4)]
 [!code-vb[NCLWebClientAsync#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadFileTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用工作物件，以非同步作業的方式將指定的本機檔案上傳至資源。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFileTaskAsync (address As String, fileName As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadFileTaskAsync(System::String ^ address, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收檔案之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="fileName">要傳送至資源的本機檔案。</param>
        <summary>使用工作物件，以非同步作業的方式將指定的本機檔案上傳至資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含上傳檔案時接收自資源之回應主體的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件會在已上傳至資源的檔案之後, 完成。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送檔案。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="fileName" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，表示其中包含無效的字元，或指定的檔案路徑不存在。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  以 <see langword="multipart" /> 開頭的 <see langword="Content-type" /> 標頭。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFileTaskAsync (address As Uri, fileName As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadFileTaskAsync(Uri ^ address, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收檔案之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="fileName">要傳送至資源的本機檔案。</param>
        <summary>使用工作物件，以非同步作業的方式將指定的本機檔案上傳至資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含上傳檔案時接收自資源之回應主體的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件會在已上傳至資源的檔案之後, 完成。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送檔案。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="fileName" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，表示其中包含無效的字元，或指定的檔案路徑不存在。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  以 <see langword="multipart" /> 開頭的 <see langword="Content-type" /> 標頭。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (string address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(string address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFileTaskAsync (address As String, method As String, fileName As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadFileTaskAsync(System::String ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收檔案之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="method">傳送資料給資源所使用的方法。 如果是 <see langword="null" />，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="fileName">要傳送至資源的本機檔案。</param>
        <summary>使用工作物件，以非同步作業的方式將指定的本機檔案上傳至資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含上傳檔案時接收自資源之回應主體的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件會在已上傳至資源的檔案之後, 完成。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送檔案。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 根據預設，此方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="fileName" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，表示其中包含無效的字元，或指定的檔案路徑不存在。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  以 <see langword="multipart" /> 開頭的 <see langword="Content-type" /> 標頭。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadFileTaskAsync (address As Uri, method As String, fileName As String) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadFileTaskAsync(Uri ^ address, System::String ^ method, System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收檔案之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="method">傳送資料給資源所使用的方法。 如果是 <see langword="null" />，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="fileName">要傳送至資源的本機檔案。</param>
        <summary>使用工作物件，以非同步作業的方式將指定的本機檔案上傳至資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含上傳檔案時接收自資源之回應主體的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件會在已上傳至資源的檔案之後, 完成。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送檔案。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 根據預設，此方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="fileName" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="fileName" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，表示其中包含無效的字元，或指定的檔案路徑不存在。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  以 <see langword="multipart" /> 開頭的 <see langword="Content-type" /> 標頭。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadProgressChanged">
      <MemberSignature Language="C#" Value="public event System.Net.UploadProgressChangedEventHandler UploadProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadProgressChangedEventHandler UploadProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadProgressChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadProgressChanged As UploadProgressChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadProgressChangedEventHandler ^ UploadProgressChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在非同步上傳作業成功傳輸部分或全部資料時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次非同步上傳有進展時，會引發這個事件。 使用下列方法之一啟動上傳時，會引發這個事件。  
  
|方法|描述|  
|------------|-----------------|  
|<xref:System.Net.WebClient.UploadDataAsync%2A>|傳送<xref:System.Byte>陣列資源，而不會封鎖呼叫執行緒。|  
|<xref:System.Net.WebClient.UploadFileAsync%2A>|本機將檔案傳送至資源，而不會封鎖呼叫執行緒。|  
|<xref:System.Net.WebClient.UploadValuesAsync%2A>|傳送<xref:System.Collections.Specialized.NameValueCollection>資源並傳回<xref:System.Byte>陣列，包含任何回應，而不會封鎖呼叫執行緒。|  
  
 <xref:System.Net.UploadProgressChangedEventHandler>是針對此事件的委派。 <xref:System.Net.UploadProgressChangedEventArgs>類別提供的事件資料的事件處理常式。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列程式碼範例將示範如何設定這個事件的事件處理常式。  
  
 [!code-cpp[NCLWebClientAsync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#4)]
 [!code-csharp[NCLWebClientAsync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#4)]
 [!code-vb[NCLWebClientAsync#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#4)]  
  
 下列程式碼範例顯示這個事件處理常式的實作。  
  
 [!code-cpp[NCLWebClientAsync#42](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#42)]
 [!code-csharp[NCLWebClientAsync#42](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#42)]
 [!code-vb[NCLWebClientAsync#42](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadString">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定的字串上傳至指定的資源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (string address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(string address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadString (address As String, data As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UploadString(System::String ^ address, System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字串之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="data">要上傳的字串。</param>
        <summary>使用 POST 方法，將指定的字串上載至指定的資源。</summary>
        <returns>
          <see cref="T:System.String" />，其中包含由伺服器傳送的回應。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上傳之前的字串，這個方法轉換成<xref:System.Byte>陣列使用中指定的編碼<xref:System.Net.WebClient.Encoding%2A>屬性。 這個方法會在傳輸字串時封鎖。 若要將字串傳送，並繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadStringAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個方法。  
  
 [!code-cpp[NCLWebClientAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#1)]
 [!code-csharp[NCLWebClientAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#1)]
 [!code-vb[NCLWebClientAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadString (address As Uri, data As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UploadString(Uri ^ address, System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字串之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="data">要上傳的字串。</param>
        <summary>使用 POST 方法，將指定的字串上載至指定的資源。</summary>
        <returns>
          <see cref="T:System.String" />，其中包含由伺服器傳送的回應。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上傳之前的字串，這個方法轉換成<xref:System.Byte>陣列使用中指定的編碼<xref:System.Net.WebClient.Encoding%2A>屬性。 這個方法會在傳輸字串時封鎖。 若要將字串傳送，並繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadStringAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("")，和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (string address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(string address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadString (address As String, method As String, data As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UploadString(System::String ^ address, System::String ^ method, System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字串之資源的 URI。 這個 URI 必須識別出可接受以 <c>method</c> 方法傳送之要求的資源。</param>
        <param name="method">將字串傳送至資源時所使用的 HTTP 方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要上傳的字串。</param>
        <summary>使用指定的方法，將指定的字串上載至指定的資源。</summary>
        <returns>
          <see cref="T:System.String" />，其中包含由伺服器傳送的回應。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上傳之前的字串，這個方法轉換成<xref:System.Byte>陣列使用中指定的編碼<xref:System.Net.WebClient.Encoding%2A>屬性。 這個方法會在傳輸字串時封鎖。 若要將字串傳送，並繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadStringAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個方法。  
  
 [!code-cpp[NCLWebClientAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#2)]
 [!code-csharp[NCLWebClientAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#2)]
 [!code-vb[NCLWebClientAsync#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  無法使用 <paramref name="method" /> 傳送內容。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadString (address As Uri, method As String, data As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UploadString(Uri ^ address, System::String ^ method, System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字串之資源的 URI。 這個 URI 必須識別出可接受以 <c>method</c> 方法傳送之要求的資源。</param>
        <param name="method">將字串傳送至資源時所使用的 HTTP 方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要上傳的字串。</param>
        <summary>使用指定的方法，將指定的字串上載至指定的資源。</summary>
        <returns>
          <see cref="T:System.String" />，其中包含由伺服器傳送的回應。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上傳之前的字串，這個方法轉換成<xref:System.Byte>陣列使用中指定的編碼<xref:System.Net.WebClient.Encoding%2A>屬性。 這個方法會在傳輸字串時封鎖。 若要將字串傳送，並繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadStringAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  無法使用 <paramref name="method" /> 傳送內容。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadStringAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定的字串上傳至指定的資源。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadStringAsync (address As Uri, data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadStringAsync(Uri ^ address, System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字串之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="data">要上傳的字串。</param>
        <summary>將指定的字串上傳至指定的資源。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將字串傳送到資源。 字串會使用執行緒集區的自動配置的執行緒資源，以非同步方式進行傳送。 上傳之前的字串，這個方法轉換成<xref:System.Byte>陣列使用中指定的編碼<xref:System.Net.WebClient.Encoding%2A>屬性。 為字串上傳完成時收到通知，您可以加入事件處理常式<xref:System.Net.WebClient.UploadStringCompleted>事件。  
  
 這個方法不會封鎖呼叫執行緒，字串會在傳送時。 若要等待伺服器回應時傳送字串，而區塊，使用其中一種<xref:System.Net.WebClient.UploadString%2A>方法。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadStringAsync (address As Uri, method As String, data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadStringAsync(Uri ^ address, System::String ^ method, System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字串之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="method">傳送檔案給資源所使用的 HTTP 方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要上傳的字串。</param>
        <summary>將指定的字串上傳至指定的資源。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將字串傳送到資源。 字串會使用執行緒集區的自動配置的執行緒資源，以非同步方式進行傳送。 上傳之前的字串，這個方法轉換成<xref:System.Byte>陣列使用中指定的編碼<xref:System.Net.WebClient.Encoding%2A>屬性。 為字串上傳完成時收到通知，您可以加入事件處理常式<xref:System.Net.WebClient.UploadStringCompleted>事件。  
  
 這個方法不會封鎖呼叫執行緒，字串會在傳送時。 若要等待伺服器回應時傳送字串，而區塊，使用其中一種<xref:System.Net.WebClient.UploadString%2A>方法。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  無法使用 <paramref name="method" /> 傳送內容。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string method, string data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string method, string data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadStringAsync (address As Uri, method As String, data As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadStringAsync(Uri ^ address, System::String ^ method, System::String ^ data, System::Object ^ userToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">要接收字串之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="method">傳送檔案給資源所使用的 HTTP 方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要上傳的字串。</param>
        <param name="userToken">使用者定義的物件，這個物件會在非同步作業完成時傳遞至叫用的方法。</param>
        <summary>將指定的字串上傳至指定的資源。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將字串傳送到資源。 字串會使用執行緒集區的自動配置的執行緒資源，以非同步方式進行傳送。 上傳之前的字串，這個方法轉換成<xref:System.Byte>陣列使用中指定的編碼<xref:System.Net.WebClient.Encoding%2A>屬性。 為字串上傳完成時收到通知，您可以加入事件處理常式<xref:System.Net.WebClient.UploadStringCompleted>事件。  
  
 這個方法不會封鎖呼叫執行緒，字串會在傳送時。 若要等待伺服器回應時傳送字串，而區塊，使用其中一種<xref:System.Net.WebClient.UploadString%2A>方法。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  無法使用 <paramref name="method" /> 傳送內容。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadStringCompletedEventHandler UploadStringCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadStringCompletedEventHandler UploadStringCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadStringCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadStringCompleted As UploadStringCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadStringCompletedEventHandler ^ UploadStringCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadStringCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在非同步字串上傳作業完成時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次非同步字串上傳作業完成時，會引發這個事件。 藉由呼叫啟動非同步字串上載<xref:System.Net.WebClient.UploadStringAsync%2A>方法。  
  
 <xref:System.Net.UploadStringCompletedEventHandler>是針對此事件的委派。 <xref:System.Net.UploadStringCompletedEventArgs>類別提供的事件資料的事件處理常式。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
   
  
## Examples  
 下列程式碼範例將示範如何設定這個事件的事件處理常式。  
  
 [!code-cpp[NCLWebClientAsync#38](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#38)]
 [!code-csharp[NCLWebClientAsync#38](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#38)]
 [!code-vb[NCLWebClientAsync#38](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadStringTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用工作物件，以非同步作業的方式將指定的字串上傳至指定的資源。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (string address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(string address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadStringTaskAsync (address As String, data As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ UploadStringTaskAsync(System::String ^ address, System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字串之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="data">要上傳的字串。</param>
        <summary>使用工作物件，以非同步作業的方式將指定的字串上傳至指定的資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含伺服器所傳送之回應的 <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件會完成之後已上傳至資源的字串。 字串會使用執行緒集區的自動配置的執行緒資源，以非同步方式進行傳送。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 上傳之前的字串，這個方法轉換成<xref:System.Byte>陣列使用中指定的編碼<xref:System.Net.WebClient.Encoding%2A>屬性。 這個方法會在傳輸字串時封鎖。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadStringTaskAsync (address As Uri, data As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ UploadStringTaskAsync(Uri ^ address, System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字串之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="data">要上傳的字串。</param>
        <summary>使用工作物件，以非同步作業的方式將指定的字串上傳至指定的資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含伺服器所傳送之回應的 <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件會完成之後已上傳至資源的字串。 字串會使用執行緒集區的自動配置的執行緒資源，以非同步方式進行傳送。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 上傳之前的字串，這個方法轉換成<xref:System.Byte>陣列使用中指定的編碼<xref:System.Net.WebClient.Encoding%2A>屬性。 這個方法會在傳輸字串時封鎖。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (string address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(string address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadStringTaskAsync (address As String, method As String, data As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ UploadStringTaskAsync(System::String ^ address, System::String ^ method, System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字串之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="method">傳送檔案給資源所使用的 HTTP 方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要上傳的字串。</param>
        <summary>使用工作物件，以非同步作業的方式將指定的字串上傳至指定的資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含伺服器所傳送之回應的 <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件會完成之後已上傳至資源的字串。 字串會使用執行緒集區的自動配置的執行緒資源，以非同步方式進行傳送。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 上傳之前的字串，這個方法轉換成<xref:System.Byte>陣列使用中指定的編碼<xref:System.Net.WebClient.Encoding%2A>屬性。 這個方法會在傳輸字串時封鎖。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  無法使用 <paramref name="method" /> 傳送內容。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadStringTaskAsync (address As Uri, method As String, data As String) As Task(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::String ^&gt; ^ UploadStringTaskAsync(Uri ^ address, System::String ^ method, System::String ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">要接收字串之資源的 URI。 對於 HTTP 資源而言，這個 URI 必須識別出可以接受使用 POST 方法傳送之要求的資源，例如指令碼或 ASP 網頁。</param>
        <param name="method">傳送檔案給資源所使用的 HTTP 方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要上傳的字串。</param>
        <summary>使用工作物件，以非同步作業的方式將指定的字串上傳至指定的資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含伺服器所傳送之回應的 <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件會完成之後已上傳至資源的字串。 字串會使用執行緒集區的自動配置的執行緒資源，以非同步方式進行傳送。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 上傳之前的字串，這個方法轉換成<xref:System.Byte>陣列使用中指定的編碼<xref:System.Net.WebClient.Encoding%2A>屬性。 這個方法會在傳輸字串時封鎖。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  無法使用 <paramref name="method" /> 傳送內容。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadValues">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將名稱/值集合上載至具有指定之 URI 的資源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (string address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(string address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValues (address As String, data As NameValueCollection) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadValues(System::String ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">要接收集合之資源的 URI。</param>
        <param name="data">要傳送至資源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>將指定的名稱/值集合上載至由指定之 URI 所識別的資源。</summary>
        <returns>
          <see cref="T:System.Byte" /> 陣列，包含來自資源的回應主體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadValues%2A>方法傳送<xref:System.Collections.Specialized.NameValueCollection>到伺服器。 這個方法會封鎖將上傳資料時。 若要繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadValuesAsync%2A>方法。  
  
 如果伺服器不了解基礎的要求，基礎的通訊協定類別會判斷發生何種狀況。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果內容類型標頭`null`、<xref:System.Net.WebClient.UploadValues%2A>方法將它設定為 「 應用程式/x-www-表單-urlencoded"。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例會從使用者 （名稱、 年齡和位址） 收集資訊和公佈到伺服器時使用的值<xref:System.Net.WebClient.UploadValues%2A>。 任何來自伺服器的回應會顯示在主控台上。  
  
 [!code-cpp[WebClient_UploadValues#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UploadValues/CPP/webclient_uploadvalues.cpp#1)]
 [!code-csharp[WebClient_UploadValues#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UploadValues/CS/webclient_uploadvalues.cs#1)]
 [!code-vb[WebClient_UploadValues#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UploadValues/VB/webclient_uploadvalues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="data" /> 為 <see langword="null" />。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  開啟資料流時發生錯誤。  -或-  <see langword="Content-type" /> 標頭不是 <see langword="null" /> 或 "application/x-www-form-urlencoded"。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValues (address As Uri, data As NameValueCollection) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadValues(Uri ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">要接收集合之資源的 URI。</param>
        <param name="data">要傳送至資源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>將指定的名稱/值集合上載至由指定之 URI 所識別的資源。</summary>
        <returns>
          <see cref="T:System.Byte" /> 陣列，包含來自資源的回應主體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadValues%2A>方法傳送<xref:System.Collections.Specialized.NameValueCollection>到伺服器。 這個方法會封鎖將上傳資料時。 若要繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadValuesAsync%2A>方法。  
  
 如果伺服器不了解基礎的要求，基礎的通訊協定類別會判斷發生何種狀況。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果內容類型標頭`null`、<xref:System.Net.WebClient.UploadValues%2A>方法將它設定為 「 應用程式/x-www-表單-urlencoded"。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="data" /> 為 <see langword="null" />。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  開啟資料流時發生錯誤。  -或-  <see langword="Content-type" /> 標頭不是 <see langword="null" /> 或 "application/x-www-form-urlencoded"。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (string address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(string address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValues (address As String, method As String, data As NameValueCollection) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadValues(System::String ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">要接收集合之資源的 URI。</param>
        <param name="method">傳送檔案給資源所使用的 HTTP 方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要傳送至資源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用指定的方法，將指定的名稱/值集合上載至由指定之 URI 所識別的資源。</summary>
        <returns>
          <see cref="T:System.Byte" /> 陣列，包含來自資源的回應主體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadValues%2A>方法傳送<xref:System.Collections.Specialized.NameValueCollection>資源使用中指定的方法`method`參數，並從伺服器傳回任何回應。 這個方法會封鎖將上傳資料時。 若要繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadValuesAsync%2A>方法。  
  
 如果`Content-type`標頭是`null`、<xref:System.Net.WebClient.UploadValues%2A>方法將它設定為`application/x-www-form-urlencoded`。  
  
 如果`method`參數會指定不了解伺服器基礎的通訊協定類別可讓您判斷發生何種狀況的動詞命令。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
   
  
## Examples  
 下列程式碼範例會從使用者 （名稱、 年齡和位址） 收集資訊和公佈到伺服器時使用的值<xref:System.Net.WebClient.UploadValues%2A>。 任何來自伺服器的回應會顯示在主控台上。  
  
 [!code-cpp[WebClient_UploadValues2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UploadValues2/CPP/webclient_uploadvalues2.cpp#1)]
 [!code-csharp[WebClient_UploadValues2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UploadValues2/CS/webclient_uploadvalues2.cs#1)]
 [!code-vb[WebClient_UploadValues2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UploadValues2/VB/webclient_uploadvalues2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="data" /> 為 <see langword="null" />。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  <see langword="Content-type" /> 標頭值不是 <see langword="null" />，也不是 <see langword="application/x-www-form-urlencoded" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValues (address As Uri, method As String, data As NameValueCollection) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ UploadValues(Uri ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">要接收集合之資源的 URI。</param>
        <param name="method">傳送檔案給資源所使用的 HTTP 方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要傳送至資源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用指定的方法，將指定的名稱/值集合上載至由指定之 URI 所識別的資源。</summary>
        <returns>
          <see cref="T:System.Byte" /> 陣列，包含來自資源的回應主體。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.WebClient.UploadValues%2A>方法傳送<xref:System.Collections.Specialized.NameValueCollection>資源使用中指定的方法`method`參數，並從伺服器傳回任何回應。 這個方法會封鎖將上傳資料時。 若要繼續執行等待伺服器回應時，使用其中一種<xref:System.Net.WebClient.UploadValuesAsync%2A>方法。  
  
 如果`Content-type`標頭是`null`、<xref:System.Net.WebClient.UploadValues%2A>方法將它設定為`application/x-www-form-urlencoded`。  
  
 如果`method`參數會指定不了解伺服器基礎的通訊協定類別可讓您判斷發生何種狀況的動詞命令。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  <paramref name="data" /> 為 <see langword="null" />。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  <see langword="Content-type" /> 標頭值不是 <see langword="null" />，也不是 <see langword="application/x-www-form-urlencoded" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadValuesAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將指定的名稱/值集合上載至由指定之 URI 所識別的資源。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadValuesAsync (address As Uri, data As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadValuesAsync(Uri ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">要接收集合之資源的 URI。 這個 URI 必須識別出可以接受以預設方法傳送之要求的資源。</param>
        <param name="data">要傳送至資源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>將指定之名稱/值集合中的資料上載至由指定之 URI 識別的資源。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會將字串傳送到資源。 字串會使用執行緒集區的自動配置的執行緒資源，以非同步方式進行傳送。 上傳之前的字串，這個方法轉換成<xref:System.Byte>陣列使用中指定的編碼<xref:System.Net.WebClient.Encoding%2A>屬性。 為字串上傳完成時收到通知，您可以加入事件處理常式<xref:System.Net.WebClient.UploadStringCompleted>事件。  
  
 這個方法不會封鎖呼叫執行緒，字串會在傳送時。 若要等待伺服器回應時傳送字串，而區塊，使用其中一種<xref:System.Net.WebClient.UploadString%2A>方法。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  沒有來自裝載資源之伺服器的回應。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadValuesAsync (address As Uri, method As String, data As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadValuesAsync(Uri ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">要接收集合之資源的 URI。 這個 URI 必須識別出可接受以 <c>method</c> 方法傳送之要求的資源。</param>
        <param name="method">將字串傳送至資源時所使用的方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要傳送至資源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用指定的方法，將指定之名稱/值集合中的資料上載至由指定之 URI 所識別的資源。 這個方法不會封鎖呼叫執行緒。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳送中包含的資料<xref:System.Collections.Specialized.NameValueCollection>至`address`資源。 使用這個方法將表單資料傳送至 URI，以進行處理。 使用表單 urlencoded 媒體類型中，傳送資料Content-type 標頭值必須設定為 「 應用程式/x-www-表單-urlencoded"。 根據預設，標頭已經正確設定。 <xref:System.Net.WebClient.UploadValuesAsync%2A>方法會擲回<xref:System.Net.WebException>如果呼叫這個方法與不同內容類型標頭值組中<xref:System.Net.WebClient.Headers%2A>集合。  
  
 如果`method`方法不了解伺服器基礎的通訊協定類別可讓您判斷發生何種狀況。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 <xref:System.Collections.Specialized.NameValueCollection>使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送。 若要上傳作業完成時接收通知，加入事件處理常式<xref:System.Net.WebClient.UploadValuesCompleted>事件。  
  
 這個方法不會封鎖呼叫執行緒，字串會在傳送時。 若要等待伺服器回應時傳送字串，而區塊，使用其中一種<xref:System.Net.WebClient.UploadValues%2A>方法。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空的它會附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  無法使用 <paramref name="method" /> 傳送內容。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UploadValuesAsync (address As Uri, method As String, data As NameValueCollection, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UploadValuesAsync(Uri ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data, System::Object ^ userToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">要接收集合之資源的 URI。 這個 URI 必須識別出可接受以 <c>method</c> 方法傳送之要求的資源。</param>
        <param name="method">將字串傳送至資源時所使用的 HTTP 方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要傳送至資源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <param name="userToken">使用者定義的物件，這個物件會在非同步作業完成時傳遞至叫用的方法。</param>
        <summary>使用指定的方法，將指定之名稱/值集合中的資料上載至由指定之 URI 所識別的資源。 這個方法不會封鎖呼叫執行緒，而且允許呼叫端將物件傳遞給作業完成時所叫用的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會傳送中包含的資料<xref:System.Collections.Specialized.NameValueCollection>至`address`資源。 使用這個方法將表單資料傳送至 URI，以進行處理。 使用表單 urlencoded 媒體類型中，傳送資料Content-type 標頭值必須設定為 「 應用程式/x-www-表單-urlencoded"。 根據預設，標頭已經正確設定。 <xref:System.Net.WebClient.UploadValuesAsync%2A>方法會擲回<xref:System.Net.WebException>如果呼叫這個方法與不同內容類型標頭值組中<xref:System.Net.WebClient.Headers%2A>集合。  
  
 如果`method`方法不了解伺服器基礎的通訊協定類別可讓您判斷發生何種狀況。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 <xref:System.Collections.Specialized.NameValueCollection>使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送。 若要上傳作業完成時接收通知，加入事件處理常式<xref:System.Net.WebClient.UploadValuesCompleted>事件。  
  
 這個方法不會封鎖呼叫執行緒，字串會在傳送時。 若要等待伺服器回應時傳送字串，而區塊，使用其中一種<xref:System.Net.WebClient.UploadValues%2A>方法。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空的它會附加至`address`。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  無法使用 <paramref name="method" /> 傳送內容。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadValuesCompletedEventHandler UploadValuesCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadValuesCompletedEventHandler UploadValuesCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadValuesCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UploadValuesCompleted As UploadValuesCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::UploadValuesCompletedEventHandler ^ UploadValuesCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadValuesCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在名稱/值集合的非同步上載完成時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 會引發此事件每次的非同步上傳<xref:System.Collections.Specialized.NameValueCollection>物件的資料已完成。 藉由呼叫啟動這些上載<xref:System.Net.WebClient.UploadValuesAsync%2A>方法。  
  
 <xref:System.Net.UploadValuesCompletedEventHandler>是針對此事件的委派。 <xref:System.Net.UploadValuesCompletedEventArgs>類別提供的事件資料的事件處理常式。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UploadValuesTaskAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用工作物件，以非同步作業的方式將指定的名稱/值集合上傳至指定之 URI 所識別的資源。 這些方法不會封鎖呼叫執行緒。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (string address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(string address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValuesTaskAsync (address As String, data As NameValueCollection) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadValuesTaskAsync(System::String ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">要接收集合之資源的 URI。</param>
        <param name="data">要傳送至資源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用工作物件，以非同步作業的方式將指定的名稱/值集合上傳至指定之 URI 所識別的資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含伺服器所傳送之回應的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件會完成之後已上傳至資源的名稱/值集合。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送的名稱/值集合。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果伺服器不了解基礎的要求，基礎的通訊協定類別會判斷發生何種狀況。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果內容類型標頭`null`，這個方法將它設定為 「 應用程式/x-www-表單-urlencoded"。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  開啟資料流時發生錯誤。  -或-  <see langword="Content-type" /> 標頭不是 <see langword="null" /> 或 "application/x-www-form-urlencoded"。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValuesTaskAsync (address As Uri, data As NameValueCollection) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadValuesTaskAsync(Uri ^ address, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">要接收集合之資源的 URI。</param>
        <param name="data">要傳送至資源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用工作物件，以非同步作業的方式將指定的名稱/值集合上傳至指定之 URI 所識別的資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含伺服器所傳送之回應的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件會完成之後已上傳至資源的名稱/值集合。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送的名稱/值集合。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果伺服器不了解基礎的要求，基礎的通訊協定類別會判斷發生何種狀況。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果內容類型標頭`null`，這個方法將它設定為 「 應用程式/x-www-表單-urlencoded"。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  開啟資料流時發生錯誤。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  <see langword="Content-type" /> 標頭值不是 <see langword="null" />，也不是 <see langword="application/x-www-form-urlencoded" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (string address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(string address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValuesTaskAsync (address As String, method As String, data As NameValueCollection) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadValuesTaskAsync(System::String ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">要接收集合之資源的 URI。</param>
        <param name="method">傳送集合給資源所使用的 HTTP 方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要傳送至資源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用工作物件，以非同步作業的方式將指定的名稱/值集合上傳至指定之 URI 所識別的資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含伺服器所傳送之回應的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件會完成之後已上傳至資源的名稱/值集合。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送的名稱/值集合。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果伺服器不了解基礎的要求，基礎的通訊協定類別會判斷發生何種狀況。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果內容類型標頭`null`，這個方法將它設定為 「 應用程式/x-www-表單-urlencoded"。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  無法使用 <paramref name="method" /> 傳送內容。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  開啟資料流時發生錯誤。  -或-  <see langword="Content-type" /> 標頭不是 <see langword="null" /> 或 "application/x-www-form-urlencoded"。</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Function UploadValuesTaskAsync (address As Uri, method As String, data As NameValueCollection) As Task(Of Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;cli::array &lt;System::Byte&gt; ^&gt; ^ UploadValuesTaskAsync(Uri ^ address, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">要接收集合之資源的 URI。</param>
        <param name="method">傳送集合給資源所使用的 HTTP 方法。 如果是 Null，預設的 HTTP 為 POST，而 FTP 則為 STOR。</param>
        <param name="data">要傳送至資源的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
        <summary>使用工作物件，以非同步作業的方式將指定的名稱/值集合上傳至指定之 URI 所識別的資源。</summary>
        <returns>傳回 <see cref="T:System.Threading.Tasks.Task`1" />。  工作物件，表示非同步作業。 工作物件上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會傳回包含伺服器所傳送之回應的 <see cref="T:System.Byte" /> 陣列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件會完成之後已上傳至資源的名稱/值集合。 使用執行緒集區的自動配置的執行緒資源，以非同步方式傳送的名稱/值集合。  
  
 可以使用取消尚未完成的非同步作業<xref:System.Net.WebClient.CancelAsync%2A>方法。  
  
 如果伺服器不了解基礎的要求，基礎的通訊協定類別會判斷發生何種狀況。 一般而言，<xref:System.Net.WebException>會擲回<xref:System.Net.WebException.Status%2A>屬性設定為表示發生錯誤。  
  
 如果內容類型標頭`null`，這個方法將它設定為 「 應用程式/x-www-表單-urlencoded"。  
  
 如果<xref:System.Net.WebClient.BaseAddress%2A>屬性不是空字串 ("") 和`address`未包含絕對 URI，`address`必須是相對 URI，並結合<xref:System.Net.WebClient.BaseAddress%2A>形成要求資料的絕對 URI。 如果<xref:System.Net.WebClient.QueryString%2A>屬性不是空字串時，附加至`address`。  
  
 這個方法會使用上傳 FTP 資源增加命令。 HTTP 資源，會使用 POST 方法。  
  
> [!NOTE]
>  在應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。 如需詳細資訊，請參閱[網路追蹤.NET Framework 中](~/docs/framework/network-programming/network-tracing.md)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> 參數為 <see langword="null" />。  -或-  <paramref name="data" /> 參數為 <see langword="null" />。</exception>
        <exception cref="T:System.Net.WebException">合併 <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 而形成的 URI 是無效的。  -或-  無法使用 <paramref name="method" /> 傳送內容。  -或-  沒有來自裝載資源之伺服器的回應。  -或-  開啟資料流時發生錯誤。  -或-  <see langword="Content-type" /> 標頭不是 <see langword="null" /> 或 "application/x-www-form-urlencoded"。</exception>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.UseDefaultCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDefaultCredentials As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDefaultCredentials { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得或設定 <see cref="T:System.Boolean" /> 值，控制是否隨著要求傳送 <see cref="P:System.Net.CredentialCache.DefaultCredentials" />。</summary>
        <value>如果使用預設認證，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將此屬性設定為`true`當要求所做的變更<xref:System.Net.WebClient>物件應該如果伺服器要求進行驗證使用目前登入使用者的預設認證。 用戶端應用程式，這是所要的行為，在大部分情況下。 對於中介層應用程式，例如 ASP.NET 應用程式，而不是使用這個屬性，您需要設定<xref:System.Net.WebClient.Credentials%2A>代表其提出要求的用戶端認證的屬性。  
  
   
  
## Examples  
 下列程式碼範例將示範如何設定這個屬性。  
  
 [!code-cpp[NCLWebClientAsync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#3)]
 [!code-csharp[NCLWebClientAsync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#3)]
 [!code-vb[NCLWebClientAsync#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStreamClosed">
      <MemberSignature Language="C#" Value="public event System.Net.WriteStreamClosedEventHandler WriteStreamClosed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.WriteStreamClosedEventHandler WriteStreamClosed" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.WriteStreamClosed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event WriteStreamClosed As WriteStreamClosedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::WriteStreamClosedEventHandler ^ WriteStreamClosed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.WriteStreamClosedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在使用寫入資料流以將資料寫入資源的非同步作業已關閉時發生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次非同步作業，用來將資料寫入至資源，使用 寫入資料流已關閉時，都會引發這個事件。 這些作業會導致從呼叫<xref:System.Net.WebClient.OpenWriteTaskAsync%2A>方法。  
  
 <xref:System.Net.WriteStreamClosedEventHandler>是針對此事件的委派。 <xref:System.Net.WriteStreamClosedEventArgs>類別提供的事件資料的事件處理常式。  
  
 如需處理事件的詳細資訊，請參閱[NIB： 使用事件](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>