<Type Name="HttpListener" FullName="System.Net.HttpListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f991291f719da3b2389d059c7533baa7d1e345a0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-TW" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36472512" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpListener : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpListener extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListener" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListener&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListener sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type HttpListener = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Provides a simple, programmatically controlled HTTP protocol listener. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Net.HttpListener>類別，您可以建立簡單的 HTTP 通訊協定接聽程式以回應 HTTP 要求。 接聽程式均可使用的存留期<xref:System.Net.HttpListener>物件，並以其權限的應用程式中執行。
   
 若要使用<xref:System.Net.HttpListener>，建立使用類別的新執行個體<xref:System.Net.HttpListener>建構函式和使用<xref:System.Net.HttpListener.Prefixes%2A>屬性來存取保存字串，其中指定的統一資源識別元 (URI) 的集合做為前置詞<xref:System.Net.HttpListener>應該處理。
  
 URI 的前置詞字串是由配置 （http 或 https）、 主機、 選用連接埠和選擇性路徑所組成。 完整的前置詞字串的範例是* http://www.contoso.com:8080/customerData/ *。 前置詞必須結尾斜線 （"/"）。 <xref:System.Net.HttpListener>回應要求最符合要求的 URI 前置詞的物件。 多個<xref:System.Net.HttpListener>物件無法加入相同的前置詞;<xref:System.ComponentModel.Win32Exception>擲回例外狀況如果<xref:System.Net.HttpListener>新增已經在前置詞使用。
  
 指定連接埠時，裝載項目都可以使用取代"\*"表示<xref:System.Net.HttpListener>接受要求傳送至連接埠，如果要求的 URI 不符合任何前置詞。 比方說，若要接收的所有要求傳送至連接埠 8080 當要求的 URI 不由處理任何<xref:System.Net.HttpListener>，前置詞是*http://\*: 8080 /*。 同樣地，以指定<xref:System.Net.HttpListener>接受連接埠，傳送的所有要求的主機項目取代為"+"字元。 例如，*https://+:8080*。 「\*"和"+"字元可出現在 包含路徑的前置詞。
  
 .NET Core 2.0 或 Windows 10 上的.NET Framework 4.6 起，萬用字元子網域中支援所管理的 URI 前置詞<xref:System.Net.HttpListener>物件。 若要指定萬用字元子網域，請使用"\*"字元的 URI 前置詞中的主機名稱的一部分。 例如， *http://\*.foo.com/*。 將此變數傳遞做為引數<xref:System.Net.HttpListenerPrefixCollection.Add%2A>方法。 這適用於.NET Core 2.0 或 Windows 10; 上的.NET Framework 4.6 為準，在舊版中，這會產生<xref:System.Net.HttpListenerException>。

 > [!WARNING]
 > 最上層的萬用字元繫結 (*http://\*: 8080 /* 和* http://+:8080 *) 應該**不**使用。 最上層萬用字元繫結可能暴露您的應用程式安全性弱點。 這對強式與弱式萬用字元皆適用。 請使用明確主機名稱，而非萬用字元。 若您擁有整個父網域 (與具弱點的 `*.com` 相對) 的控制權，則子網域萬用字元繫結 (例如 `*.mysub.com`) 就沒有此安全性風險。 如需詳細資訊，請參閱 [rfc7230 5.4 節](https://tools.ietf.org/html/rfc7230#section-5.4)。
  
 若要開始接聽來自用戶端的要求，將 URI 前置詞加入至集合並呼叫<xref:System.Net.HttpListener.Start%2A>方法。 <xref:System.Net.HttpListener> 提供同步和非同步模式，處理用戶端要求。 要求和其相關聯的回應則使用存取<xref:System.Net.HttpListenerContext>所傳回物件<xref:System.Net.HttpListener.GetContext%2A>方法或其非同步對應項目<xref:System.Net.HttpListener.BeginGetContext%2A>和<xref:System.Net.HttpListener.EndGetContext%2A>方法。
  
 如果您的應用程式應該要封鎖等候用戶端要求時，如果您想要一次處理一個要求適合同步模型。 使用同步的模型時，呼叫<xref:System.Net.HttpListener.GetContext%2A>方法，等待用戶端傳送要求。 方法會傳回<xref:System.Net.HttpListenerContext>物件要處理時，就會發生。
  
 在更複雜的非同步模型中，您的應用程式不會封鎖同時等候要求和每個要求在它自己的執行緒中處理。 使用<xref:System.Net.HttpListener.BeginGetContext%2A>方法，以指定應用程式定義要呼叫的方法為每個連入要求。 該方法內呼叫<xref:System.Net.HttpListener.EndGetContext%2A>方法來取得要求、 處理它，並回應。
  
 在這兩種模式中，連入要求會使用存取<xref:System.Net.HttpListenerContext.Request%2A?displayProperty=nameWithType>屬性且由<xref:System.Net.HttpListenerRequest>物件。 同樣地，使用存取回應<xref:System.Net.HttpListenerContext.Response%2A?displayProperty=nameWithType>屬性且由<xref:System.Net.HttpListenerResponse>物件。 這些物件共用的某些功能<xref:System.Net.HttpWebRequest>和<xref:System.Net.HttpWebResponse>物件，而第二個物件不能搭配<xref:System.Net.HttpListener>因為它們實作用戶端、 不伺服器、 行為。
  
 <xref:System.Net.HttpListener>可以要求用戶端驗證。 您可以指定要用於驗證特定配置，或者您可以指定委派，會決定要使用的配置。 您必須要求某種形式的驗證，以取得用戶端身分識別的相關資訊。 如需詳細資訊，請參閱<xref:System.Net.HttpListenerContext.User%2A>， <xref:System.Net.HttpListener.AuthenticationSchemes%2A>，和<xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>屬性。
  
> [!NOTE]
> 如果您建立<xref:System.Net.HttpListener>使用 https，您必須選取伺服器憑證該接聽項。 否則，<xref:System.Net.HttpWebRequest>這個查詢<xref:System.Net.HttpListener>會失敗，意外的關閉的連接。
  
> [!NOTE]
> 您可以使用網路殼層 (netsh.exe)，來設定伺服器憑證和其他接聽程式選項。 請參閱[網路殼層 (Netsh)](/windows-server/networking/technologies/netsh/netsh)如需詳細資訊。 可執行檔開始隨附於 Windows Server 2008 和 Windows Vista。
  
> [!NOTE]
> 如果您指定多個驗證配置<xref:System.Net.HttpListener>，接聽程式是以下列順序的用戶端的挑戰： `Negotiate`， `NTLM`， `Digest`，然後`Basic`。
  
   
  
## Examples
 下列程式碼範例示範如何使用<xref:System.Net.HttpListener>。  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Net.HttpListener" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 之前使用此建構函式所傳回的執行個體，您必須叫用其<xref:System.Net.HttpListener.Start%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.HttpListener>建構函式來建立新<xref:System.Net.HttpListener>物件。 完整的範例，請參閱<xref:System.Net.HttpListener>類別主題。  
  
 [!code-csharp[Net_listener_Basic#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">This class cannot be used on the current operating system. Windows Server 2003 or Windows XP SP2 is required to use instances of this class.</exception>
        <block subset="none" type="usage">
          <para>注意： 這個成員會輸出追蹤資訊在應用程式中啟用網路追蹤時。如需詳細資訊，請參閱 [追蹤.NET Framework](~/docs/framework/network-programming/network-tracing.md) 中的網路。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="httpListener.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Shuts down the <see cref="T:System.Net.HttpListener" /> object immediately, discarding all currently queued requests.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會處置此接聽程式所持有的所有資源。 任何暫止要求都無法完成。  
  
 之後呼叫這個方法，您會收到<xref:System.ObjectDisposedException>如果您嘗試使用這個<xref:System.Net.HttpListener>。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個方法。  
  
 [!code-csharp[Net_Listener_Basic#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>您的應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。如需詳細資訊，請參閱 [追蹤.NET Framework](~/docs/framework/network-programming/network-tracing.md) 中的網路。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemes">
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemes AuthenticationSchemes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.AuthenticationSchemes AuthenticationSchemes" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.AuthenticationSchemes" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationSchemes As AuthenticationSchemes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::AuthenticationSchemes AuthenticationSchemes { System::Net::AuthenticationSchemes get(); void set(System::Net::AuthenticationSchemes value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationSchemes : System.Net.AuthenticationSchemes with get, set" Usage="System.Net.HttpListener.AuthenticationSchemes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.AuthenticationSchemes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the scheme used to authenticate clients.</summary>
        <value>
          <see cref="T:System.Net.AuthenticationSchemes" /> 列舉值的位元組合，表示用戶端的驗證方式。 預設值是 <see cref="F:System.Net.AuthenticationSchemes.Anonymous" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener>使用指定的配置來驗證所有連入要求。 <xref:System.Net.HttpListener.GetContext%2A>和<xref:System.Net.HttpListener.EndGetContext%2A>方法才會傳回傳入的用戶端要求<xref:System.Net.HttpListener>順利通過驗證的要求。  
  
 您可以使用查閱成功驗證的用戶端的身分識別<xref:System.Net.HttpListenerContext.User%2A?displayProperty=nameWithType>屬性。  
  
 如果您想<xref:System.Net.HttpListener>物件以使用不同的驗證機制會根據所接收的要求特性 (例如，要求的<xref:System.Net.HttpListenerRequest.Url%2A>或<xref:System.Net.HttpListenerRequest.UserHostName%2A>屬性)，您必須實作選擇的方法驗證配置。 如需有關如何執行這項操作的指示，請參閱<xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>屬性文件。  
  
> [!NOTE]
>  若要設定這個屬性，以啟用 Digest，NTLM 或交涉需要<xref:System.Security.Permissions.SecurityPermission>， <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.HttpListener.AuthenticationSchemes%2A>屬性來指定驗證配置。  
  
 [!code-csharp[Net_listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationSchemeSelectorDelegate">
      <MemberSignature Language="C#" Value="public System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationSchemeSelectorDelegate As AuthenticationSchemeSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::AuthenticationSchemeSelector ^ AuthenticationSchemeSelectorDelegate { System::Net::AuthenticationSchemeSelector ^ get(); void set(System::Net::AuthenticationSchemeSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationSchemeSelectorDelegate : System.Net.AuthenticationSchemeSelector with get, set" Usage="System.Net.HttpListener.AuthenticationSchemeSelectorDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.AuthenticationSchemeSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the delegate called to determine the protocol used to authenticate clients.</summary>
        <value>
          <see cref="T:System.Net.AuthenticationSchemeSelector" /> 委派，叫用用來選取驗證通訊協定的方法。 預設值是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  如果您想要用於特定的執行個體所處理的所有要求相同的驗證通訊協定<xref:System.Net.HttpListener>，您不需要設定此屬性。 若要指定要用於所有用戶端要求的通訊協定，使用<xref:System.Net.HttpListener.AuthenticationSchemes%2A>屬性。  
  
 如果用戶端沒有在其標頭，指定驗證資訊<xref:System.Net.HttpListener>呼叫指定的每個未驗證的傳入要求，來判斷，如果有的話，要使用通訊協定來驗證用戶端的委派。 <xref:System.Net.HttpListener.GetContext%2A>和<xref:System.Net.HttpListener.EndGetContext%2A>方法會傳回傳入的要求才<xref:System.Net.HttpListener>成功驗證要求。 如果無法驗證要求，<xref:System.Net.HttpListener>自動傳送回去 401 回應。 您可以取得已成功驗證用戶端使用的身分識別<xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=nameWithType>屬性。  
  
 委派的驗證通訊協定的應用程式專屬方法來選擇適合您想要的執行個體<xref:System.Net.HttpListener>使用不同的驗證通訊協定會根據它所收到 （要求的特性例如，要求的<xref:System.Net.HttpListenerRequest.Url%2A>或<xref:System.Net.HttpListenerRequest.UserHostAddress%2A>屬性)。  
  
> [!NOTE]
>  若要設定這個屬性，以啟用 Digest，NTLM 或交涉需要<xref:System.Security.Permissions.SecurityPermission>， <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal>。  
  
   
  
## Examples  
 下列程式碼範例會設定這個屬性的值。  
  
 [!code-csharp[NclListener#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#2)]
 [!code-vb[NclListener#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#2)]  
  
 下列程式碼範例提供叫用方法的實作<xref:System.Net.AuthenticationSchemeSelector>委派。  
  
 [!code-csharp[NclListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLListener/CS/sample.cs#1)]
 [!code-vb[NclListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLListener/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginGetContext">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginGetContext (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginGetContext(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginGetContext (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginGetContext(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginGetContext : AsyncCallback * obj -&gt; IAsyncResult" Usage="httpListener.BeginGetContext (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when a client request is available.</param>
        <param name="state">A user-defined object that contains information about the operation. This object is passed to the <c>callback</c> delegate when the operation completes.</param>
        <summary>Begins asynchronously retrieving an incoming request.</summary>
        <returns>An <see cref="T:System.IAsyncResult" /> object that indicates the status of the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener.BeginGetContext%2A>方法開始的非同步 （非封鎖） 呼叫接收內送的用戶端要求。 之前呼叫這個方法，您必須呼叫<xref:System.Net.HttpListener.Start%2A>方法並加入至少一個統一資源識別元 (URI) 前置詞加 URI 字串，以接聽<xref:System.Net.HttpListenerPrefixCollection>傳回<xref:System.Net.HttpListener.Prefixes%2A>屬性。  
  
 非同步作業必須完成呼叫<xref:System.Net.HttpListener.EndGetContext%2A>方法。 一般而言，方法由叫用`callback`委派。  
  
 在作業完成時，這個方法不會封鎖。 若要取得連入要求和區塊的作業完成之前，呼叫<xref:System.Net.HttpListener.GetContext%2A>方法。  
  
 如需使用非同步程式設計模型的詳細資訊，請參閱[非同步呼叫同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.HttpListener.BeginGetContext%2A>方法，以指定將會處理內送的用戶端要求的回呼方法。  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 下列程式碼範例會實作回呼方法。  
  
 [!code-csharp[Net_Listener_Basic#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException">A Win32 function call failed. Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</exception>
        <exception cref="T:System.InvalidOperationException">This object has not been started or is currently stopped.</exception>
        <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
        <block subset="none" type="usage">
          <para>您的應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。如需詳細資訊，請參閱 [追蹤.NET Framework](~/docs/framework/network-programming/network-tracing.md) 中的網路。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="httpListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Shuts down the <see cref="T:System.Net.HttpListener" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 之後呼叫這個方法，您無法再使用<xref:System.Net.HttpListener>物件。 若要暫時暫停<xref:System.Net.HttpListener>物件，請使用<xref:System.Net.HttpListener.Stop%2A>方法。  
  
 這個方法關閉清單<xref:System.Net.HttpListener>物件，而不處理要求排入佇列。 任何暫止要求都無法完成。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個方法。  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>您的應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。如需詳細資訊，請參閱 [追蹤.NET Framework](~/docs/framework/network-programming/network-tracing.md) 中的網路。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DefaultServiceNames">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.DefaultServiceNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultServiceNames As ServiceNameCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Authentication::ExtendedProtection::ServiceNameCollection ^ DefaultServiceNames { System::Security::Authentication::ExtendedProtection::ServiceNameCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultServiceNames : System.Security.Authentication.ExtendedProtection.ServiceNameCollection" Usage="System.Net.HttpListener.DefaultServiceNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ServiceNameCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a default list of Service Provider Names (SPNs) as determined by registered prefixes.</summary>
        <value>
          <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" />，包含 SPN 清單。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener.DefaultServiceNames%2A>屬性搭配整合式 Windows 驗證以提供延伸的保護。 Spn 的清單初始化自<xref:System.Net.HttpListener.Prefixes%2A>屬性時存取並清除 加入新的前置詞時<xref:System.Net.HttpListener.Prefixes%2A>屬性。  
  
 <xref:System.Net.HttpListener.DefaultServiceNames%2A>屬性使用應用程式不會設定<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames%2A>其延伸的保護原則上的屬性。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection> ，會擷取與<xref:System.Net.HttpListener.DefaultServiceNames%2A>屬性從建置<xref:System.Net.HttpListener.Prefixes%2A>屬性根據下列規則：  
  
1.  如果主機名稱為"+""*"，或 IPv4 或 IPv6 常值 (相當於"\*"但限制為特定的本機介面)，加入下列的 SPN:  
  
 `"HTTP/"` 加上電腦的完整的網域名稱。  
  
1.  如果主機名稱不包含句點 （沒有網域或子網域），嘗試使用 DNS 完整網域名稱解析 (使用相同的行為<xref:System.Net.HttpWebRequest>)。 如果可以解析的完整網域名稱，則會加入下列的 Spn:  
  
 `"HTTP/"` 加上的主機名稱 （簡短名稱）。  
  
 `"HTTP/"` 加上主機名稱的完整的網域名稱。  
  
1.  如果主機名稱包含不點 （沒有網域或子網域），而無法解析完整網域名稱，則會加入下列的 SPN:  
  
 `"HTTP/"` 加上主機名稱。  
  
1.  如果主機名稱包含句點 （網域或子網域），則會加入下列的 SPN:  
  
 `"HTTP/"` 加上主機名稱。  
  
 <xref:System.Net.HttpListener.DefaultServiceNames%2A>屬性可以由應用程式用來檢閱清單，如果未不提供任何自訂的清單會用於驗證的預設 spn。 如需其他 Spn，應用程式可以將它們使用其中一種<xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge%2A>方法。  
  
 使用延伸的保護原則決策依據要求的 URL，因為這可能會被欺騙時，它並不安全。 相反地，應用程式應該會仰賴<xref:System.Net.HttpListenerRequest.LocalEndPoint%2A>或<xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A>屬性，使這類原則決策。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="EndGetContext">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerContext EndGetContext (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.HttpListenerContext EndGetContext(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndGetContext (asyncResult As IAsyncResult) As HttpListenerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::HttpListenerContext ^ EndGetContext(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndGetContext : IAsyncResult -&gt; System.Net.HttpListenerContext" Usage="httpListener.EndGetContext asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">An <see cref="T:System.IAsyncResult" /> object that was obtained when the asynchronous operation was started.</param>
        <summary>Completes an asynchronous operation to retrieve an incoming client request.</summary>
        <returns>An <see cref="T:System.Net.HttpListenerContext" /> object that represents the client request.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener.EndGetContext%2A>呼叫方法時，通常出現在應用程式定義的回呼方法的委派中，以取得所叫用<xref:System.Net.HttpListenerContext>物件，包含傳入的用戶端要求和其相關聯的回應。 這個方法完成作業，藉由呼叫先前已啟動<xref:System.Net.HttpListener.BeginGetContext%2A>方法。 如果作業尚未完成，這個方法會封鎖，直到它執行。  
  
 因為呼叫<xref:System.Net.HttpListener.EndGetContext%2A>方法需要<xref:System.Net.HttpListener>物件，這個物件通常會傳遞至回呼方法的使用狀態物件傳遞至<xref:System.Net.HttpListener.BeginGetContext%2A>方法。 您可以使用，以取得此狀態物件<xref:System.IAsyncResult.AsyncState%2A>屬性`asyncResult`物件。  
  
 如需使用非同步程式設計模型的詳細資訊，請參閱[非同步呼叫同步方法](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)  
  
   
  
## Examples  
 下列程式碼範例示範呼叫的回呼方法的實作<xref:System.Net.HttpListener.EndGetContext%2A>方法。  
  
 [!code-csharp[Net_Listener_Basic#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> was not obtained by calling the <see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> method.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The <see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> method was already called for the specified <paramref name="asyncResult" /> object.</exception>
        <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
        <block subset="none" type="usage">
          <para>您的應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。如需詳細資訊，請參閱 [追蹤.NET Framework](~/docs/framework/network-programming/network-tracing.md) 中的網路。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProtectionPolicy">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtendedProtectionPolicy As ExtendedProtectionPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ ExtendedProtectionPolicy { System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ get(); void set(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProtectionPolicy : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy with get, set" Usage="System.Net.HttpListener.ExtendedProtectionPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("not used anywhere in the implementation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get or set the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> to use for extended protection for a session.</summary>
        <value>
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />，指定延伸保護所使用的原則。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>屬性搭配整合式 Windows 驗證以提供延伸的保護。 <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>屬性所允許的延伸的保護原則，為整個組態<xref:System.Net.HttpListener>工作階段。 <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A>屬性所允許的每個要求的延伸的保護原則設定。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A>屬性必須是`null`。 <xref:System.Net.HttpListener>執行個體直接從自己的 TLS 工作階段取得通道繫結權杖 (CBT) 有一個。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property, but the <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> property was not <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property to <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> property after the <see cref="M:System.Net.HttpListener.Start" /> method was already called.</exception>
        <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
        <exception cref="T:System.PlatformNotSupportedException">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement" /> property was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</exception>
        <altmember cref="P:System.Net.HttpListener.DefaultServiceNames" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="ExtendedProtectionSelectorDelegate">
      <MemberSignature Language="C#" Value="public System.Net.HttpListener.ExtendedProtectionSelector ExtendedProtectionSelectorDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListener/ExtendedProtectionSelector ExtendedProtectionSelectorDelegate" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
      <MemberSignature Language="VB.NET" Value="Public Property ExtendedProtectionSelectorDelegate As HttpListener.ExtendedProtectionSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListener::ExtendedProtectionSelector ^ ExtendedProtectionSelectorDelegate { System::Net::HttpListener::ExtendedProtectionSelector ^ get(); void set(System::Net::HttpListener::ExtendedProtectionSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProtectionSelectorDelegate : System.Net.HttpListener.ExtendedProtectionSelector with get, set" Usage="System.Net.HttpListener.ExtendedProtectionSelectorDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListener+ExtendedProtectionSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get or set the delegate called to determine the <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> to use for each request.</summary>
        <value>
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />，指定延伸保護所使用的原則。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>屬性搭配整合式 Windows 驗證以提供延伸的保護。 <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>屬性所允許的延伸的保護原則，為整個組態<xref:System.Net.HttpListener>工作階段。 <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A>屬性所允許的每個個別要求的延伸的保護原則設定。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A>屬性必須是`null`。 <xref:System.Net.HttpListener>執行個體直接從自己的 TLS 工作階段取得通道繫結權杖 (CBT) 有一個。  
  
 針對每個要求中，委派可以選擇的設定，<xref:System.Net.HttpListener>執行個體會使用提供延伸的保護。  
  
 如果委派傳回`null`對於這個屬性，這代表<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy>其中<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>屬性設定為<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property, but the <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> property must be <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentNullException">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property to <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property after the <see cref="M:System.Net.HttpListener.Start" /> method was already called.</exception>
        <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
        <exception cref="T:System.PlatformNotSupportedException">An attempt was made to set the <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> property on a platform that does not support extended protection.</exception>
        <altmember cref="P:System.Net.HttpListener.DefaultServiceNames" />
        <altmember cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" />
        <altmember cref="T:System.Net.HttpListener.ExtendedProtectionSelector" />
        <altmember cref="N:System.Security.Authentication.ExtendedProtection" />
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerContext GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.HttpListenerContext GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As HttpListenerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::HttpListenerContext ^ GetContext();" />
      <MemberSignature Language="F#" Value="member this.GetContext : unit -&gt; System.Net.HttpListenerContext" Usage="httpListener.GetContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Waits for an incoming request and returns when one is received.</summary>
        <returns>An <see cref="T:System.Net.HttpListenerContext" /> object that represents a client request.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 之前呼叫這個方法，您必須呼叫<xref:System.Net.HttpListener.Start%2A>方法並加入至少一個接聽所加入的 URI 字串的 URI 前置詞<xref:System.Net.HttpListenerPrefixCollection>傳回<xref:System.Net.HttpListener.Prefixes%2A>屬性。 前置詞的詳細說明，請參閱<xref:System.Net.HttpListener>類別概觀。  
  
 這個方法會封鎖等候傳入要求。 如果您想要進行處理以非同步方式 （在個別執行緒上） 中，以供您的應用程式不會封鎖連入要求，請使用<xref:System.Net.HttpListener.BeginGetContext%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何呼叫這個方法。  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException">A Win32 function call failed. Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</exception>
        <exception cref="T:System.InvalidOperationException">This object has not been started or is currently stopped.  -or-  The <see cref="T:System.Net.HttpListener" /> does not have any Uniform Resource Identifier (URI) prefixes to respond to.</exception>
        <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
        <block subset="none" type="usage">
          <para>您的應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。如需詳細資訊，請參閱 [追蹤.NET Framework](~/docs/framework/network-programming/network-tracing.md) 中的網路。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetContextAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt; GetContextAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.HttpListenerContext&gt; GetContextAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.GetContextAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextAsync () As Task(Of HttpListenerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::HttpListenerContext ^&gt; ^ GetContextAsync();" />
      <MemberSignature Language="F#" Value="member this.GetContextAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt;" Usage="httpListener.GetContextAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.HttpListenerContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Waits for an incoming request as an asynchronous operation.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation. The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property on the task object returns an <see cref="T:System.Net.HttpListenerContext" /> object that represents a client request.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這項作業不會封鎖。 傳回<xref:System.Threading.Tasks.Task%601>物件將會完成時收到內送要求。  
  
 之前呼叫這個方法，您必須呼叫<xref:System.Net.HttpListener.Start%2A>方法並加入至少一個接聽所加入的 URI 字串的 URI 前置詞<xref:System.Net.HttpListenerPrefixCollection>傳回<xref:System.Net.HttpListener.Prefixes%2A>屬性。 前置詞的詳細說明，請參閱<xref:System.Net.HttpListener>類別概觀。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListenerContext" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWriteExceptions">
      <MemberSignature Language="C#" Value="public bool IgnoreWriteExceptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWriteExceptions" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IgnoreWriteExceptions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWriteExceptions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWriteExceptions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreWriteExceptions : bool with get, set" Usage="System.Net.HttpListener.IgnoreWriteExceptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether your application receives exceptions that occur when an <see cref="T:System.Net.HttpListener" /> sends the response to the client.</summary>
        <value>如果這個 <see cref="T:System.Net.HttpListener" /> 不應傳回在傳送回應至用戶端時所發生的例外狀況，則為 <see langword="true" />；否則為 <see langword="false" />。 預設值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 將此屬性設定為`true`如果您的應用程式不需要回應，已成功傳送給每個用戶端。  
  
   
  
## Examples  
 下列程式碼範例將示範如何設定這個屬性。  
  
 [!code-csharp[Net_Listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsListening">
      <MemberSignature Language="C#" Value="public bool IsListening { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsListening" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IsListening" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsListening As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsListening { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsListening : bool" Usage="System.Net.HttpListener.IsListening" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether <see cref="T:System.Net.HttpListener" /> has been started.</summary>
        <value>如果已啟動 <see cref="T:System.Net.HttpListener" />，則為 <see langword="true" />；否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要啟動<xref:System.Net.HttpListener>，呼叫<xref:System.Net.HttpListener.Start%2A>方法。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用這個屬性來判斷執行個體的接聽狀態。  
  
 [!code-csharp[Net_Listener_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupported">
      <MemberSignature Language="C#" Value="public static bool IsSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsSupported" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.IsSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsSupported As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsSupported { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSupported : bool" Usage="System.Net.HttpListener.IsSupported" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether <see cref="T:System.Net.HttpListener" /> can be used with the current operating system.</summary>
        <value>如果支援 <see cref="T:System.Net.HttpListener" />，則為 <see langword="true" />；否則為 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個類別是只能在執行 Windows XP SP2 或 Windows Server 2003 作業系統的電腦上使用。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.HttpListener.IsSupported%2A>屬性來偵測是否<xref:System.Net.HttpListener>物件可以用與目前的作業系統。  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixes">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerPrefixCollection Prefixes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerPrefixCollection Prefixes" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.Prefixes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Prefixes As HttpListenerPrefixCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerPrefixCollection ^ Prefixes { System::Net::HttpListenerPrefixCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Prefixes : System.Net.HttpListenerPrefixCollection" Usage="System.Net.HttpListener.Prefixes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerPrefixCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the Uniform Resource Identifier (URI) prefixes handled by this <see cref="T:System.Net.HttpListener" /> object.</summary>
        <value>
          <see cref="T:System.Net.HttpListenerPrefixCollection" />，包含這個 <see cref="T:System.Net.HttpListener" /> 物件設定要處理的 URI 前置詞。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前置詞會採用標準格式。 前置詞的詳細說明，請參閱<xref:System.Net.HttpListener>類別概觀。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.HttpListener.Prefixes%2A>屬性來取得和列印處理的 URI 前置詞。  
  
 [!code-csharp[Net_Listener_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      </Docs>
    </Member>
    <Member MemberName="Realm">
      <MemberSignature Language="C#" Value="public string Realm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Realm" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.Realm" />
      <MemberSignature Language="VB.NET" Value="Public Property Realm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Realm { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Realm : string with get, set" Usage="System.Net.HttpListener.Realm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the realm, or resource partition, associated with this <see cref="T:System.Net.HttpListener" /> object.</summary>
        <value>
          <see cref="T:System.String" /> 值，包含與 <see cref="T:System.Net.HttpListener" /> 物件關聯的領域名稱。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 伺服器使用領域來分割受保護的資源;每個資料分割可以有自己的驗證配置和 （或） 授權資料庫。 領域只限於基本和摘要式驗證使用。 當用戶端成功驗證之後，驗證對指定領域中的所有資源都有效。 領域的詳細說明，請參閱 RFC 2617 在[ https://www.ietf.org/ ](https://www.ietf.org/)。  
  
 執行個體<xref:System.Net.HttpListener>有只有一個相關聯的領域。  
  
   
  
## Examples  
 下列程式碼範例示範如何設定<xref:System.Net.HttpListener.Realm%2A>屬性。  
  
 [!code-csharp[Net_Listener_Basic#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="httpListener.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Allows this instance to receive incoming requests.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必須呼叫這個方法，才能呼叫<xref:System.Net.HttpListener.GetContext%2A>或<xref:System.Net.HttpListener.BeginGetContext%2A>方法。  
  
 啟動之後<xref:System.Net.HttpListener>物件，您可以使用<xref:System.Net.HttpListener.Stop%2A>方法可加以停止。  
  
> [!NOTE]
>  如果此接聽程式執行個體使用 https，您必須安裝並選取 伺服器憑證。 否則，<xref:System.Net.HttpWebRequest>這個查詢<xref:System.Net.HttpListener>會失敗，意外的關閉的連接。 您可以使用 HttpCfg.exe 來設定伺服器憑證和其他接聽程式選項。 請參閱[ http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp ](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp)如需詳細資訊。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.HttpListener.Start%2A>方法開始處理傳入要求。  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException">A Win32 function call failed. Check the exception's <see cref="P:System.Net.HttpListenerException.ErrorCode" /> property to determine the cause of the exception.</exception>
        <exception cref="T:System.ObjectDisposedException">This object is closed.</exception>
        <block subset="none" type="usage">
          <para>您的應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。如需詳細資訊，請參閱 [追蹤.NET Framework](~/docs/framework/network-programming/network-tracing.md) 中的網路。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="httpListener.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes this instance to stop receiving incoming requests.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果這個執行個體已停止，呼叫這個方法沒有任何作用。  
  
 您已停止之後<xref:System.Net.HttpListener>物件，您可以使用<xref:System.Net.HttpListener.Start%2A>方法來重新啟動它。  
  
   
  
## Examples  
 下列程式碼範例示範如何使用<xref:System.Net.HttpListener.Stop%2A>停止處理內送要求的方法。  
  
 [!code-csharp[Net_Listener_Basic#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
        <block subset="none" type="usage">
          <para>您的應用程式中啟用網路追蹤時，這個成員會輸出追蹤資訊。如需詳細資訊，請參閱 [追蹤.NET Framework](~/docs/framework/network-programming/network-tracing.md) 中的網路。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListener.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources held by this <see cref="T:System.Net.HttpListener" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 應用程式應該使用<xref:System.Net.HttpListener.Close%2A>方法，而非呼叫這個方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutManager">
      <MemberSignature Language="C#" Value="public System.Net.HttpListenerTimeoutManager TimeoutManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.HttpListenerTimeoutManager TimeoutManager" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.TimeoutManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutManager As HttpListenerTimeoutManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::HttpListenerTimeoutManager ^ TimeoutManager { System::Net::HttpListenerTimeoutManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeoutManager : System.Net.HttpListenerTimeoutManager" Usage="System.Net.HttpListener.TimeoutManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.HttpListenerTimeoutManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The timeout manager for this <see cref="T:System.Net.HttpListener" /> instance.</summary>
        <value>傳回 <see cref="T:System.Net.HttpListenerTimeoutManager" />。  這個 <see cref="T:System.Net.HttpListener" /> 執行個體的逾時管理員。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 逾時管理員定義的連接逾時限制此<xref:System.Net.HttpListener>執行個體。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeConnectionNtlmAuthentication">
      <MemberSignature Language="C#" Value="public bool UnsafeConnectionNtlmAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnsafeConnectionNtlmAuthentication" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListener.UnsafeConnectionNtlmAuthentication" />
      <MemberSignature Language="VB.NET" Value="Public Property UnsafeConnectionNtlmAuthentication As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnsafeConnectionNtlmAuthentication { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UnsafeConnectionNtlmAuthentication : bool with get, set" Usage="System.Net.HttpListener.UnsafeConnectionNtlmAuthentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Support for NTLM needs some loving.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a <see cref="T:System.Boolean" /> value that controls whether, when NTLM is used, additional requests using the same Transmission Control Protocol (TCP) connection are required to authenticate.</summary>
        <value>如果第一個要求的 <see cref="T:System.Security.Principal.IIdentity" /> 將用於相同連接上的後續要求，則為 <see langword="true" />；否則為 <see langword="false" />。 預設值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 當這個屬性設定為`true`透過特定的 TCP 連接的第一個要求會使用 NTLM 進行驗證，透過相同的 TCP 連線的後續要求將會使用處理的驗證資訊 (<xref:System.Security.Principal.IIdentity>) 的初始要求。  
  
 當 NTLM 不是驗證通訊協定時，這個屬性不會有任何作用。 做為驗證通訊協定指定交涉時，這個屬性才 NTLM 是實際的通訊協定用於驗證，就會有效果。  
  
> [!NOTE]
>  若要設定這個屬性時`true`可提升效能，因為<xref:System.Net.HttpListener>不傳送其他 NTLM 驗證挑戰，不需要提供驗證資訊的所有要求中有安全性風險。 您必須決定是否值得冒這個風險以提升效能。  
  
   
  
## Examples  
 下列程式碼範例將示範如何設定這個屬性。  
  
 [!code-csharp[Net_Listener_Basic#14](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">This object has been closed.</exception>
      </Docs>
    </Member>
  </Members>
</Type>