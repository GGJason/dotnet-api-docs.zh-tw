<Type Name="CredentialCache" FullName="System.Net.CredentialCache">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5e0df43543c21987e6c924e10132329c03f427b5" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-TW" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52211689" /></Metadata><TypeSignature Language="C#" Value="public class CredentialCache : System.Collections.IEnumerable, System.Net.ICredentials, System.Net.ICredentialsByHost" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CredentialCache extends System.Object implements class System.Collections.IEnumerable, class System.Net.ICredentials, class System.Net.ICredentialsByHost" />
  <TypeSignature Language="DocId" Value="T:System.Net.CredentialCache" />
  <TypeSignature Language="VB.NET" Value="Public Class CredentialCache&#xA;Implements ICredentials, ICredentialsByHost, IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CredentialCache : System::Collections::IEnumerable, System::Net::ICredentials, System::Net::ICredentialsByHost" />
  <TypeSignature Language="F#" Value="type CredentialCache = class&#xA;    interface ICredentials&#xA;    interface ICredentialsByHost&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Net.ICredentials</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Net.ICredentialsByHost</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供多個認證的儲存區。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.CredentialCache>類別會儲存多個網際網路資源的認證。 需要存取多個資源的應用程式可以儲存在這些資源的認證<xref:System.Net.CredentialCache>再提供適當的網際網路資源時所需的認證集的執行個體。 當<xref:System.Net.CredentialCache.GetCredential%2A>呼叫方法、 它會比較統一資源識別元 (URI) 和提供的驗證型別儲存在快取，並傳回第一組相符的認證。  
  
 <xref:System.Net.CredentialCache.DefaultCredentials%2A>屬性包含目前的安全性內容的系統認證。 用戶端應用程式，這些代表使用者名稱、 密碼和網域目前已登入的使用者。 ASP.NET 應用程式，預設認證是使用者的認證登入的使用者或使用者被模擬。  
  
   
  
## Examples  
 下列程式碼範例會初始化<xref:System.Net.CredentialCache>具有多個安全性認證和使用這些認證與<xref:System.Net.WebRequest>。  
  
 [!code-cpp[Classic CredentialCache.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CredentialCache.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CS/source.cs#1)]
 [!code-vb[Classic CredentialCache.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic CredentialCache.Add Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.ICredentials" />
    <altmember cref="P:System.Net.WebRequest.Credentials" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CredentialCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CredentialCache();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>建立 <see cref="T:System.Net.CredentialCache" /> 類別的新執行個體。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建構函式建立<xref:System.Net.CredentialCache>執行個體。  
  
   
  
## Examples  
 下列程式碼範例會初始化<xref:System.Net.CredentialCache>具有多個安全性認證和使用這些認證與<xref:System.Net.WebRequest>。  
  
 [!code-cpp[Classic CredentialCache.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CredentialCache.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CS/source.cs#1)]
 [!code-vb[Classic CredentialCache.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic CredentialCache.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將 <see cref="T:System.Net.NetworkCredential" /> 執行個體加入至認證快取。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (Uri uriPrefix, string authType, System.Net.NetworkCredential cred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Uri uriPrefix, string authType, class System.Net.NetworkCredential cred) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (uriPrefix As Uri, authType As String, cred As NetworkCredential)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(Uri ^ uriPrefix, System::String ^ authType, System::Net::NetworkCredential ^ cred);" />
      <MemberSignature Language="F#" Value="member this.Add : Uri * string * System.Net.NetworkCredential -&gt; unit" Usage="credentialCache.Add (uriPrefix, authType, cred)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.Uri" />
        <Parameter Name="authType" Type="System.String" />
        <Parameter Name="cred" Type="System.Net.NetworkCredential" />
      </Parameters>
      <Docs>
        <param name="uriPrefix"><see cref="T:System.Uri" />，指定認證允許存取之資源的 URI 前置詞。</param>
        <param name="authType">驗證配置，由在 <paramref name="uriPrefix" /> 中指名的資源所使用。</param>
        <param name="cred"><see cref="T:System.Net.NetworkCredential" />，要加入至認證快取。</param>
        <summary>將要搭配 SMTP 以外其他通訊協定使用的 <see cref="T:System.Net.NetworkCredential" /> 執行個體加入至認證快取，並使其與統一資源識別元 (URI) 和驗證通訊協定產生關聯。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.CredentialCache.Add%2A>方法上的芳鄰<xref:System.Net.NetworkCredential>到 SMTP 以外的通訊協定搭配使用的執行個體<xref:System.Net.CredentialCache>。 快取中，加入的順序儲存的認證。 當<xref:System.Net.CredentialCache.GetCredential%28System.Uri%2CSystem.String%29>呼叫方法，它會傳回適當的比對<xref:System.Net.NetworkCredential>執行個體。  
  
   
  
## Examples  
 下列程式碼範例會初始化<xref:System.Net.CredentialCache>具有多個安全性認證和使用這些認證與<xref:System.Net.WebRequest>。  
  
 [!code-cpp[Classic CredentialCache.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CredentialCache.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic CredentialCache.Add Example/CS/source.cs#1)]
 [!code-vb[Classic CredentialCache.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic CredentialCache.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="uriPrefix" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="authType" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">相同的認證會加入多次</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string host, int port, string authenticationType, System.Net.NetworkCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string host, int32 port, string authenticationType, class System.Net.NetworkCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (host As String, port As Integer, authenticationType As String, credential As NetworkCredential)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ host, int port, System::String ^ authenticationType, System::Net::NetworkCredential ^ credential);" />
      <MemberSignature Language="F#" Value="member this.Add : string * int * string * System.Net.NetworkCredential -&gt; unit" Usage="credentialCache.Add (host, port, authenticationType, credential)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="authenticationType" Type="System.String" />
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
      </Parameters>
      <Docs>
        <param name="host">識別主機電腦的 <see cref="T:System.String" />。</param>
        <param name="port"><see cref="T:System.Int32" />，指定 <paramref name="host" /> 上的連接埠。</param>
        <param name="authenticationType"><see cref="T:System.String" />，識別使用 <paramref name="host" /> 連接到 <paramref name="cred" /> 時，所使用的驗證配置。</param>
        <param name="credential"><see cref="T:System.Net.NetworkCredential" />，要加入至認證快取。</param>
        <summary>將要搭配 Simple Mail Transfer Protocol (SMTP) 使用的 <see cref="T:System.Net.NetworkCredential" /> 執行個體加入至認證快取，並使其與主機電腦、連接埠和驗證通訊協定產生關聯。 使用此方法加入的認證只適用於 SMTP。 這個方法不適用於 HTTP 或 FTP 要求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會放置<xref:System.Net.NetworkCredential>執行個體用於 SMTP 到<xref:System.Net.CredentialCache>。 快取中，加入的順序儲存的認證。 當<xref:System.Net.CredentialCache.GetCredential%28System.String%2CSystem.Int32%2CSystem.String%29>呼叫方法時，它會傳回<xref:System.Net.NetworkCredential>比對選取的執行個體`host`， `port`，和`authType`。 比較是不區分大小寫。  
  
 為支援的值`authType`"NTLM"、"Digest"、"Kerberos"，且"Negotiate"。  
  
 使用此方法加入的認證的有效期僅用於 SMTP。 這個方法不適用於 HTTP 或 FTP 通訊協定。  
  
   
  
## Examples  
 下列程式碼範例會初始化<xref:System.Net.CredentialCache>的多個安全性認證來與 SMTP 搭配使用，並使用其中一個這些認證以<xref:System.Net.Mail.SmtpClient>。  
  
 [!code-cpp[NCL_Credential.Cache.Add_SMTP#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCL_Credential.Cache.Add_SMTP/CPP/source.cpp#1)]
 [!code-csharp[NCL_Credential.Cache.Add_SMTP#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCL_Credential.Cache.Add_SMTP/cs/source.cs#1)]
 [!code-vb[NCL_Credential.Cache.Add_SMTP#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCL_Credential.Cache.Add_SMTP/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="host" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="authType" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="authType" /> 不是接受的值。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" /> 小於零。</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultCredentials">
      <MemberSignature Language="C#" Value="public static System.Net.ICredentials DefaultCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.ICredentials DefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.CredentialCache.DefaultCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultCredentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::ICredentials ^ DefaultCredentials { System::Net::ICredentials ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultCredentials : System.Net.ICredentials" Usage="System.Net.CredentialCache.DefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得應用程式的系統認證。</summary>
        <value><see cref="T:System.Net.ICredentials" />，表示應用程式的系統認證。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.CredentialCache.DefaultCredentials%2A>屬性僅適用於 NTLM、 交涉和 Kerberos 驗證。  
  
 <xref:System.Net.CredentialCache.DefaultCredentials%2A> 表示應用程式執行所在的目前安全性內容的系統認證。 用戶端應用程式，這些通常是使用者執行應用程式的 Windows 認證 （使用者名稱、 密碼和網域）。 ASP.NET 應用程式，預設認證是使用者的認證登入的使用者或正在模擬的使用者。  
  
 若要取得與認證<xref:System.Net.NetworkCredential>執行個體，使用<xref:System.Net.CredentialCache.DefaultNetworkCredentials%2A>屬性。  
  
 為支援的值`authType`"NTLM"、"Digest"、"Kerberos"，且"Negotiate"。 這個方法不適用於 HTTP 或 FTP 通訊協定。  
  
> [!NOTE]
>  <xref:System.Net.ICredentials>所傳回的執行個體<xref:System.Net.CredentialCache.DefaultCredentials%2A>不能用來檢視使用者名稱、 密碼或網域的目前安全性內容。  
  
   
  
## Examples  
 下列程式碼範例使用<xref:System.Net.CredentialCache.DefaultCredentials%2A>屬性來取得應用程式的系統認證。  
  
 [!code-cpp[CredentialCache_DefaultCredentials#1](~/samples/snippets/cpp/VS_Snippets_Remoting/CredentialCache_DefaultCredentials/CPP/credentialcache_defaultcredentials.cpp#1)]
 [!code-csharp[CredentialCache_DefaultCredentials#1](~/samples/snippets/csharp/VS_Snippets_Remoting/CredentialCache_DefaultCredentials/CS/credentialcache_defaultcredentials.cs#1)]
 [!code-vb[CredentialCache_DefaultCredentials#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CredentialCache_DefaultCredentials/VB/credentialcache_defaultcredentials.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">用於讀取 USERNAME 的環境變數。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DefaultNetworkCredentials">
      <MemberSignature Language="C#" Value="public static System.Net.NetworkCredential DefaultNetworkCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Net.NetworkCredential DefaultNetworkCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.CredentialCache.DefaultNetworkCredentials" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultNetworkCredentials As NetworkCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Net::NetworkCredential ^ DefaultNetworkCredentials { System::Net::NetworkCredential ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultNetworkCredentials : System.Net.NetworkCredential" Usage="System.Net.CredentialCache.DefaultNetworkCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得目前安全性內容的網路認證。</summary>
        <value><see cref="T:System.Net.NetworkCredential" />，表示目前使用者或應用程式的網路認證。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所傳回的認證<xref:System.Net.CredentialCache.DefaultNetworkCredentials%2A>屬性是僅適用於 NTLM、 交涉和 Kerberos 驗證。  
  
 所傳回的認證<xref:System.Net.CredentialCache.DefaultNetworkCredentials%2A>代表應用程式執行所在的目前安全性內容的驗證認證。 用戶端應用程式，這些通常是使用者執行應用程式的 Windows 認證 （使用者名稱、 密碼和網域）。 ASP.NET 應用程式，預設網路認證是使用者的認證登入的使用者或正在模擬的使用者。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">用於讀取 USERNAME 的環境變數。 相關聯的列舉型別： <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCredential">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>傳回與所指定之統一資源識別元 (URI) 或主機以及驗證類型關聯的 <see cref="T:System.Net.NetworkCredential" /> 執行個體。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCredential">
      <MemberSignature Language="C#" Value="public System.Net.NetworkCredential GetCredential (Uri uriPrefix, string authType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Net.NetworkCredential GetCredential(class System.Uri uriPrefix, string authType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.GetCredential(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCredential (uriPrefix As Uri, authType As String) As NetworkCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Net::NetworkCredential ^ GetCredential(Uri ^ uriPrefix, System::String ^ authType);" />
      <MemberSignature Language="F#" Value="abstract member GetCredential : Uri * string -&gt; System.Net.NetworkCredential&#xA;override this.GetCredential : Uri * string -&gt; System.Net.NetworkCredential" Usage="credentialCache.GetCredential (uriPrefix, authType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Net.ICredentials.GetCredential(System.Uri,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.Uri" />
        <Parameter Name="authType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriPrefix"><see cref="T:System.Uri" />，指定認證允許存取之資源的 URI 前置詞。</param>
        <param name="authType">驗證配置，由在 <paramref name="uriPrefix" /> 中指名的資源所使用。</param>
        <summary>傳回與所指定之統一資源識別項 (URI) 和驗證類型關聯的 <see cref="T:System.Net.NetworkCredential" /> 執行個體。</summary>
        <returns><see cref="T:System.Net.NetworkCredential" />，或 <see langword="null" /> (如果在快取中沒有相符的認證)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.CredentialCache.GetCredential%28System.Uri%2CSystem.String%29>方法會搜尋<xref:System.Net.CredentialCache>，並傳回<xref:System.Net.NetworkCredential>指定的 URI 和授權類型的執行個體。 如果<xref:System.Net.CredentialCache>包含沒有相符<xref:System.Net.NetworkCredential>執行個體，`null`會傳回。  
  
 <xref:System.Net.CredentialCache.GetCredential%2A> 使用快取中的最長相符的 URI 前置詞，來決定要傳回的授權類型的認證集。 下表顯示範例。  
  
|URI 前置詞|符合|  
|----------------|-------------|  
|`http://www.contoso.com/portal/news.htm`|在特定的 Web 網頁的要求`news.htm`。|  
|`http://www.contoso.com/portal/`|要求中的所有內容`portal`路徑中的，除了頁面`news.htm`。|  
|`http://www.contoso.com/`|在所有資源的要求`www.contoso.com`，但不包括在`portal`路徑。|  
  
   
  
## Examples  
 下列程式碼範例會使用<xref:System.Net.CredentialCache.GetCredential%28System.Uri%2CSystem.String%29>方法來傳回<xref:System.Net.NetworkCredential>與指定的 URI 和驗證類型相關聯的執行個體。  
  
 [!code-cpp[CredentialCache_GetCredential#1](~/samples/snippets/cpp/VS_Snippets_Remoting/CredentialCache_GetCredential/CPP/credentialcache_getcredential.cpp#1)]
 [!code-csharp[CredentialCache_GetCredential#1](~/samples/snippets/csharp/VS_Snippets_Remoting/CredentialCache_GetCredential/CS/credentialcache_getcredential.cs#1)]
 [!code-vb[CredentialCache_GetCredential#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CredentialCache_GetCredential/VB/credentialcache_getcredential.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="uriPrefix" /> 或 <paramref name="authType" /> 為 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCredential">
      <MemberSignature Language="C#" Value="public System.Net.NetworkCredential GetCredential (string host, int port, string authenticationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Net.NetworkCredential GetCredential(string host, int32 port, string authenticationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCredential (host As String, port As Integer, authenticationType As String) As NetworkCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Net::NetworkCredential ^ GetCredential(System::String ^ host, int port, System::String ^ authenticationType);" />
      <MemberSignature Language="F#" Value="abstract member GetCredential : string * int * string -&gt; System.Net.NetworkCredential&#xA;override this.GetCredential : string * int * string -&gt; System.Net.NetworkCredential" Usage="credentialCache.GetCredential (host, port, authenticationType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="authenticationType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">識別主機電腦的 <see cref="T:System.String" />。</param>
        <param name="port"><see cref="T:System.Int32" />，指定 <paramref name="host" /> 上的連接埠。</param>
        <param name="authenticationType"><see cref="T:System.String" />，識別連接到 <paramref name="host" /> 時，所使用的驗證配置。</param>
        <summary>傳回與指定主機、連接埠和驗證通訊協定關聯的 <see cref="T:System.Net.NetworkCredential" /> 執行個體。</summary>
        <returns><see cref="T:System.Net.NetworkCredential" />，或 <see langword="null" /> (如果在快取中沒有相符的認證)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會搜尋<xref:System.Net.CredentialCache>，並傳回<xref:System.Net.NetworkCredential>指定的主機、 連接埠和授權類型的執行個體。 `host`， `port`，並`authType`認證新增至時，所指定的值不區分大小比較值傳遞至此方法<xref:System.Net.CredentialCache>使用<xref:System.Net.CredentialCache.Add%2A>方法。  
  
 為支援的值`authType`"NTLM"、"Digest"、"Kerberos"，且"Negotiate"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="host" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="authType" /> 為 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="authType" /> 不是接受的值。  
  
-或- 
 <paramref name="host" /> 等於空字串 ("")。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="port" /> 小於零。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="credentialCache.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>傳回可以逐一查看 <see cref="T:System.Net.CredentialCache" /> 執行個體的列舉值。</summary>
        <returns><see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Net.CredentialCache" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下列程式碼範例會使用<xref:System.Net.CredentialCache.GetEnumerator%2A>方法，以傳回可逐一查看的列舉值<xref:System.Net.CredentialCache>執行個體。  
  
 [!code-cpp[CredentialCache_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/CredentialCache_GetEnumerator/CPP/credentialcache_getenumerator.cpp#1)]
 [!code-csharp[CredentialCache_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/CredentialCache_GetEnumerator/CS/credentialcache_getenumerator.cs#1)]
 [!code-vb[CredentialCache_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CredentialCache_GetEnumerator/VB/credentialcache_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>將 <see cref="T:System.Net.NetworkCredential" /> 執行個體從快取中刪除。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (Uri uriPrefix, string authType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Uri uriPrefix, string authType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Remove(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (uriPrefix As Uri, authType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(Uri ^ uriPrefix, System::String ^ authType);" />
      <MemberSignature Language="F#" Value="member this.Remove : Uri * string -&gt; unit" Usage="credentialCache.Remove (uriPrefix, authType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.Uri" />
        <Parameter Name="authType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriPrefix"><see cref="T:System.Uri" />，指定認證使用之資源的 URI 前置詞。</param>
        <param name="authType">由在 <paramref name="uriPrefix" /> 中命名的主機所使用的驗證配置。</param>
        <summary>從快取刪除 <see cref="T:System.Net.NetworkCredential" /> 執行個體，如果它與所指定之統一資源識別元 (URI) 和驗證通訊協定關聯。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會移除<xref:System.Net.NetworkCredential>執行個體<xref:System.Net.CredentialCache>如果指定的 URI 前置詞和驗證通訊協定符合與認證相關聯。 多次呼叫<xref:System.Net.CredentialCache.Remove%2A>方法相同<xref:System.Net.NetworkCredential>會有任何作用。  
  
 如果`authType`已`null`或是`uriPrefix`是`null`，或沒有相符的認證是快取中找到，這個方法不會執行任何動作。  
  
   
  
## Examples  
 下列程式碼範例會使用這個方法來刪除<xref:System.Net.NetworkCredential>從快取的執行個體。  
  
 [!code-cpp[CredentialCache_Add_Remove#3](~/samples/snippets/cpp/VS_Snippets_Remoting/CredentialCache_Add_Remove/CPP/credentialcache_add_remove.cpp#3)]
 [!code-csharp[CredentialCache_Add_Remove#3](~/samples/snippets/csharp/VS_Snippets_Remoting/CredentialCache_Add_Remove/CS/credentialcache_add_remove.cs#3)]
 [!code-vb[CredentialCache_Add_Remove#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CredentialCache_Add_Remove/VB/credentialcache_add_remove.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string host, int port, string authenticationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string host, int32 port, string authenticationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (host As String, port As Integer, authenticationType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ host, int port, System::String ^ authenticationType);" />
      <MemberSignature Language="F#" Value="member this.Remove : string * int * string -&gt; unit" Usage="credentialCache.Remove (host, port, authenticationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="authenticationType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">識別主機電腦的 <see cref="T:System.String" />。</param>
        <param name="port"><see cref="T:System.Int32" />，指定 <paramref name="host" /> 上的連接埠。</param>
        <param name="authenticationType"><see cref="T:System.String" />，識別連接到 <paramref name="host" /> 時，所使用的驗證配置。</param>
        <summary>從快取刪除 <see cref="T:System.Net.NetworkCredential" /> 執行個體，如果它與所指定之主機、連接埠和驗證通訊協定關聯。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 這個方法會移除<xref:System.Net.NetworkCredential>執行個體<xref:System.Net.CredentialCache>如果指定的主機、 連接埠和驗證通訊協定符合與認證相關聯。 多次呼叫<xref:System.Net.CredentialCache.Remove%2A>方法相同<xref:System.Net.NetworkCredential>會有任何作用。  
  
 如果`authType`已`null`或是`uriPrefix`是`null`，或沒有相符的認證是快取中找到，這個方法不會執行任何動作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>